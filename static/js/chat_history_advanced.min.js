// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
class ChatAdvancedFeatures {
    constructor() {
        this.features = {
            search: false,
            export: false,
            analytics: false,
            realtime: false
        };
        this.init();
    }

    init() {
        this.setupSearch();
        this.setupExport();
        this.setupAnalytics();
        this.setupRealtimeUpdates();
        this.setupKeyboardShortcuts();
        this.setupAccessibility();
    }

    setupSearch() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        const searchHTML = `
            <div class="search-container" style="display: none;">
                <input type="text" id="message-search" placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º..." class="search-input">
                <button id="search-close" class="search-close">‚úï</button>
                <div id="search-results" class="search-results"></div>
            </div>
        `;

        const header = document.querySelector('.chat-header-bar');
        if (header) {
            header.insertAdjacentHTML('beforeend', searchHTML);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
            const searchBtn = document.createElement('button');
            searchBtn.className = 'search-btn';
            searchBtn.innerHTML = 'üîç';
            searchBtn.title = '–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º';
            searchBtn.onclick = () => this.toggleSearch();
            
            const langButtons = document.querySelector('.language-buttons');
            if (langButtons) {
                langButtons.appendChild(searchBtn);
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
            const searchInput = document.getElementById('message-search');
            const searchClose = document.getElementById('search-close');
            
            searchInput.addEventListener('input', this.debounce(() => {
                this.performSearch(searchInput.value);
            }, 300));

            searchClose.addEventListener('click', () => this.toggleSearch());
        }
    }

    setupExport() {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
        const exportBtn = document.createElement('button');
        exportBtn.className = 'export-btn';
        exportBtn.innerHTML = 'üìÑ';
        exportBtn.title = '–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏';
        exportBtn.onclick = () => this.exportChatHistory();
        
        const langButtons = document.querySelector('.language-buttons');
        if (langButtons) {
            langButtons.appendChild(exportBtn);
        }
    }

    setupAnalytics() {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analyzeChat();
    }

    setupRealtimeUpdates() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.checkForNewMessages();
        }, 30000);
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + F –¥–ª—è –ø–æ–∏—Å–∫–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                this.toggleSearch();
            }
            
            // Ctrl/Cmd + E –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
                e.preventDefault();
                this.exportChatHistory();
            }
            
            // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
            if (e.key === 'Escape') {
                this.closeSearch();
            }
        });
    }

    setupAccessibility() {
        // –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const messages = document.querySelectorAll('.message');
        messages.forEach((message, index) => {
            message.setAttribute('role', 'article');
            message.setAttribute('aria-label', `–°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}`);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º ARIA-–º–µ—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
            if (!button.getAttribute('aria-label')) {
                button.setAttribute('aria-label', button.title || button.textContent);
            }
        });
    }

    toggleSearch() {
        const searchContainer = document.querySelector('.search-container');
        const searchInput = document.getElementById('message-search');
        
        if (searchContainer.style.display === 'none') {
            searchContainer.style.display = 'block';
            searchInput.focus();
            this.features.search = true;
        } else {
            this.closeSearch();
        }
    }

    closeSearch() {
        const searchContainer = document.querySelector('.search-container');
        const searchInput = document.getElementById('message-search');
        
        searchContainer.style.display = 'none';
        searchInput.value = '';
        this.clearSearchResults();
        this.features.search = false;
    }

    performSearch(query) {
        if (!query.trim()) {
            this.clearSearchResults();
            return;
        }

        const messages = document.querySelectorAll('.message-content');
        const results = [];
        
        messages.forEach((message, index) => {
            const text = message.textContent.toLowerCase();
            if (text.includes(query.toLowerCase())) {
                results.push({
                    index: index,
                    text: message.textContent,
                    element: message
                });
            }
        });

        this.displaySearchResults(results, query);
    }

    displaySearchResults(results, query) {
        const resultsContainer = document.getElementById('search-results');
        
        if (results.length === 0) {
            resultsContainer.innerHTML = '<div class="no-results">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
            return;
        }

        const resultsHTML = results.map(result => `
            <div class="search-result" onclick="chatAdvanced.scrollToMessage(${result.index})">
                <div class="result-text">${this.highlightText(result.text, query)}</div>
                <div class="result-index">–°–æ–æ–±—â–µ–Ω–∏–µ ${result.index + 1}</div>
            </div>
        `).join('');

        resultsContainer.innerHTML = `
            <div class="search-summary">–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>
            ${resultsHTML}
        `;
    }

    highlightText(text, query) {
        const regex = new RegExp(`(${query})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    clearSearchResults() {
        const resultsContainer = document.getElementById('search-results');
        resultsContainer.innerHTML = '';
    }

    scrollToMessage(index) {
        const messages = document.querySelectorAll('.message');
        if (messages[index]) {
            messages[index].scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center' 
            });
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages[index].classList.add('highlighted');
            setTimeout(() => {
                messages[index].classList.remove('highlighted');
            }, 2000);
        }
    }

    async exportChatHistory() {
        try {
            const { sender_id, session_id } = this.getUrlParams();
            const response = await fetch(`/chat/api/export/${sender_id}/${session_id}`, {
                headers: {
                    'ngrok-skip-browser-warning': 'true'
                }
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `chat_history_${sender_id}_${session_id}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                
                this.showNotification('–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }
        } catch (error) {
            console.error('Export error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
        }
    }

    analyzeChat() {
        const messages = document.querySelectorAll('.message');
        const userMessages = document.querySelectorAll('.message.user');
        const assistantMessages = document.querySelectorAll('.message.model');
        
        const stats = {
            total: messages.length,
            user: userMessages.length,
            assistant: assistantMessages.length,
            averageLength: this.calculateAverageMessageLength(messages)
        };

        console.log('Chat Analytics:', stats);
        return stats;
    }

    calculateAverageMessageLength(messages) {
        let totalLength = 0;
        messages.forEach(msg => {
            const content = msg.querySelector('.message-content');
            if (content) {
                totalLength += content.textContent.length;
            }
        });
        return Math.round(totalLength / messages.length);
    }

    async checkForNewMessages() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const { sender_id, session_id } = this.getUrlParams();
        const currentCount = document.querySelectorAll('.message').length;
        
        try {
            const response = await fetch(`/chat/api/message-count/${sender_id}/${session_id}`, {
                headers: {
                    'ngrok-skip-browser-warning': 'true'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.count > currentCount) {
                    this.showNotification(`–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${data.count - currentCount}`, 'info');
                }
            }
        } catch (error) {
            console.error('Check for new messages error:', error);
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    getUrlParams() {
        const pathParts = window.location.pathname.split('/');
        return {
            sender_id: pathParts[3],
            session_id: pathParts[4]
        };
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
const advancedStyles = `
    .search-container {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #e5e5e7;
        border-top: none;
        z-index: 1000;
        padding: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .search-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #e5e5e7;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
    }

    .search-input:focus {
        border-color: #007aff;
        box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
    }

    .search-close {
        position: absolute;
        right: 10px;
        top: 10px;
        background: none;
        border: none;
        font-size: 16px;
        cursor: pointer;
        color: #86868b;
    }

    .search-results {
        max-height: 200px;
        overflow-y: auto;
        margin-top: 10px;
    }

    .search-result {
        padding: 8px;
        border-bottom: 1px solid #f2f2f7;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .search-result:hover {
        background-color: #f2f2f7;
    }

    .search-summary {
        padding: 8px;
        font-size: 12px;
        color: #86868b;
        border-bottom: 1px solid #e5e5e7;
    }

    .result-text {
        font-size: 14px;
        margin-bottom: 4px;
    }

    .result-index {
        font-size: 12px;
        color: #86868b;
    }

    .no-results {
        padding: 20px;
        text-align: center;
        color: #86868b;
    }

    .search-btn, .export-btn {
        background: none;
        border: none;
        font-size: 1.2em;
        padding: 4px 8px;
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
        border-radius: 4px;
    }

    .search-btn:hover, .export-btn:hover {
        opacity: 1;
        background-color: rgba(0, 122, 255, 0.1);
    }

    .message.highlighted {
        animation: highlightPulse 2s ease-out;
    }

    @keyframes highlightPulse {
        0% { background-color: rgba(0, 122, 255, 0.1); }
        100% { background-color: transparent; }
    }

    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 16px;
        border-radius: 8px;
        color: white;
        font-size: 14px;
        z-index: 10000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }

    .notification.show {
        transform: translateX(0);
    }

    .notification-success {
        background: #34c759;
    }

    .notification-error {
        background: #ff3b30;
    }

    .notification-info {
        background: #007aff;
    }

    mark {
        background-color: #ffeb3b;
        padding: 1px 2px;
        border-radius: 2px;
    }

    @media (max-width: 768px) {
        .search-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10000;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
            padding: 20px;
        }

        .search-input {
            margin-bottom: 10px;
        }

        .search-results {
            flex: 1;
            background: white;
            border-radius: 8px;
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const styleSheet = document.createElement('style');
styleSheet.textContent = advancedStyles;
document.head.appendChild(styleSheet);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
let chatAdvanced;
document.addEventListener('DOMContentLoaded', () => {
    chatAdvanced = new ChatAdvancedFeatures();
}); 