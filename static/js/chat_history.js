// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript –¥–ª—è —á–∞—Ç–∞ AuraFlora
console.log('üöÄ Chat history JavaScript –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...');
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤–Ω–µ—à–Ω–∏–π JS –∑–∞–≥—Ä—É–∂–µ–Ω
    window.chatHistoryInitialized = true;
    
    const langButtons = document.querySelectorAll('.lang-btn');
    const chatContainer = document.querySelector('.chat-container');
    const chatScrollArea = document.querySelector('.chat-scroll-area');
    
    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–æ–≤: ${langButtons.length}`);
    console.log(`üí¨ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞: ${chatContainer ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    console.log(`üìú –û–±–ª–∞—Å—Ç—å —Å–∫—Ä–æ–ª–ª–∞: ${chatScrollArea ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É CSS
    const styles = getComputedStyle(document.body);
    const primaryColor = styles.getPropertyValue('--primary-color');
    console.log(`üé® CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${primaryColor ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    function showLoading() {
        console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏...');
        chatContainer.innerHTML = `
            <div class="loading-indicator">
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
    function showError(message) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', message);
        chatContainer.innerHTML = `
            <div style="text-align: center; padding: 40px 20px; color: #ff4444;">
                <div style="font-size: 2em; margin-bottom: 10px;">‚ö†Ô∏è</div>
                <div style="font-weight: 500; margin-bottom: 5px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                <div style="font-size: 0.9em; opacity: 0.8;">${message}</div>
            </div>
        `;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–≤–µ—Ä—Ö
    function scrollToTop() {
        setTimeout(() => {
            if (chatScrollArea) {
                chatScrollArea.scrollTop = 0;
                console.log('üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            }
        }, 100);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
    function animateButton(button) {
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    langButtons.forEach((button, index) => {
        console.log(`üîò –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ${index + 1}: ${button.getAttribute('data-lang')}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        const events = ['click', 'touchend'];
        
        events.forEach(eventType => {
            button.addEventListener(eventType, function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const lang = this.getAttribute('data-lang');
                console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —è–∑—ã–∫: ${lang}`);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
                animateButton(this);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                langButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.style.transform = '';
                });
                
                this.classList.add('active');
                
                // –ü–æ–ª—É—á–∞–µ–º sender_id –∏ session_id –∏–∑ URL
                const pathParts = window.location.pathname.split('/');
                const sender_id = pathParts[3]; // /chat/history/{sender_id}/{session_id}
                const session_id = pathParts[4];
                
                console.log('üîó URL —á–∞—Å—Ç–∏:', pathParts);
                console.log('üë§ Sender ID:', sender_id);
                console.log('üìã Session ID:', session_id);
                
                if (!sender_id || !session_id) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å sender_id –∏–ª–∏ session_id –∏–∑ URL');
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                showLoading();
                
                const apiUrl = `/chat/api/messages/${sender_id}/${session_id}/${lang}`;
                console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º:', apiUrl);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
                fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'ngrok-skip-browser-warning': 'true',
                        'Accept': 'application/json',
                        'Cache-Control': 'no-cache'
                    }
                })
                .then(response => {
                    console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
                    if (data.error) {
                        showError(data.error);
                    } else {
                        // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        chatContainer.style.opacity = '0';
                        setTimeout(() => {
                            chatContainer.innerHTML = data.messages;
                            chatContainer.style.opacity = '1';
                            scrollToTop();
                            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                        }, 200);
                    }
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                });
            }, { passive: false });
        });
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if ('ontouchstart' in window) {
            console.log('üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');
            button.addEventListener('touchstart', function() {
                this.style.transform = 'scale(0.95)';
            });
            
            button.addEventListener('touchend', function() {
                setTimeout(() => {
                    this.style.transform = '';
                }, 150);
            });
        }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    scrollToTop();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(scrollToTop, 100);
    });
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
    let scrollTimeout;
    if (chatScrollArea) {
        chatScrollArea.addEventListener('scroll', function() {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è lazy loading –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            }, 100);
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', function(e) {
        // ESC –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–æ–∫—É—Å–∞
        if (e.key === 'Escape') {
            document.activeElement.blur();
        }
        
        // –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º —è–∑—ã–∫–æ–≤
        if (e.target.classList.contains('lang-btn')) {
            const buttons = Array.from(langButtons);
            const currentIndex = buttons.indexOf(e.target);
            
            if (e.key === 'ArrowLeft' && currentIndex > 0) {
                buttons[currentIndex - 1].focus();
            } else if (e.key === 'ArrowRight' && currentIndex < buttons.length - 1) {
                buttons[currentIndex + 1].focus();
            }
        }
    });
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    langButtons.forEach(button => {
        button.setAttribute('role', 'button');
        button.setAttribute('tabindex', '0');
    });
    
    console.log('üéâ Chat history interface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    setTimeout(() => {
        const images = document.querySelectorAll('img');
        const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
        const scripts = document.querySelectorAll('script[src]');
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`);
        console.log(`   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${images.length}`);
        console.log(`   - CSS —Ñ–∞–π–ª—ã: ${stylesheets.length}`);
        console.log(`   - JS —Ñ–∞–π–ª—ã: ${scripts.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ —Å—Ç–∏–ª–∏
        const testElement = document.createElement('div');
        testElement.style.position = 'absolute';
        testElement.style.visibility = 'hidden';
        testElement.style.height = '0';
        testElement.style.overflow = 'hidden';
        testElement.className = 'main-chat-area';
        document.body.appendChild(testElement);
        
        const computedStyle = window.getComputedStyle(testElement);
        const hasStyles = computedStyle.display !== 'inline' || computedStyle.maxWidth !== 'none';
        
        console.log(`   - CSS —Å—Ç–∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${hasStyles ? '–î–ê' : '–ù–ï–¢'}`);
        
        document.body.removeChild(testElement);
    }, 1000);
});