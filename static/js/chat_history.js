// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const translations = {
    'ru': {
        title: '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏',
        sessionId: 'ID —Å–µ—Å—Å–∏–∏',
        messageCount: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
        user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
        backToHome: '‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é',
        print: 'üñ®Ô∏è –ü–µ—á–∞—Ç—å',
        toTop: '‚¨ÜÔ∏è –í –Ω–∞—á–∞–ª–æ'
    },
    'en': {
        title: 'Chat History',
        sessionId: 'Session ID',
        messageCount: 'Message Count',
        user: 'User',
        phone: 'Phone',
        backToHome: '‚Üê Back to Home',
        print: 'üñ®Ô∏è Print',
        toTop: '‚¨ÜÔ∏è To Top'
    },
    'th': {
        title: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
        sessionId: '‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô',
        messageCount: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
        user: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        phone: '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        backToHome: '‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å',
        print: 'üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå',
        toTop: '‚¨ÜÔ∏è ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô'
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function translateSingleMessage(messageElement, targetLang) {
    try {
        const contentElement = messageElement.querySelector('.message-content');
        const originalText = contentElement.textContent || contentElement.innerText;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç–µ–∫—Å—Ç 'Translating...'
        contentElement.innerHTML = '<div style="display: flex; flex-direction: column; gap: 4px; color: #666;"><div style="display: flex; align-items: center; gap: 8px;"><div class="loading-spinner"></div><span>Translating...</span></div></div>';
        
        const response = await fetch('/translate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                text: originalText,
                lang: targetLang
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            contentElement.style.transition = 'opacity 0.3s ease-out';
            contentElement.style.opacity = '0';
            await new Promise(resolve => setTimeout(resolve, 300));
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥
            contentElement.innerHTML = '<div>' + data.translated_text + '</div>';
            contentElement.style.opacity = '1';
            return data.translated_text;
        } else if (response.status === 429) {
            // –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            console.log('Rate limit exceeded, waiting 5 seconds...');
            contentElement.innerHTML = '<div style="color: #666;">Rate limit exceeded, retrying in 5s...</div>';
            await new Promise(resolve => setTimeout(resolve, 5000));
            return await translateSingleMessage(messageElement, targetLang);
        } else {
            console.error('Translation failed:', response.status, response.statusText);
            contentElement.textContent = originalText;
            return originalText;
        }
    } catch (error) {
        console.error('Translation error:', error);
        const contentElement = messageElement.querySelector('.message-content');
        contentElement.textContent = originalText;
        return originalText;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
async function translateChat(lang) {
    try {
        console.log('Translating entire chat to:', lang, 'message by message');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const buttons = document.querySelectorAll('.lang-btn');
        buttons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.5';
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messages = Array.from(document.querySelectorAll('.message'));
        console.log('Found messages to translate:', messages.length);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < messages.length; i++) {
            const message = messages[i];
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await translateSingleMessage(message, lang);
            
            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        document.querySelector('.header h1').textContent = translations[lang].title;
        
        console.log('Chat translation completed message by message');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons.forEach(btn => {
            btn.disabled = false;
            btn.style.opacity = '1';
        });
        
    } catch (error) {
        console.error('Chat translation error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: ' + error.message);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const buttons = document.querySelectorAll('.lang-btn');
        buttons.forEach(btn => {
            btn.disabled = false;
            btn.style.opacity = '1';
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
document.addEventListener('DOMContentLoaded', function() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ lang –≤ URL
    const urlParams = new URLSearchParams(window.location.search);
    const currentLang = urlParams.get('lang') || 'ru';
    
    const langButtons = document.querySelectorAll('.lang-btn');
    langButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === currentLang) {
            btn.classList.add('active');
        }
    });
    
    langButtons.forEach(button => {
        button.addEventListener('click', function() {
            const lang = this.getAttribute('data-lang');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            langButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (lang === 'ru') {
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.set('lang', 'ru');
                window.location.href = currentUrl.toString();
                return;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            translateChat(lang);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const style = document.createElement('style');
    style.textContent = `
        .loading-spinner {
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
});