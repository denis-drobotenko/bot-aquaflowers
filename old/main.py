import logging
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, Body
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv
from datetime import datetime
from typing import List, Dict, Optional
import re
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from src.webhook_handlers import router as webhook_router
from src.config import DEV_MODE, PORT
from src import database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–∞–∑–æ–≤–∞—è)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤ –¥–ª—è debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
debug_logs_storage = []

class DebugLogHandler(logging.Handler):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ª–æ–≥–∏ AI –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def emit(self, record):
        try:
            log_entry = {
                'timestamp': datetime.fromtimestamp(record.created).isoformat(),
                'logger_name': record.name,
                'level': record.levelname,
                'message': record.getMessage(),
                'session_id': self.extract_session_id(record.getMessage())
            }
            debug_logs_storage.append(log_entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            if len(debug_logs_storage) > 1000:
                debug_logs_storage.pop(0)
                
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–≥–µ—Ä–µ
    
    def extract_session_id(self, message: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞"""
        patterns = [
            r'Session: ([^,\s]+)',
            r'session_id[=:\s]+([^,\s]+)',
            r'for session ([^,\s]+)',
            r'Session ID: ([^,\s]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, message)
            if match:
                return match.group(1)
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è AI –ø–∞–π–ø–ª–∞–π–Ω–∞
def setup_ai_pipeline_loggers():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ AI –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    # –°–æ–∑–¥–∞–µ–º formatter –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    detailed_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–µ–º debug handler –¥–ª—è —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤
    debug_handler = DebugLogHandler()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è AI pipeline
    ai_pipeline_logger = logging.getLogger('ai_pipeline')
    ai_pipeline_logger.setLevel(logging.INFO)
    ai_handler = logging.StreamHandler()
    ai_handler.setFormatter(detailed_formatter)
    ai_pipeline_logger.addHandler(ai_handler)
    ai_pipeline_logger.addHandler(debug_handler)  # –î–æ–±–∞–≤–ª—è–µ–º debug handler
    ai_pipeline_logger.propagate = False  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ root logger
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è JSON processor
    json_processor_logger = logging.getLogger('json_processor')
    json_processor_logger.setLevel(logging.INFO)
    json_handler = logging.StreamHandler()
    json_handler.setFormatter(detailed_formatter)
    json_processor_logger.addHandler(json_handler)
    json_processor_logger.addHandler(debug_handler)
    json_processor_logger.propagate = False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è command handler
    command_logger = logging.getLogger('command_handler')
    command_logger.setLevel(logging.INFO)
    command_handler = logging.StreamHandler()
    command_handler.setFormatter(detailed_formatter)
    command_logger.addHandler(command_handler)
    command_logger.addHandler(debug_handler)
    command_logger.propagate = False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è WhatsApp utils
    whatsapp_logger = logging.getLogger('whatsapp_utils')
    whatsapp_logger.setLevel(logging.INFO)
    whatsapp_handler = logging.StreamHandler()
    whatsapp_handler.setFormatter(detailed_formatter)
    whatsapp_logger.addHandler(whatsapp_handler)
    whatsapp_logger.addHandler(debug_handler)
    whatsapp_logger.propagate = False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è webhook flow
    webhook_logger = logging.getLogger('webhook_flow')
    webhook_logger.setLevel(logging.INFO)
    webhook_handler = logging.StreamHandler()
    webhook_handler.setFormatter(detailed_formatter)
    webhook_logger.addHandler(webhook_handler)
    webhook_logger.addHandler(debug_handler)
    webhook_logger.propagate = False
    
    print("üîç AI Pipeline loggers configured:")
    print("   - ai_pipeline: AI requests, responses, and processing")
    print("   - json_processor: JSON parsing, fixing, and extraction")
    print("   - command_handler: Command execution and results")
    print("   - whatsapp_utils: WhatsApp API calls and message sending")
    print("   - webhook_flow: Complete webhook processing flow")
    print("   - Debug interface: http://localhost:{}/debug".format(PORT))

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Lifespan –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ü–ï–†–ï–î –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("Application startup.")
    setup_ai_pipeline_loggers()
    yield
    logger.info("Application shutdown.")

# –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="AuraFlora WhatsApp Bot",
    description="API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WhatsApp –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini.",
    version="1.0.0",
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

templates = Jinja2Templates(directory="templates")

@app.get("/", summary="–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", description="–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç.")
async def root():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return {"status": "AuraFlora Bot is running"}

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
        return {
            "status": "healthy",
            "service": "AuraFlora WhatsApp Bot",
            "version": "1.0.0",
            "timestamp": "2024-12-19T10:00:00Z"
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "service": "AuraFlora WhatsApp Bot"
        }

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å webhook'–∞–º–∏
app.include_router(webhook_router)

# Debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
@app.get("/debug", response_class=HTMLResponse)
async def debug_interface(request: Request):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ª–∞–¥–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    return templates.TemplateResponse("debug_interface.html", {"request": request})

@app.get("/debug/api/sessions")
async def debug_get_sessions():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –ª–æ–≥–æ–≤"""
    try:
        sessions = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏—è—Ö
        for log_entry in debug_logs_storage:
            session_id = log_entry.get('session_id')
            if not session_id:
                continue
                
            if session_id not in sessions:
                sender_id = session_id.split('_')[0] if '_' in session_id else session_id
                sessions[session_id] = {
                    'session_id': session_id,
                    'sender_id': sender_id,
                    'message_count': 0,
                    'last_message_time': log_entry.get('timestamp'),
                    'first_seen': log_entry.get('timestamp')
                }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ webhook_flow –ª–æ–≥–∞–º
            if 'WEBHOOK_INPUT' in log_entry.get('message', '') or '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' in log_entry.get('message', ''):
                sessions[session_id]['message_count'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if log_entry.get('timestamp') > sessions[session_id]['last_message_time']:
                sessions[session_id]['last_message_time'] = log_entry.get('timestamp')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sessions_list = list(sessions.values())
        sessions_list.sort(key=lambda x: x['last_message_time'], reverse=True)
        
        return JSONResponse(content=sessions_list)
        
    except Exception as e:
        logger.error(f"Error getting sessions from logs: {e}")
        return JSONResponse(content=[])

@app.get("/debug/api/session/{session_id}/messages")
async def debug_get_session_messages(session_id: str):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ –ª–æ–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session_logs = [
            log for log in debug_logs_storage 
            if log.get('session_id') == session_id
        ]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤
        messages = []
        
        for log in session_logs:
            message = log.get('message', '')
            timestamp = log.get('timestamp')
            
            # –ò—â–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'WEBHOOK_INPUT' in message and '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' in message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥–∞
                content = extract_user_message_from_log(message)
                if content:
                    messages.append({
                        'role': 'user',
                        'content': content,
                        'timestamp': timestamp
                    })
            
            # –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
            elif 'MESSAGE_SEND_START' in message and '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ' in message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ª–æ–≥–∞
                content = extract_bot_response_from_log(message)
                if content:
                    messages.append({
                        'role': 'assistant', 
                        'content': content,
                        'timestamp': timestamp
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        messages.sort(key=lambda x: x['timestamp'])
        
        return JSONResponse(content={
            'messages': messages,
            'logs': session_logs
        })
        
    except Exception as e:
        logger.error(f"Error getting session messages from logs: {e}")
        return JSONResponse(content={'messages': [], 'logs': []})

def extract_user_message_from_log(log_message: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–∞"""
    try:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: "text": "—Å–æ–æ–±—â–µ–Ω–∏–µ"
        import re
        pattern = r'"text":\s*"([^"]*)"'
        match = re.search(pattern, log_message)
        if match:
            return match.group(1)
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = r'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.*?:\s*(.+)'
        match = re.search(pattern, log_message)
        if match:
            return match.group(1).strip()
            
    except Exception:
        pass
    return ""

def extract_bot_response_from_log(log_message: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –∏–∑ –ª–æ–≥–∞"""
    try:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        pattern = r'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.*?:\s*(.+)'
        match = re.search(pattern, log_message)
        if match:
            return match.group(1).strip()
            
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ JSON
        pattern = r'"text":\s*"([^"]*)"'
        match = re.search(pattern, log_message)
        if match:
            return match.group(1)
            
    except Exception:
        pass
    return ""

@app.get("/api/debug/logs")
async def export_debug_logs(period_min: int = 20):
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ debug –ª–æ–≥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)"""
    try:
        from scripts.save_logs_from_gcloud import get_logs_via_api
        
        print(f"üîç [DEBUG_LOGS] –ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ –∑–∞ {period_min} –º–∏–Ω—É—Ç...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –ª–æ–≥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        success, logs_data = get_logs_via_api(period_min)
        
        if not success:
            print(f"‚ùå [DEBUG_LOGS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤")
            return JSONResponse(content={'logs': [], 'count': 0, 'error': 'Failed to download logs'})
        
        if not logs_data:
            print(f"‚ö†Ô∏è [DEBUG_LOGS] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤")
            return JSONResponse(content={'logs': [], 'count': 0, 'error': 'Empty logs data'})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import json
        with open('log.logs', 'w', encoding='utf-8') as f:
            json.dump(logs_data, f, ensure_ascii=False, indent=2)
        print(f"üíæ [DEBUG_LOGS] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(logs_data)} –ª–æ–≥–æ–≤ –≤ log.logs")
        
        return JSONResponse(content={
            'logs': logs_data,
            'count': len(logs_data),
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        print(f"üí• [DEBUG_LOGS] –û—à–∏–±–∫–∞: {e}")
        logger.error(f"Error exporting debug logs: {e}")
        return JSONResponse(content={'logs': [], 'count': 0, 'error': str(e)})

@app.post("/api/save_fresh_logs")
async def save_fresh_logs(request: Request, logs: list = Body(...)):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª fresh_logs.log"""
    try:
        with open("fresh_logs.log", "w", encoding="utf-8") as f:
            for log in logs:
                ts = log.get("timestamp", "")
                msg = log.get("textPayload") or log.get("message", "")
                f.write(f"[{ts}] {msg}\n")
        return {"status": "ok", "count": len(logs)}
    except Exception as e:
        return {"status": "error", "error": str(e)}

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ - —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!
static_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
app.mount("/", StaticFiles(directory=static_dir, html=True), name="static")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT) 