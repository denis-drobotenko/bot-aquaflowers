"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
"""

import logging
from typing import Dict, List, Any, Optional, Tuple
from . import database
from .template_utils import format_message_html, format_user_info, render_chat_history_template, render_error_template

logger = logging.getLogger(__name__)

def extract_user_info_from_messages(messages: List[Dict[str, Any]], session_id: str = None) -> Tuple[Optional[str], Optional[str]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ session_id"""
    user_name = None
    user_phone = None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º sender_id –∏–∑ session_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sender_id = None
    if session_id and '_' in session_id:
        sender_id = session_id.split('_')[0]
        if sender_id.isdigit() and len(sender_id) >= 10:
            user_phone = sender_id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if sender_id:
        user_name = database.get_user_info(sender_id)
        if user_name:
            logger.info(f"Found user name in database: {sender_id} -> {user_name}")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not user_name:
        for msg in messages:
            if msg.get('role') == 'system':
                content = msg.get('content_original', '')
                if content.startswith('user_info:name='):
                    user_name = content.split('=', 1)[1].strip()
                elif content.startswith('user_info:phone='):
                    user_phone = content.split('=', 1)[1].strip()
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if not user_name and sender_id:
        user_name = f"User {sender_id[-4:]}"  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –∏–º—è
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—â–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_phone:
        for msg in messages:
            if msg.get('role') == 'user':
                content = msg.get('content_original', '')
                # –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                import re
                phone_match = re.search(r'\b\d{10,15}\b', content)
                if phone_match:
                    user_phone = phone_match.group()
                    break
    
    return user_name, user_phone

def process_chat_messages(messages: List[Dict[str, Any]]) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç HTML"""
    messages_html = ""
    logger.info(f"Starting to process {len(messages)} messages")
    
    for i, msg in enumerate(messages):
        try:
            logger.info(f"Processing message {i}: {msg}")
            
            role = msg.get('role', 'unknown')
            content_original_raw = msg.get('content_original', '')
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫—É
            if content_original_raw is None:
                content_ru = ''
            else:
                content_ru = str(content_original_raw)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            content_ru = content_ru.strip()
            
            logger.info(f"Message {i} processed: role={role}, content={repr(content_ru)}")
            
            timestamp = msg.get('timestamp', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ HTML
            message_html = format_message_html(role, content_ru, timestamp)
            messages_html += message_html
            
        except Exception as e:
            logger.error(f"Error processing message {i}: {e}")
            continue
    
    return messages_html

def get_chat_history_data(session_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º sender_id –∏–∑ session_id
    if '_' in session_id and session_id.split('_')[0].isdigit() and len(session_id.split('_')[0]) >= 10:
        # –§–æ—Ä–º–∞—Ç: {sender_id}_{session_id}
        sender_id = session_id.split('_')[0]
        actual_session_id = '_'.join(session_id.split('_')[1:])
    else:
        # –§–æ—Ä–º–∞—Ç: {session_id} - –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        actual_session_id = session_id
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ sender_id —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        sender_id = None
        known_users = ["79140775712", "79140775713", "79140775714", "79140775715"]
        for user_id in known_users:
            try:
                history = database.get_conversation_history(user_id, actual_session_id, limit=1)
                if history:
                    sender_id = user_id
                    break
            except:
                continue
        
        if not sender_id:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º session_id –∫–∞–∫ sender_id (fallback)
            sender_id = actual_session_id
    
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = database.get_multilingual_chat_history(sender_id, actual_session_id)
    
    # –ï—Å–ª–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not chat_history:
        conversation_history = database.get_conversation_history(sender_id, actual_session_id, limit=50)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_history = {
            'session_id': actual_session_id,
            'sender_id': sender_id,
            'messages': []
        }
        
        if conversation_history:
            for msg in conversation_history:
                if msg.get('role') in ['user', 'assistant', 'model']:
                    chat_history['messages'].append({
                        'content_original': msg.get('content', ''),
                        'content_en': msg.get('content', ''),  # –ü–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                        'content_th': msg.get('content', ''),  # –ü–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                        'role': msg.get('role'),
                        'timestamp': msg.get('timestamp')
                    })
    
    return {
        'chat_history': chat_history,
        'sender_id': sender_id,
        'actual_session_id': actual_session_id
    }

def create_mock_chat_history() -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return [
        {
            "role": "user",
            "content": "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç",
            "timestamp": "2024-01-15 10:30:00"
        },
        {
            "role": "model", 
            "content": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AuraFlORA! üå∏ –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤?",
            "timestamp": "2024-01-15 10:30:05"
        },
        {
            "role": "user",
            "content": "–î–∞, –ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥",
            "timestamp": "2024-01-15 10:31:00"
        },
        {
            "role": "model",
            "content": "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º!",
            "timestamp": "2024-01-15 10:31:05"
        }
    ]

def process_chat_history(session_id: str) -> Tuple[str, int]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        data = get_chat_history_data(session_id)
        chat_history = data['chat_history']
        sender_id = data['sender_id']
        actual_session_id = data['actual_session_id']
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
        if session_id == "test_user_123_local_dev":
            messages = create_mock_chat_history()
            chat_history = {
                'session_id': actual_session_id,
                'sender_id': sender_id,
                'messages': messages
            }
        
        messages = chat_history.get('messages', [])
        logger.info(f"Retrieved {len(messages)} messages from multilingual chat for session {session_id}")
        
        if not messages:
            # –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            return render_error_template(f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."), 404
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_name, user_phone = extract_user_info_from_messages(messages, session_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        user_info = format_user_info(user_name, user_phone, 'ru')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_html = process_chat_messages(messages)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
        html_content = render_chat_history_template(user_info, messages_html)
        
        return html_content, 200
        
    except Exception as e:
        logger.error(f"Error processing chat history: {e}", exc_info=True)
        import traceback
        tb = traceback.format_exc()
        return render_error_template(str(e), tb), 500 
 