"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç AI –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
"""

import logging
import asyncio
from . import whatsapp_utils, database, catalog_reader, order_utils
import re
import unicodedata
import json
import inspect

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è –∫–æ–º–∞–Ω–¥
command_logger = logging.getLogger('command_handler')

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è command –ø–∞–π–ø–ª–∞–π–Ω–∞
command_pipeline_logger = logging.getLogger('command_pipeline')

def get_caller_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–µ"""
    try:
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename.split('/')[-1]  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        function = frame.f_code.co_name
        line = frame.f_lineno
        return f"{filename}:{function}:{line}"
    except:
        return "unknown:unknown:0"

def log_with_context(message, level="info"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    caller = get_caller_info()
    full_message = f"[{caller}] {message}"
    if level == "info":
        command_logger.info(full_message)
    elif level == "error":
        command_logger.error(full_message)
    elif level == "warning":
        command_logger.warning(full_message)

async def handle_commands(sender_id: str, session_id: str, command: dict):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ—Ç AI –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î–´
    command_logger.info(f"[COMMAND_START] Session: {session_id}")
    command_logger.info(f"[COMMAND_INPUT] Command received: {command}")
    
    logger.info(f"[COMMAND_LOG] Starting command handling for session {session_id}")
    logger.info(f"[COMMAND_LOG] Command received: {command}")
    
    try:
        if not isinstance(command, dict):
            logger.error(f"Invalid command format: {command}")
            command_logger.error(f"[COMMAND_ERROR] Invalid format - not a dict: {command}")
            return {"status": "error", "message": "Invalid command format"}
        
        if not command:  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            logger.warning("Empty command")
            command_logger.warning("[COMMAND_EMPTY] Empty command dict")
            return {"status": "success", "message": "No command to execute"}
        
        command_type = command.get('type')
        
        if not command_type:
            logger.error(f"No command type found in command: {command}")
            command_logger.error(f"[COMMAND_ERROR] No type field: {command}")
            return {"status": "error", "message": "No command type found"}
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–ê –ö–û–ú–ê–ù–î–´
        command_logger.info(f"[COMMAND_TYPE] Processing command type: {command_type}")
        
        logger.info(f"[COMMAND_LOG] Processing command: {command}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if command_type == 'send_catalog':
            command_logger.info("[COMMAND_EXEC] Executing send_catalog")
            result = await handle_send_catalog(sender_id, session_id, command)
        elif command_type == 'save_order_info':
            command_logger.info("[COMMAND_EXEC] Executing save_order_info")
            result = await handle_save_order_info(sender_id, session_id, command)
        elif command_type == 'confirm_order':
            command_logger.info("[COMMAND_EXEC] Executing confirm_order")
            result = await handle_confirm_order(sender_id, session_id, command)
        elif command_type == 'clarify_request':
            command_logger.info("[COMMAND_EXEC] Executing clarify_request")
            result = await handle_clarify_request(sender_id, session_id, command)
        else:
            logger.error(f"Unknown command type: {command_type}")
            command_logger.error(f"[COMMAND_ERROR] Unknown command type: {command_type}")
            result = {"status": "error", "message": f"Unknown command: {command_type}"}
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        command_logger.info(f"[COMMAND_RESULT] Command '{command_type}' result: {result}")
        
        logger.info(f"[COMMAND_LOG] Command '{command_type}' result: {result}")
        return result

    except Exception as e:
        logger.error(f"Error handling command: {e}", exc_info=True)
        command_logger.error(f"[COMMAND_EXCEPTION] Session: {session_id}, Error: {e}")
        return {"status": "error", "message": str(e)}

async def handle_send_catalog(sender_id: str, session_id: str, command: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ö–ê–¢–ê–õ–û–ì–ê
    command_logger.info(f"[CATALOG_START] Sender: {sender_id}, Session: {session_id}")
    command_logger.info(f"[CATALOG_COMMAND] Command details: {command}")
    
    logger.info(f"Executing 'send_catalog' command for sender {sender_id}, session {session_id}")
    # –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–∏—Å–∞–ª '—Ö–æ—á—É', '–∫–∞—Ç–∞–ª–æ–≥', '–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç—ã' –∏ —Ç.–¥.)
    
    command_logger.info(f"[CATALOG_PHONE] Using sender_id: {sender_id}")
    
    await whatsapp_utils.handle_send_catalog(sender_id, session_id)
    
    result = {"status": "success", "action": "catalog_sent"}
    command_logger.info(f"[CATALOG_RESULT] {result}")
    
    return result

async def handle_save_order_info(sender_id: str, session_id: str, command: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê
    command_logger.info(f"[SAVE_ORDER_START] Sender: {sender_id}, Session: {session_id}")
    command_logger.info(f"[SAVE_ORDER_COMMAND] Command details: {command}")
    
    logger.info(f"Executing 'save_order_info' command for sender {sender_id}, session {session_id}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ delivery_question_asked –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ system-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    order_data = {}
    for key in ['bouquet', 'date', 'time', 'delivery_needed', 'address', 'card_needed', 'card_text']:
        if key in command:
            order_data[key] = command[key]
    
    command_logger.info(f"[SAVE_ORDER_DATA] Extracted order data: {order_data}")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –±—É–∫–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
    if 'bouquet' in order_data:
        retailer_id = command.get('retailer_id')
        command_logger.info(f"[SAVE_ORDER_VALIDATION] Validating bouquet: {order_data['bouquet']}, retailer_id: {retailer_id}")
        
        if retailer_id:
            validation = catalog_reader.validate_product_selection(retailer_id)
            command_logger.info(f"[SAVE_ORDER_VALIDATION_RESULT] {validation}")
            
            if not validation['valid']:
                logger.warning(f"Invalid product selection: {retailer_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
                available_products = catalog_reader.get_catalog_products()
                product_names = [p.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') for p in available_products[:5]]  # –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                
                error_result = {
                    "status": "error", 
                    "action": "invalid_product",
                    "message": f"–¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å: {', '.join(product_names)}",
                    "available_products": product_names
                }
                
                command_logger.error(f"[SAVE_ORDER_INVALID_PRODUCT] {error_result}")
                return error_result
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
                product = validation['product']
                order_data['product_name'] = product.get('name', order_data['bouquet'])
                order_data['product_price'] = product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                order_data['retailer_id'] = retailer_id
                
                command_logger.info(f"[SAVE_ORDER_PRODUCT_INFO] Product validated and added: {product}")
    
    # –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ parts AI-—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ system-—Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ parts AI-—Å–æ–æ–±—â–µ–Ω–∏—è
    
    result = {"status": "success", "action": "data_saved", "data": order_data}
    command_logger.info(f"[SAVE_ORDER_RESULT] {result}")
    
    return result

async def handle_confirm_order(sender_id: str, session_id: str, command: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    logger.info(f"Executing 'confirm_order' command for sender {sender_id}, session {session_id}")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø—Ä—è–º–æ –≤ –∫–æ–º–∞–Ω–¥–µ
    order_data = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã confirm_order (–µ—Å–ª–∏ AI –ø–µ—Ä–µ–¥–∞–ª –∏—Ö)
    for key in ['bouquet', 'date', 'time', 'delivery_needed', 'address', 'card_needed', 'card_text', 'recipient_name', 'recipient_phone', 'retailer_id']:
        if key in command:
            order_data[key] = command[key]
    
    command_logger.info(f"[CONFIRM_ORDER_DATA_FROM_COMMAND] {order_data}")
    
    # –ï—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if not order_data:
        logger.info(f"No order data in command, collecting from history for sender {sender_id}, session {session_id}")
        command_logger.info("[CONFIRM_ORDER_COLLECTING_FROM_HISTORY] No data in command, collecting from history")
        
        history = database.get_conversation_history_for_ai(sender_id, session_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
        command_logger.info(f"[CONFIRM_ORDER_HISTORY] Retrieved history: {history}")
        
        for msg in history:
            if msg.get('role') == 'model' and msg.get('parts'):
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ parts
                for part in msg['parts']:
                    if part.get('text', '').startswith('[SAVED:'):
                        saved_text = part['text']
                        command_logger.info(f"[CONFIRM_ORDER_FOUND_SAVED] Found saved data: {saved_text}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ [SAVED: key=value, key2=value2]
                        try:
                            data_part = saved_text[7:-1]  # –£–±–∏—Ä–∞–µ–º [SAVED: –∏ ]
                            for item in data_part.split(', '):
                                if '=' in item:
                                    key, value = item.split('=', 1)
                                    order_data[key] = value
                        except Exception as e:
                            logger.warning(f"Failed to parse saved data: {saved_text}, error: {e}")
                            command_logger.warning(f"[CONFIRM_ORDER_PARSE_ERROR] Failed to parse: {saved_text}, error: {e}")
                            continue
    else:
        logger.info(f"Found order data in command: {order_data}")
        command_logger.info(f"[CONFIRM_ORDER_DATA_FOUND_IN_COMMAND] {order_data}")

    # 2. –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - AI —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
    # order_summary = command.get('order_summary', '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.')
    # await whatsapp_utils.send_whatsapp_message(phone_number, order_summary, session_id)
    
    # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ LINE
    order_data["session_id"] = session_id  # –î–æ–±–∞–≤–ª—è–µ–º session_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏
    
    command_logger.info(f"[CONFIRM_ORDER_SENDING_TO_LINE] Final order data: {order_data}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –≤ —Ñ–æ–Ω–µ
    from .chat_translation_manager import save_completed_chat_with_translations
    asyncio.create_task(save_completed_chat_with_translations(sender_id, session_id))
    command_logger.info(f"[CONFIRM_ORDER_TRANSLATION_STARTED] Started background translation for session: {session_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Line —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
    line_result = await order_utils.send_order_to_line(sender_id, session_id, order_data)
    command_logger.info(f"[CONFIRM_ORDER_LINE_RESULT] LINE result: {line_result}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LINE –ø–µ—Ä–µ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if line_result == "ok":
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await order_utils.notify_user_order_sent(sender_id, session_id)
        command_logger.info(f"[CONFIRM_ORDER_USER_NOTIFIED] User notification sent")
    else:
        command_logger.error(f"[CONFIRM_ORDER_LINE_FAILED] Failed to send to LINE: {line_result}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ LINE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # 4. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    from . import session_manager
    new_session_id = session_manager.create_new_session_after_order(sender_id)
    
    command_logger.info(f"[CONFIRM_ORDER_NEW_SESSION] Created new session after order: {new_session_id}")
    
    result = {"status": "success", "action": "order_confirmed", "data": order_data, "new_session_id": new_session_id}
    command_logger.info(f"[CONFIRM_ORDER_RESULT] {result}")
    
    return result

async def handle_clarify_request(sender_id: str, session_id: str, command: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    command_logger.info(f"[CLARIFY_START] Sender: {sender_id}, Session: {session_id}")
    command_logger.info(f"[CLARIFY_COMMAND] Command details: {command}")
    
    logger.info(f"Executing 'clarify_request' command for sender {sender_id}, session {session_id}")
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    result = {"status": "success", "action": "request_clarified"}
    command_logger.info(f"[CLARIFY_RESULT] {result}")
    
    return result

async def handle_user_message(sender_id: str, session_id: str, message: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è reply –Ω–∞ –±—É–∫–µ—Ç"""
    log_with_context("[USER_MESSAGE_START] ==================== USER MESSAGE PROCESSING ====================")
    log_with_context(f"[USER_MESSAGE_INPUT] Sender: {sender_id}, Session: {session_id}, Message: {message}")
    command_logger.info(f"[USER_MESSAGE_START] Sender: {sender_id}, Session: {session_id}")
    command_logger.info(f"[USER_MESSAGE_DATA] Message: {message}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å reply_to_message_id –∏ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –±—É–∫–µ—Ç–æ–º ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞
    reply_to = message.get('reply_to_message_id')
    if reply_to:
        log_with_context(f"[USER_MESSAGE_REPLY] Found reply_to: {reply_to}")
        command_logger.info(f"[USER_MESSAGE_REPLY] Found reply_to: {reply_to}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ WA ID
        from . import database
        replied_message = database.get_message_by_wa_id(sender_id, session_id, reply_to)
        
        if replied_message and replied_message.get('role') == 'model':
            content = replied_message.get('content', '')
            if 'üå∏' in content:  # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—É–∫–µ—Ç–æ–º
                bouquet_name = content.split('\n')[0]
                log_with_context(f"[USER_MESSAGE_BOUQUET_SELECTED] Bouquet: {bouquet_name}")
                command_logger.info(f"[USER_MESSAGE_BOUQUET_SELECTED] Bouquet: {bouquet_name}")
                return await handle_bouquet_selection(sender_id, session_id, bouquet_name)
    
    log_with_context("[USER_MESSAGE_END] ==================== USER MESSAGE PROCESSING END ====================")
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ... 

def extract_bouquet_name_or_id_from_caption(caption: str, products=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –±—É–∫–µ—Ç–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ WhatsApp. –ò—â–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º, —Å–≤–µ—Ä—è–µ—Ç —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º."""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ë–£–ö–ï–¢–ê
    command_logger.info(f"[BOUQUET_EXTRACT_START] Caption: {caption}")
    command_logger.info(f"[BOUQUET_EXTRACT_PRODUCTS] Products count: {len(products) if products else 0}")
    
    def clean_text(text):
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = re.sub(r'[\U00010000-\U0010ffff\u2600-\u26FF\u2700-\u27BF]+', '', text)
        text = ''.join(c for c in text if unicodedata.category(c)[0] != 'C')
        return text.replace(' ', '').lower()
    
    lines = [l.strip() for l in caption.split('\n') if l.strip()]
    bouquet_id = None
    bouquet_name = None
    
    logger.info(f"[REPLY_DEBUG] Extracting from caption: {caption}")
    logger.info(f"[REPLY_DEBUG] Lines: {lines}")
    
    command_logger.info(f"[BOUQUET_EXTRACT_LINES] {lines}")
    
    # 1. –ò—â–µ–º ID –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for line in lines:
        id_match = re.search(r'ID[:\s]*([a-zA-Z0-9]+)', line)
        if id_match:
            bouquet_id = id_match.group(1)
            logger.info(f"[REPLY_DEBUG] Found ID in line: {bouquet_id}")
            command_logger.info(f"[BOUQUET_EXTRACT_ID_FOUND] ID: {bouquet_id} in line: {line}")
            break
    
    # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ (–≥–∏–±–∫–æ)
    if products:
        for line in lines:
            clean_line = clean_text(line)
            logger.info(f"[REPLY_DEBUG] Checking line: '{line}' -> clean: '{clean_line}'")
            command_logger.info(f"[BOUQUET_EXTRACT_CHECKING] Line: '{line}' -> clean: '{clean_line}'")
            for p in products:
                pname = p.get('name', '').replace('üå∏', '').strip()
                if clean_line == clean_text(pname):
                    bouquet_name = p.get('name')
                    bouquet_id = p.get('retailer_id')
                    command_logger.info(f"[BOUQUET_EXTRACT_MATCH] Found match: {bouquet_name}, ID: {bouquet_id}")
                    return bouquet_name, bouquet_id
    
    # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∫–∞–∫ fallback)
    if not bouquet_name and lines:
        name_clean = re.sub(r'[\U00010000-\U0010ffff\u2600-\u26FF\u2700-\u27BF]+', '', lines[0]).strip()
        bouquet_name = name_clean
        command_logger.info(f"[BOUQUET_EXTRACT_FALLBACK] Using first line: {bouquet_name}")
    
    result = (bouquet_name, bouquet_id)
    command_logger.info(f"[BOUQUET_EXTRACT_RESULT] {result}")
    
    return result

async def handle_bouquet_selection(sender_id: str, session_id: str, bouquet_caption: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ reply (–ø–æ –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ)."""
    log_with_context("[BOUQUET_SELECTION_START] ==================== BOUQUET SELECTION PROCESSING ====================")
    log_with_context(f"[BOUQUET_SELECTION_INPUT] Sender: {sender_id}, Session: {session_id}, Caption: {bouquet_caption}")
    logger.info(f"Handling bouquet selection via reply: {bouquet_caption} for sender {sender_id}, session {session_id}")
    
    from . import catalog_reader
    products = catalog_reader.get_catalog_products()
    log_with_context(f"[BOUQUET_SELECTION_CATALOG] Retrieved {len(products)} products from catalog")
    
    name, bouquet_id = extract_bouquet_name_or_id_from_caption(bouquet_caption, products)
    log_with_context(f"[BOUQUET_SELECTION_EXTRACTED] Name: {name}, ID: {bouquet_id}")
    
    validation = None
    if bouquet_id:
        log_with_context(f"[BOUQUET_SELECTION_VALIDATE_ID] Validating by ID: {bouquet_id}")
        validation = catalog_reader.validate_product_selection(bouquet_id)
        if validation['valid']:
            log_with_context(f"[BOUQUET_SELECTION_VALID_ID] Bouquet found by ID: {bouquet_id}")
            logger.info(f"Bouquet found by ID: {bouquet_id}")
    
    if not validation or not validation['valid']:
        log_with_context(f"[BOUQUET_SELECTION_VALIDATE_NAME] Validating by name: {name}")
        validation = catalog_reader.validate_product_by_name(name)
    
    if not validation['valid']:
        log_with_context(f"[BOUQUET_SELECTION_INVALID] Invalid selection: {bouquet_caption}", "warning")
        logger.warning(f"Invalid bouquet selection via reply: {bouquet_caption}")
        available_products = validation.get('available_products', [])
        product_names = available_products[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
        return {
            "status": "error", 
            "action": "invalid_product",
            "message": f"–¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å: {', '.join(product_names)} üå∏",
            "available_products": product_names
        }
    
    product = validation['product']
    log_with_context(f"[BOUQUET_SELECTION_PRODUCT] Validated product: {product}")
    
    order_data = {
        'bouquet': product.get('name', name),
        'retailer_id': product.get('retailer_id'),
        'product_name': product.get('name', name),
        'product_price': product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    }
    log_with_context(f"[BOUQUET_SELECTION_ORDER_DATA] Order data: {order_data}")
    
    # –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ parts AI-—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ system-—Å–æ–æ–±—â–µ–Ω–∏—è
    
    phone_number = session_id.split('_')[0]
    log_with_context(f"[BOUQUET_SELECTION_PHONE] Extracted phone: {phone_number}")
    await whatsapp_utils.send_whatsapp_message(phone_number, \
        f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—à –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞ '{product.get('name', name)}'. –ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫—É–¥–∞? üå∏", session_id)
    
    return {"status": "success", "action": "bouquet_selected"} 