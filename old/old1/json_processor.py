import json
import re
import logging
from typing import Dict, Any, Optional, Tuple
from src import config
import uuid
import inspect
from google.generativeai import GenerationConfig

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
json_processor_logger = logging.getLogger('json_processor')

def get_caller_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–µ"""
    try:
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename.split('/')[-1]  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        function = frame.f_code.co_name
        line = frame.f_lineno
        return f"{filename}:{function}:{line}"
    except:
        return "unknown:unknown:0"

def log_with_context(message, level="info"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    caller = get_caller_info()
    full_message = f"[{caller}] {message}"
    if level == "info":
        json_processor_logger.info(full_message)
    elif level == "error":
        json_processor_logger.error(full_message)
    elif level == "warning":
        json_processor_logger.warning(full_message)

def parse_ai_response(response, request_id: str = None) -> Tuple[Optional[str], Optional[Dict[str, Any]]]:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—É.
    AI –í–°–ï–ì–î–ê –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    
    Args:
        response: –û—Ç–≤–µ—Ç –æ—Ç Gemini API
        request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Tuple[Optional[str], Optional[Dict]]: (—Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º–∞–Ω–¥–∞)
    """
    if request_id is None:
        request_id = str(uuid.uuid4())[:8]
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞ AI
        text_parts = []
        for part in response.candidates[0].content.parts:
            if hasattr(part, 'text') and part.text:
                text_parts.append(part.text)
        
        if not text_parts:
            logger.error("[JSON_PROCESSOR] No text parts found in AI response")
            log_with_context("[JSON_AI_PARSE_ERROR] No text parts found in AI response", "error")
            return None, None
        
        full_text = ''.join(text_parts)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï RAW AI RESPONSE
        log_with_context(f"[JSON_AI_PARSE_INPUT] RequestID: {request_id} | Full AI response: {full_text}")
        
        logger.info(f"[JSON_PROCESSOR] Processing AI response: {full_text[:100]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
        json_data, user_text = extract_and_fix_json(full_text)
        
        # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –æ—à–∏–±–∫–∞, AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å JSON
        if json_data is None:
            logger.error("[JSON_PROCESSOR] AI –Ω–µ –≤–µ—Ä–Ω—É–ª JSON - —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            log_with_context(f"[JSON_AI_PARSE_NO_JSON] RequestID: {request_id} | AI should have returned JSON according to system instruction", "error")
            return None, None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
        command = json_data.get('command', None)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ text
        if not user_text and json_data.get('text'):
            user_text = json_data.get('text')
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï PARSE –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        log_with_context(f"[JSON_AI_PARSE_JSON_DATA] RequestID: {request_id} | {json_data}")
        log_with_context(f"[JSON_AI_PARSE_USER_TEXT] RequestID: {request_id} | {user_text}")
        log_with_context(f"[JSON_AI_PARSE_COMMAND] RequestID: {request_id} | {command}")
        
        logger.info(f"[JSON_PROCESSOR] Result: text='{user_text}', command={command}")
        return user_text, command
        
    except Exception as e:
        logger.error(f"[JSON_PROCESSOR] Unexpected error in parse_ai_response: {e}")
        log_with_context(f"[JSON_AI_PARSE_EXCEPTION] RequestID: {request_id} | {e}", "error")
        return None, None

def extract_and_fix_json(ai_response: str, retry_count: int = 2) -> Tuple[Optional[Dict[str, Any]], str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI. AI –í–°–ï–ì–î–ê –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    
    Args:
        ai_response: –û—Ç–≤–µ—Ç –æ—Ç AI (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å JSON)
        retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
        
    Returns:
        Tuple[Optional[Dict], str]: (–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, —Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    request_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
    
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    log_with_context(f"[JSON_AI_EXTRACT_START] RequestID: {request_id} | AI response length: {len(ai_response)}")
    log_with_context(f"[JSON_AI_EXTRACT_INPUT] RequestID: {request_id} | Raw AI response: {ai_response}")
    
    logger.info(f"[JSON_PROCESSOR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI, –¥–ª–∏–Ω–∞: {len(ai_response)}")
    
    # –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –Ω–∞–ø—Ä—è–º—É—é
    log_with_context(f"[JSON_AI_EXTRACT_STEP1] RequestID: {request_id} | Trying direct JSON extraction")
    json_data, user_text = _try_extract_json_direct(ai_response, request_id)
    
    if json_data is not None:
        logger.info("[JSON_PROCESSOR] JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω –Ω–∞–ø—Ä—è–º—É—é")
        log_with_context(f"[JSON_AI_EXTRACT_SUCCESS_DIRECT] RequestID: {request_id} | JSON extracted successfully on first try")
        log_with_context(f"[JSON_AI_EXTRACT_RESULT] RequestID: {request_id} | JSON data: {json_data}")
        log_with_context(f"[JSON_AI_EXTRACT_RESULT] RequestID: {request_id} | User text: {user_text}")
        return json_data, user_text
    
    # –®–∞–≥ 2: JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ AI
    logger.warning("[JSON_PROCESSOR] JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ AI")
    log_with_context(f"[JSON_AI_EXTRACT_STEP2] RequestID: {request_id} | JSON invalid, attempting AI fix")
    
    for attempt in range(retry_count):
        logger.info(f"[JSON_PROCESSOR] –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è #{attempt + 1}")
        log_with_context(f"[JSON_AI_FIX_ATTEMPT] RequestID: {request_id} | Attempt #{attempt + 1}/{retry_count}")
        
        try:
            fixed_response = _fix_json_with_ai(ai_response, request_id)
            if not fixed_response:
                log_with_context(f"[JSON_AI_FIX_ATTEMPT_{attempt + 1}] RequestID: {request_id} | AI returned empty response", "warning")
                continue
                
            log_with_context(f"[JSON_AI_FIX_ATTEMPT_{attempt + 1}] RequestID: {request_id} | AI returned: {fixed_response}")
            
            json_data, user_text = _try_extract_json_direct(fixed_response, request_id)
            
            if json_data is not None:
                logger.info(f"[JSON_PROCESSOR] JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ #{attempt + 1}")
                log_with_context(f"[JSON_AI_FIX_SUCCESS] RequestID: {request_id} | JSON fixed on attempt #{attempt + 1}")
                log_with_context(f"[JSON_AI_FIX_RESULT] RequestID: {request_id} | JSON data: {json_data}")
                log_with_context(f"[JSON_AI_FIX_RESULT] RequestID: {request_id} | User text: {user_text}")
                return json_data, user_text
                
        except Exception as e:
            logger.error(f"[JSON_PROCESSOR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ JSON (–ø–æ–ø—ã—Ç–∫–∞ #{attempt + 1}): {e}")
            log_with_context(f"[JSON_AI_FIX_ATTEMPT_{attempt + 1}_ERROR] RequestID: {request_id} | {e}", "error")
            continue
    
    # –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å JSON)
    logger.error("[JSON_PROCESSOR] –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON - AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å JSON —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    log_with_context(f"[JSON_AI_EXTRACT_FAILED] RequestID: {request_id} | All fix attempts failed - AI should have returned JSON", "error")
    
    return None, None


def _try_extract_json_direct(response: str, request_id: str) -> Tuple[Optional[Dict[str, Any]], str]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JSON –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞.
    
    Returns:
        Tuple[Optional[Dict], str]: (json_–¥–∞–Ω–Ω—ã–µ, —Ç–µ–∫—Å—Ç_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø
    log_with_context(f"[JSON_DIRECT_START] RequestID: {request_id} | Attempting direct extraction from: {response}")
    
    # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
    cleaned_response = _clean_markdown(response)
    log_with_context(f"[JSON_DIRECT_CLEANED] RequestID: {request_id} | After markdown cleaning: {cleaned_response}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –±–ª–æ–∫
    json_match = re.search(r'\{.*\}', cleaned_response, re.DOTALL)
    if not json_match:
        log_with_context(f"[JSON_DIRECT_NO_MATCH] RequestID: {request_id} | No JSON pattern found")
        return None, None
    
    json_str = json_match.group()
    log_with_context(f"[JSON_DIRECT_FOUND] RequestID: {request_id} | JSON string found: {json_str}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∫–∞–∫ –µ—Å—Ç—å
        json_data = json.loads(json_str)
        log_with_context(f"[JSON_DIRECT_PARSED] RequestID: {request_id} | Successfully parsed JSON: {json_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ JSON - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞
        user_text = json_data.get('text', '').strip()
        
        # –ï—Å–ª–∏ text –ø—É—Å—Ç–æ–π, —ç—Ç–æ –æ—à–∏–±–∫–∞ - AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç
        if not user_text:
            logger.error("[JSON_PROCESSOR] AI –≤–µ—Ä–Ω—É–ª JSON –±–µ–∑ –ø–æ–ª—è 'text' - —ç—Ç–æ –æ—à–∏–±–∫–∞")
            log_with_context(f"[JSON_DIRECT_NO_TEXT] RequestID: {request_id} | AI returned JSON without 'text' field", "error")
            return None, None
        
        # –ù–ï –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_with_context(f"[JSON_DIRECT_TEXT_EXTRACTED] RequestID: {request_id} | Text from JSON: {user_text}")
        
        return json_data, user_text
        
    except json.JSONDecodeError as e:
        logger.warning(f"[JSON_PROCESSOR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        log_with_context(f"[JSON_DIRECT_PARSE_ERROR] RequestID: {request_id} | JSON parse error: {e}")
        log_with_context(f"[JSON_DIRECT_PARSE_ERROR] RequestID: {request_id} | Problematic JSON: {json_str}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            fixed_json = re.sub(r'(["\'])([^"\']*?)\n([^"\']*?)\1', r'\1\2\\n\3\1', json_str)
            json_data = json.loads(fixed_json)
            
            user_text = json_data.get('text', '').strip()
            if user_text:
                log_with_context(f"[JSON_DIRECT_FIXED] RequestID: {request_id} | JSON fixed with regex: {user_text}")
                return json_data, user_text
        except:
            pass
        
        return None, None


def _fix_json_with_ai(broken_response: str, request_id: str) -> Optional[str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥—Ä—É–≥–æ–π AI –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï AI –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
    log_with_context(f"[JSON_AI_FIX_START] RequestID: {request_id} | Starting AI fix process")
    log_with_context(f"[JSON_AI_FIX_INPUT] RequestID: {request_id} | Broken response: {broken_response}")
    
    try:
        import google.generativeai as genai
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ API –∫–ª—é—á, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è AI
        genai.configure(api_key=config.GEMINI_API_KEY)
        model = genai.GenerativeModel(
            'gemini-1.5-flash',
            generation_config=GenerationConfig(
                temperature=0.1,
                max_output_tokens=8192  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Gemini
            )
        )
        
        fix_prompt = f"""
Fix this JSON response to make it valid JSON.
IMPORTANT: Preserve ALL line breaks and formatting in the "text" field!
DO NOT replace \\n with spaces, DO NOT merge lines!

Preserve all data, but fix only syntax errors.
Return ONLY the fixed JSON, without explanations.

Original response:
{broken_response}
"""
        
        log_with_context(f"[JSON_AI_FIX_PROMPT] RequestID: {request_id} | Prompt sent to AI: {fix_prompt}")
        
        response = model.generate_content(fix_prompt)
        fixed_text = response.text.strip()
        
        log_with_context(f"[JSON_AI_FIX_RAW_RESPONSE] RequestID: {request_id} | AI raw response: {response}")
        log_with_context(f"[JSON_AI_FIX_TEXT] RequestID: {request_id} | AI response text: {fixed_text}")
        
        logger.info(f"[JSON_PROCESSOR] AI –æ—Ç–≤–µ—Ç–∏–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {fixed_text[:100]}...")
        return fixed_text
        
    except Exception as e:
        logger.error(f"[JSON_PROCESSOR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ AI: {e}")
        log_with_context(f"[JSON_AI_FIX_ERROR] RequestID: {request_id} | AI fix failed: {e}", "error")
        return None


def _clean_markdown(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò MARKDOWN
    log_with_context(f"[MARKDOWN_CLEAN_INPUT] {text}")
    
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    text = re.sub(r'^```[a-zA-Z]*\n', '', text, flags=re.MULTILINE)
    text = re.sub(r'\n```$', '', text, flags=re.MULTILINE)
    text = re.sub(r'```', '', text)
    
    cleaned = text.strip()
    log_with_context(f"[MARKDOWN_CLEAN_OUTPUT] {cleaned}")
    
    return cleaned 