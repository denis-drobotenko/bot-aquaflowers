"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ webhook-–æ–≤ –¥–ª—è WhatsApp Business API
"""

import logging
import re
import time
import os
from fastapi import APIRouter, Request, Response, Query
from fastapi.responses import PlainTextResponse, JSONResponse, HTMLResponse
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

from . import database
from . import whatsapp_utils
from . import command_handler
from . import ai_manager
from .config import VERIFY_TOKEN, GEMINI_API_KEY
import google.generativeai as genai
from google.generativeai import GenerationConfig
import inspect
import sys
sys.path.append('archive')
from get_logs_api_fixed import get_logs_via_api
import traceback

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è webhook flow
webhook_logger = logging.getLogger('webhook_flow')

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è AI –ø–∞–π–ø–ª–∞–π–Ω–∞
ai_pipeline_logger = logging.getLogger('ai_pipeline')

router = APIRouter()

FORCED_SESSION_IDS = {}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
from . import session_manager

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Webhook ---

def get_sender_id(body: dict) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        return body['entry'][0]['changes'][0]['value']['contacts'][0]['wa_id']
    except (KeyError, IndexError):
        return None

def get_sender_name(body: dict) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        profile = body['entry'][0]['changes'][0]['value']['contacts'][0]['profile']
        full_name = profile.get('name', '')
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–º—è (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞)
        if full_name:
            first_name = full_name.split()[0]
            return first_name
        return None
    except (KeyError, IndexError):
        return None

def get_message_text(body: dict) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        return body['entry'][0]['changes'][0]['value']['messages'][0]['text']['body']
    except (KeyError, IndexError):
        return None

def get_interactive_message(body: dict) -> dict | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∏, —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞, –∫–æ—Ä–∑–∏–Ω–∞)."""
    try:
        message = body['entry'][0]['changes'][0]['value']['messages'][0]
        if 'interactive' in message:
            return message['interactive']
        return None
    except (KeyError, IndexError):
        return None

def get_button_reply(body: dict) -> dict | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    try:
        interactive = get_interactive_message(body)
        if interactive and interactive.get('type') == 'button_reply':
            return {
                'type': 'button_reply',
                'id': interactive['button_reply']['id'],
                'title': interactive['button_reply']['title']
            }
        return None
    except (KeyError, IndexError):
        return None

def get_list_reply(body: dict) -> dict | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫."""
    try:
        interactive = get_interactive_message(body)
        if interactive and interactive.get('type') == 'list_reply':
            return {
                'type': 'list_reply',
                'id': interactive['list_reply']['id'],
                'title': interactive['list_reply']['title'],
                'description': interactive['list_reply'].get('description', '')
            }
        return None
    except (KeyError, IndexError):
        return None

def get_product(body: dict) -> dict | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    try:
        message = body['entry'][0]['changes'][0]['value']['messages'][0]
        if 'product' in message:
            return {
                'type': 'product',
                'product_id': message['product']['id'],
                'catalog_id': message['product']['catalog_id'],
                'product_retailer_id': message['product']['product_retailer_id']
            }
        return None
    except (KeyError, IndexError):
        return None

def get_order(body: dict) -> dict | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    try:
        message = body['entry'][0]['changes'][0]['value']['messages'][0]
        if 'order' in message:
            return {
                'type': 'order',
                'order_id': message['order']['id'],
                'catalog_id': message['order']['catalog_id'],
                'product_items': message['order'].get('product_items', [])
            }
        return None
    except (KeyError, IndexError):
        return None

def is_valid_whatsapp_message(body: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ webhook –≤–∞–ª–∏–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        return (
            body.get("object") == "whatsapp_business_account" and
            body["entry"][0]["changes"][0]["value"]["messages"][0]
        )
    except (KeyError, IndexError):
        return False

def get_caller_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–µ"""
    try:
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename.split('/')[-1]  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        function = frame.f_code.co_name
        line = frame.f_lineno
        return f"{filename}:{function}:{line}"
    except:
        return "unknown:unknown:0"

def log_with_context(message, level="info"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    caller = get_caller_info()
    full_message = f"[{caller}] {message}"
    if level == "info":
        webhook_logger.info(full_message)
    elif level == "error":
        webhook_logger.error(full_message)
    elif level == "warning":
        webhook_logger.warning(full_message)

# --- –ö–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ Webhook ---

@router.get("/webhook")
async def verify_webhook(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –æ—Ç Meta"""
    mode = request.query_params.get("hub.mode")
    token = request.query_params.get("hub.verify_token")
    challenge = request.query_params.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        logger.info("Webhook verified successfully")
        return PlainTextResponse(content=challenge, status_code=200)
    else:
        logger.error("Webhook verification failed")
        return Response(content="Failed to verify webhook", status_code=403)

@router.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ webhook –æ—Ç WhatsApp Business API"""
    try:
        # –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from . import session_manager, database, ai_manager, whatsapp_utils, command_handler
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê WEBHOOK
        log_with_context("[WEBHOOK_START] ==================== WEBHOOK RECEIVED ====================")
        log_with_context(f"[WEBHOOK_CALLER] {get_caller_info()}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        log_with_context(f"[WEBHOOK_BODY] Request body: {body}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if not is_valid_whatsapp_message(body):
            log_with_context("[WEBHOOK_INVALID] Invalid WhatsApp message, ignoring")
            return JSONResponse(content={"status": "ignored"}, status_code=200)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
        log_with_context("[WEBHOOK_VALID] Valid WhatsApp message received")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        sender_id = get_sender_id(body)
        sender_name = get_sender_name(body)
        message_body = get_message_text(body)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•
        log_with_context(f"[WEBHOOK_EXTRACTED] Sender ID: {sender_id}")
        log_with_context(f"[WEBHOOK_EXTRACTED] Sender Name: {sender_name}")
        log_with_context(f"[WEBHOOK_EXTRACTED] Message Body: {message_body}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å sender_id –∏ message_body
        if not sender_id or not message_body:
            log_with_context("[WEBHOOK_MISSING_DATA] Missing sender_id or message_body")
            return JSONResponse(content={"status": "error", "message": "Missing required data"}, status_code=400)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–ê –°–û–û–ë–©–ï–ù–ò–Ø
        message_type = body['entry'][0]['changes'][0]['value']['messages'][0]['type']
        logger.info(f"[RAW_MESSAGE] Message type: {message_type}")
        log_with_context(f"[WEBHOOK_RAW_MESSAGE] Type: {message_type}")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–´–• –î–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø
        full_message_data = body['entry'][0]['changes'][0]['value']['messages'][0]
        logger.info(f"[RAW_MESSAGE] Full message data: {full_message_data}")
        log_with_context(f"[WEBHOOK_RAW_MESSAGE] Full data: {full_message_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        button_reply = get_button_reply(body)
        list_reply = get_list_reply(body)
        product = get_product(body)
        order = get_order(body)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–û–í –°–û–û–ë–©–ï–ù–ò–ô
        log_with_context(f"[WEBHOOK_MESSAGE_TYPES] Button: {button_reply}, List: {list_reply}, Product: {product}, Order: {order}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == 'text':
            logger.info(f"[TEXT] Text message: {message_body}")
            log_with_context(f"[WEBHOOK_TEXT_MESSAGE] {message_body}")
        elif message_type == 'button':
            if button_reply:
                message_body = button_reply.get('title', '')
                logger.info(f"[BUTTON] Button reply: {message_body}")
                log_with_context(f"[WEBHOOK_BUTTON_MESSAGE] {message_body}")
        elif message_type == 'interactive':
            if list_reply:
                message_body = list_reply.get('title', '')
                logger.info(f"[LIST] List reply: {message_body}")
                log_with_context(f"[WEBHOOK_LIST_MESSAGE] {message_body}")
        elif message_type == 'order':
            if order:
                message_body = f"–ó–∞–∫–∞–∑: {order.get('id', 'Unknown')}"
                logger.info(f"[ORDER] Order message: {message_body}")
                log_with_context(f"[WEBHOOK_ORDER_MESSAGE] {message_body}")
        else:
            logger.warning(f"[UNKNOWN] Unknown message type: {message_type}")
            log_with_context(f"[WEBHOOK_UNKNOWN_TYPE] Unknown message type: {message_type}")
            return JSONResponse(content={"status": "ignored", "message": "Unknown message type"}, status_code=200)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–Ø–ú–ò
        log_with_context("[WEBHOOK_SESSION_START] ==================== SESSION ID MANAGEMENT ====================")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º session_id
        if sender_id in FORCED_SESSION_IDS:
            session_id = FORCED_SESSION_IDS[sender_id]
            log_with_context(f"[WEBHOOK_SESSION_FORCED] Using forced session: {session_id}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session_id = session_manager.get_or_create_session_id(sender_id)
            log_with_context(f"[WEBHOOK_SESSION_MANAGED] Using managed session: {session_id}")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ï–°–°–ò–ò
        log_with_context(f"[WEBHOOK_SESSION_FINAL] Final Session ID: {session_id}")
        
        logger.info(f"Using session_id: {session_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—É–∫–µ—Ç–æ–º
        original_message = body['entry'][0]['changes'][0]['value']['messages'][0]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º reply_to_message_id –∏–∑ context.id (WhatsApp Business API —Ñ–æ—Ä–º–∞—Ç)
        reply_to = None
        if 'context' in original_message and 'id' in original_message['context']:
            reply_to = original_message['context']['id']
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï REPLY
        log_with_context(f"[WEBHOOK_REPLY] Reply to message ID: {reply_to}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ reply, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if reply_to:
            logger.info(f"[REPLY_DEBUG] Found reply_to_message_id: {reply_to}")
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ WA ID
            replied_message = database.get_message_by_wa_id(sender_id, session_id, reply_to)
            
            if replied_message:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç reply –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                replied_text = replied_message.get('content', '')
                message_body = f"{message_body} (–æ—Ç–≤–µ—Ç –Ω–∞: {replied_text})"
                logger.info(f"[REPLY_DEBUG] Enhanced message with reply context: {message_body}")
                log_with_context(f"[WEBHOOK_REPLY_CONTEXT] Enhanced message: {message_body}")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        log_with_context(f"[WEBHOOK_SAVE_USER_MESSAGE] Saving user message to database")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if sender_name:
            database.save_user_info(sender_id, sender_name)
            log_with_context(f"[WEBHOOK_USER_INFO_SAVED] User name saved: {sender_name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º WA message ID –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        wa_message_id = None
        try:
            message_data = body['entry'][0]['changes'][0]['value']['messages'][0]
            wa_message_id = message_data.get('id')
            log_with_context(f"[WEBHOOK_WA_MESSAGE_ID] Extracted WA message ID: {wa_message_id}")
        except Exception as e:
            log_with_context(f"[WEBHOOK_WA_MESSAGE_ID_ERROR] Failed to extract WA message ID: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å WA ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if wa_message_id:
            database.add_message_with_wa_id(sender_id, session_id, "user", message_body, wa_message_id)
            log_with_context(f"[WEBHOOK_USER_MESSAGE_SAVED_WA_ID] User message saved with WA ID: {wa_message_id}")
        else:
            database.add_message(sender_id, session_id, "user", message_body)
            log_with_context(f"[WEBHOOK_USER_MESSAGE_SAVED_AUTO_ID] User message saved with auto-generated ID")
        
        logger.info(f"[CHAT_LOG] USER ({sender_id}): {message_body}")
        
        log_with_context(f"[WEBHOOK_USER_MESSAGE_SAVED] User message saved")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        user_lang = ai_manager.get_user_language_from_session(sender_id, session_id)
        if user_lang == 'auto' or not user_lang:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
            user_lang = ai_manager.detect_user_language(message_body)
            ai_manager.save_user_language_to_session(sender_id, session_id, user_lang)
            logger.info(f"[CHAT_LOG] Detected and saved user language: {user_lang}")
            log_with_context(f"[WEBHOOK_LANG_DETECTED] Language detected and saved: {user_lang}")
        else:
            logger.info(f"[CHAT_LOG] Using language from session: {user_lang}")
            log_with_context(f"[WEBHOOK_LANG_FROM_SESSION] Using existing language: {user_lang}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation_history = database.get_conversation_history_for_ai(sender_id, session_id)
        logger.info(f"[CHAT_LOG] Conversation history length: {len(conversation_history)} messages")
        
        log_with_context(f"[WEBHOOK_HISTORY] Retrieved {len(conversation_history)} messages from history")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–∞—è –ª–∏ —ç—Ç–æ —Å–µ—Å—Å–∏—è (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
        if not conversation_history or len(conversation_history) == 0:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞),
            # –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç AI
            if not message_body or message_body.strip() == '':
                log_with_context("[WEBHOOK_NEW_SESSION_NO_USER_MESSAGE] New session, no user message, skipping AI response")
                return JSONResponse(content={"status": "ok", "info": "new session, no user message"})
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞), –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if session_manager.is_session_created_after_order(session_id):
                log_with_context("[WEBHOOK_SESSION_AFTER_ORDER] Session created after order, skipping AI response")
                return JSONResponse(content={"status": "ok", "info": "session created after order"})
            
            # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
            # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é, –ò–ò —É–≤–∏–¥–∏—Ç —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
            conversation_history = []
            log_with_context("[WEBHOOK_NEW_SESSION] New session detected, empty history")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê AI –ó–ê–ü–†–û–°–ê
        log_with_context("[WEBHOOK_AI_REQUEST_START] ==================== AI REQUEST STARTING ====================")
        log_with_context(f"[WEBHOOK_AI_INPUT] Session: {session_id}, Sender: {sender_name}, Lang: {user_lang}")
        log_with_context(f"[WEBHOOK_AI_HISTORY] History for AI: {conversation_history}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ AI
        await whatsapp_utils.send_typing_indicator(sender_id, True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∏–º–µ–Ω–∏ –∏ —è–∑—ã–∫–∞
        ai_response_text, ai_command = ai_manager.get_ai_response(sender_id, session_id, conversation_history, sender_name, user_lang)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê AI
        log_with_context("[WEBHOOK_AI_REQUEST_END] ==================== AI REQUEST COMPLETED ====================")
        log_with_context(f"[WEBHOOK_AI_RESPONSE_TEXT] {ai_response_text}")
        log_with_context(f"[WEBHOOK_AI_RESPONSE_COMMAND] {ai_command}")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï AI RESPONSE –í AI PIPELINE
        ai_pipeline_logger.info(f"[AI_RESPONSE_GENERATED] Session: {session_id} | Text: {ai_response_text} | Command: {ai_command}")
        
        logger.info(f"[AI_DEBUG] AI response: {ai_response_text}")
        if ai_command:
            logger.info(f"[AI_DEBUG] Command: {ai_command}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await whatsapp_utils.send_typing_indicator(sender_id, False)

        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –¢–ï–ö–°–¢–û–í–û–ì–û –û–¢–í–ï–¢–ê (–ü–ï–†–ï–î –ö–û–ú–ê–ù–î–ê–ú–ò)
        if ai_response_text:
            log_with_context("[WEBHOOK_SEND_MESSAGE_START] ==================== SENDING AI RESPONSE ====================")
            log_with_context(f"[WEBHOOK_SEND_MESSAGE_TEXT] Text to send: {ai_response_text}")
            log_with_context(f"[WEBHOOK_SEND_MESSAGE_TO] Sending to: {sender_id}")
            
            logger.info(f"[CHAT_LOG] SENDING TO USER ({sender_id}): {ai_response_text}")
            await whatsapp_utils.send_whatsapp_message(sender_id, ai_response_text, sender_id, session_id)
            
            log_with_context("[WEBHOOK_SEND_MESSAGE_END] ==================== AI RESPONSE SENT ====================")
        else:
            logger.info(f"[CHAT_LOG] No AI response text, skipping message")
            log_with_context("[WEBHOOK_NO_TEXT] No AI response text, skipping message send")

        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î
        if ai_command:
            log_with_context("[WEBHOOK_COMMAND_START] ==================== COMMAND PROCESSING ====================")
            log_with_context(f"[WEBHOOK_COMMAND_INPUT] Command to process: {ai_command}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥.)
            command_results = await command_handler.handle_commands(sender_id, session_id, ai_command)
            
            log_with_context(f"[WEBHOOK_COMMAND_RESULT] Command processing result: {command_results}")
            log_with_context("[WEBHOOK_COMMAND_END] ==================== COMMAND PROCESSING COMPLETED ====================")
            
            logger.info(f"[COMMAND_LOG] Command results: {command_results}")
            action = command_results.get('action', '') if isinstance(command_results, dict) else ''
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(command_results, dict) and command_results.get('status') == 'success':
                if action == 'catalog_sent':
                    # –ö–∞—Ç–∞–ª–æ–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                    logger.info(f"[COMMAND_LOG] Catalog sent, text already sent above")
                    log_with_context("[WEBHOOK_CATALOG_COMPLETE] Catalog sent, text already sent above")
                    log_with_context("[WEBHOOK_END] ==================== WEBHOOK COMPLETED ====================")
                    return JSONResponse(content={"status": "ok"}, status_code=200)
                elif action == 'bouquet_selected':
                    # –ë—É–∫–µ—Ç –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ reply, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                    logger.info(f"[COMMAND_LOG] Bouquet selected via reply, text already sent above")
                    log_with_context("[WEBHOOK_BOUQUET_COMPLETE] Bouquet selected via reply, text already sent above")
                    log_with_context("[WEBHOOK_END] ==================== WEBHOOK COMPLETED ====================")
                    return JSONResponse(content={"status": "ok"}, status_code=200)
                elif action == 'data_saved':
                    # –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                    logger.info(f"[COMMAND_LOG] Data saved, text already sent above")
                    log_with_context("[WEBHOOK_DATA_SAVED] Data saved, text already sent above")
                elif action == 'order_confirmed':
                    # –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                    logger.info(f"[COMMAND_LOG] Order confirmed, text already sent above")
                    log_with_context("[WEBHOOK_ORDER_CONFIRMED] Order confirmed, text already sent above")
                    log_with_context("[WEBHOOK_END] ==================== WEBHOOK COMPLETED ====================")
                    return JSONResponse(content={"status": "ok"}, status_code=200)
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                    logger.info(f"[COMMAND_LOG] Command '{action}' executed, text already sent above")
                    log_with_context(f"[WEBHOOK_COMMAND_COMPLETE] Command '{action}' executed, text already sent above")
        else:
            log_with_context("[WEBHOOK_NO_COMMAND] No command from AI, text already sent above")
        
        log_with_context(f"[WEBHOOK_SUCCESS] Successfully processed webhook for user {sender_id}")
        log_with_context("[WEBHOOK_END] ==================== WEBHOOK COMPLETED SUCCESSFULLY ====================")
        
        logger.info(f"Successfully processed webhook for user {sender_id}")
        return JSONResponse(content={"status": "ok"})

    except Exception as e:
        logger.error(f"Error in webhook handler: {e}", exc_info=True)
        log_with_context(f"[WEBHOOK_EXCEPTION] ==================== WEBHOOK ERROR ====================")
        log_with_context(f"[WEBHOOK_EXCEPTION] Error: {e}")
        log_with_context(f"[WEBHOOK_EXCEPTION] ==================== WEBHOOK ERROR END ====================")
        return JSONResponse(content={"status": "error", "message": "Internal server error"}, status_code=500)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
import asyncio
translation_semaphore = asyncio.Semaphore(2)  # –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞

@router.post("/translate")
async def translate_messages(request: Request):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI"""
    import threading
    import time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if translation_semaphore.locked():
        logger.warning("[TRANSLATE] Too many concurrent translations, returning 429")
        return JSONResponse(content={"error": "Too many concurrent translations"}, status_code=429)
    
    async with translation_semaphore:
        try:
            data = await request.json()
            text = data.get('text', '')
            target_lang = data.get('lang', 'en')
            logger.info(f"[TRANSLATE] Incoming text (len={len(text)}): {text[:100]}... lang={target_lang}")
            
            if not text:
                logger.warning("[TRANSLATE] No text provided!")
                return JSONResponse(content={"error": "No text provided"}, status_code=400)
            
            lang_names = {
                'en': 'English',
                'th': 'Thai',
                'ru': 'Russian'
            }
            target_lang_name = lang_names.get(target_lang, 'English')
            prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang_name}. –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏:\n\n{text}\n\n–ü–µ—Ä–µ–≤–æ–¥:"""
            logger.info(f"[TRANSLATE] Prompt (len={len(prompt)}): {prompt[:200]}...")
            
            result = {'translated_text': None, 'error': None}
            def run_gemini():
                try:
                    genai.configure(api_key=GEMINI_API_KEY)
                    model = genai.GenerativeModel(
                        model_name="gemini-2.0-flash-exp",
                        generation_config=GenerationConfig(
                            temperature=0.3,
                            max_output_tokens=8192  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Gemini
                        )
                    )
                    response = model.generate_content(prompt)
                    result['translated_text'] = response.text.strip()
                except Exception as e:
                    logger.error(f"[TRANSLATE] Gemini error: {e}")
                    result['error'] = str(e)
            
            thread = threading.Thread(target=run_gemini)
            thread.start()
            thread.join(timeout=30)
            if thread.is_alive():
                logger.error("[TRANSLATE] Gemini translation timeout!")
                return JSONResponse(content={"error": "Translation timeout"}, status_code=504)
            if result['error']:
                return JSONResponse(content={"error": result['error']}, status_code=500)
            return JSONResponse(content={"translated_text": result['translated_text']})
        except Exception as e:
            logger.error(f"Error translating text: {e}")
            return JSONResponse(content={"error": "Translation failed"}, status_code=500)

@router.post("/translate-chat")
async def translate_chat(request: Request):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        data = await request.json()
        session_id = data.get('session_id', '')
        target_lang = data.get('lang', 'en')
        logger.info(f"[TRANSLATE_CHAT] Translating unfinished chat for session {session_id} to {target_lang}")
        
        if not session_id:
            logger.warning("[TRANSLATE_CHAT] No session_id provided!")
            return JSONResponse(content={"error": "No session_id provided"}, status_code=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        completed_chat = database.get_completed_chat(session_id)
        if completed_chat:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
            translations = completed_chat.get('translations', {})
            if target_lang in translations:
                translated_html = translations[target_lang]
                return JSONResponse(content={"translated_html": translated_html})
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        from .chat_translation_manager import translate_unfinished_chat
        result = await translate_unfinished_chat(session_id, target_lang)
        
        if result.get('success'):
            return JSONResponse(content={"translated_html": result['translated_html']})
        else:
            return JSONResponse(content={"error": result.get('error', 'Translation failed')}, status_code=500)
        
    except Exception as e:
        logger.error(f"Error translating chat: {e}")
        return JSONResponse(content={"error": "Translation failed"}, status_code=500)

@router.get("/chat/{session_id}")
async def get_chat_history(session_id: str, lang: str = Query('ru')):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        from . import database
        completed_chat = database.get_completed_chat(session_id)
        
        if completed_chat:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            from .chat_history_processor import extract_user_info_from_messages, process_chat_messages
            from .template_utils import format_user_info, render_chat_history_template
            
            messages = completed_chat.get('messages', [])
            translations = completed_chat.get('translations', {})
            translation_status = completed_chat.get('translation_status', 'not_started')
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            if lang == 'ru':
                display_messages = messages
            elif lang in ['en', 'th'] and translations.get(lang):
                display_messages = translations[lang]
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                display_messages = messages
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name, user_phone = extract_user_info_from_messages(messages)
            user_info = format_user_info(user_name, user_phone, lang)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order_summary = completed_chat.get('order_summary', {})
            if order_summary:
                # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
                order_labels = {
                    'ru': {'order': '–ó–∞–∫–∞–∑', 'bouquet': '–ë—É–∫–µ—Ç', 'date': '–î–∞—Ç–∞', 'address': '–ê–¥—Ä–µ—Å'},
                    'en': {'order': 'Order', 'bouquet': 'Bouquet', 'date': 'Date', 'address': 'Address'},
                    'th': {'order': '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 'bouquet': '‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ', 'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'address': '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'}
                }
                lang_labels = order_labels.get(lang, order_labels['ru'])
                
                order_info = f"<br><strong>{lang_labels['order']}:</strong> "
                if order_summary.get('bouquet'):
                    order_info += f"{lang_labels['bouquet']}: {order_summary['bouquet']}"
                if order_summary.get('date'):
                    order_info += f", {lang_labels['date']}: {order_summary['date']}"
                if order_summary.get('address'):
                    order_info += f", {lang_labels['address']}: {order_summary['address']}"
                user_info += order_info
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_html = process_chat_messages(display_messages)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            if translation_status == 'in_progress':
                messages_html += '<div class="translation-status">üîÑ –ü–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</div>'
            elif translation_status == 'failed':
                messages_html += '<div class="translation-status error">‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</div>'
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            html_content = render_chat_history_template(user_info, messages_html)
            return HTMLResponse(content=html_content)
        
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            from .chat_history_processor import process_chat_history
            html_content, status_code = process_chat_history(session_id)
            return HTMLResponse(content=html_content, status_code=status_code)
            
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        from .template_utils import render_error_template
        error_html = render_error_template(str(e), tb)
        return HTMLResponse(content=error_html, status_code=500)

@router.post("/session/{sender_id}/new")
async def create_new_session(sender_id: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π session_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (sender_id) —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º timestamp-—Å—É—Ñ—Ñ–∏–∫—Å–æ–º."""
    from . import session_manager
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    new_session_id = session_manager.force_new_session(sender_id)
    
    return {"session_id": new_session_id}

@router.post("/api/force_session/{sender_id}")
async def force_session_id(sender_id: str, request: Request):
    data = await request.json()
    new_session_id = data.get("session_id")
    if not new_session_id:
        return {"success": False, "error": "No session_id provided"}
    old_session_id = FORCED_SESSION_IDS.get(sender_id)
    FORCED_SESSION_IDS[sender_id] = new_session_id
    logging.info(f"[FORCE_SESSION] sender_id={sender_id} old_session_id={old_session_id} new_session_id={new_session_id}")
    logging.info(f"[FORCED_SESSION_IDS_STATE] {FORCED_SESSION_IDS}")
    return {"success": True, "session_id": new_session_id}

@router.get("/api/debug/sessions")
async def get_sessions_for_period(period_min: int = Query(20, alias="period_min")):
    import logging
    logging.info(f"[DEBUG_LOGS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_min} –º–∏–Ω—É—Ç")
    if os.environ.get('GAE_ENV', '') or os.environ.get('K_SERVICE', ''):
        logging.warning("[DEBUG_LOGS] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        return {"sessions": [], "error": "–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ!"}
    try:
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(minutes=period_min)
        logging.info(f"[DEBUG_LOGS] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ get_logs_via_api —Å {start_time} –ø–æ {end_time}")
        logs_data, success = get_logs_via_api(start_time, end_time)
        logging.info(f"[DEBUG_LOGS] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: success={success}, –∑–∞–ø–∏—Å–µ–π={len(logs_data) if logs_data else 0}")
        if not success or not logs_data:
            logging.error("[DEBUG_LOGS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞!")
            return {"sessions": [], "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞"}
        with open("logs.log", "w", encoding="utf-8") as f:
            for entry in logs_data:
                ts = entry.get('timestamp', '')
                text = entry.get('textPayload', '')
                f.write(f"[{ts}] {text}\n")
        logging.info("[DEBUG_LOGS] –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs.log, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        now = datetime.utcnow()
        sessions = set()
        with open("logs.log", encoding="utf-8") as f:
            for line in f:
                m = re.search(r'\[(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})', line)
                if not m:
                    continue
                log_time = datetime.strptime(m.group(1), '%Y-%m-%dT%H:%M:%S')
                if (now - log_time).total_seconds() > period_min * 60:
                    continue
                session_ids = re.findall(r'(?:session_id|Session)[=: ]+([\w\-]+)', line)
                for sid in session_ids:
                    sessions.add(sid)
        logging.info(f"[DEBUG_LOGS] –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
        return {"sessions": sorted(sessions)}
    except Exception as e:
        import traceback
        err = f"{e}\n{traceback.format_exc()}"
        logging.error(f"[DEBUG_LOGS] –û—à–∏–±–∫–∞: {err}")
        return {"sessions": [], "error": err}