"""
–ß—Ç–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤ –∏–∑ WhatsApp Business API
"""

import logging
from .config import WHATSAPP_TOKEN, WHATSAPP_CATALOG_ID

logger = logging.getLogger(__name__)

def get_catalog_products():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ WABA.
    """
    try:
        import requests
        url = f"https://graph.facebook.com/v23.0/{WHATSAPP_CATALOG_ID}/products"
        headers = {
            "Authorization": f"Bearer {WHATSAPP_TOKEN}",
            "Content-Type": "application/json"
        }
        
        params = {
            "fields": "id,name,description,price,retailer_id,image_url,availability"
        }
        
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        
        data = response.json()
        logger.info(f"[CATALOG] Retrieved {len(data.get('data', []))} products from catalog")
        
        return data.get('data', [])
        
    except Exception as e:
        logger.error(f"Failed to get catalog products: {e}")
        return []

def format_catalog_for_ai(products):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI (–æ—Å—Ç–∞–≤–ª—è–µ–º ID —Ç–æ–ª—å–∫–æ –¥–ª—è AI, –Ω–æ –Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    if not products:
        return "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    catalog_text = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –ö–ê–¢–ê–õ–û–ì –¶–í–ï–¢–û–í –ò–ó WABA\n\n"
    for i, product in enumerate(products, 1):
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        catalog_text += f"{i}. {name}\n   –¶–µ–Ω–∞: {price}\n"
    catalog_text += "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã! –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è!"
    return catalog_text

def get_catalog_summary():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è AI.
    """
    products = get_catalog_products()
    
    if not products:
        return "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    summary = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    for product in products:
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        retailer_id = product.get('retailer_id', '')
        summary += f"- {name} (ID: {retailer_id})\n"
    
    return summary

def get_product_by_retailer_id(products, retailer_id):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –ø–æ retailer_id.
    """
    for product in products:
        if product.get('retailer_id') == retailer_id:
            return product
    return None

def get_product_by_name(products, product_name):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —ç–º–æ–¥–∂–∏).
    """
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —ç–º–æ–¥–∂–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    clean_name = product_name.replace('üå∏', '').strip().lower()
    
    for product in products:
        product_clean_name = product.get('name', '').replace('üå∏', '').strip().lower()
        if product_clean_name == clean_name:
            return product
    return None

def validate_product_selection(retailer_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å –¥–∞–Ω–Ω—ã–º retailer_id –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    products = get_catalog_products()
    product = get_product_by_retailer_id(products, retailer_id)
    
    if product:
        return {
            "valid": True,
            "product": product
        }
    else:
        return {
            "valid": False,
            "available_products": [p.get('retailer_id') for p in products]
        }

def validate_product_by_name(product_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    products = get_catalog_products()
    product = get_product_by_name(products, product_name)
    
    if product:
        return {
            "valid": True,
            "product": product
        }
    else:
        return {
            "valid": False,
            "available_products": [p.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') for p in products]
        }

def filter_available_products(products):
    """
    –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ (availability == 'in stock').
    –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º.
    """
    available = []
    for p in products:
        avail = p.get('availability')
        if avail is None or avail.lower() == 'in stock':
            available.append(p)
    return available 