"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WhatsApp Business API
"""

import logging
import httpx
import json
import inspect
from .config import WHATSAPP_TOKEN, WHATSAPP_PHONE_ID, WHATSAPP_CATALOG_ID
from . import catalog_reader

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è WhatsApp
whatsapp_logger = logging.getLogger('whatsapp_utils')

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è AI –ø–∞–π–ø–ª–∞–π–Ω–∞
ai_pipeline_logger = logging.getLogger('ai_pipeline')

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è whatsapp –ø–∞–π–ø–ª–∞–π–Ω–∞
whatsapp_pipeline_logger = logging.getLogger('whatsapp_pipeline')

def get_caller_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–µ"""
    try:
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename.split('/')[-1]  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        function = frame.f_code.co_name
        line = frame.f_lineno
        return f"{filename}:{function}:{line}"
    except:
        return "unknown:unknown:0"

def log_with_context(message, level="info"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    caller = get_caller_info()
    full_message = f"[{caller}] {message}"
    if level == "info":
        whatsapp_logger.info(full_message)
    elif level == "error":
        whatsapp_logger.error(full_message)
    elif level == "warning":
        whatsapp_logger.warning(full_message)

async def handle_send_catalog(to_number: str, session_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É (—Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é)"""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ö–ê–¢–ê–õ–û–ì–ê
    log_with_context(f"[CATALOG_SEND_START] To: {to_number}, Session: {session_id}", "info")
    
    try:
        catalog_products = catalog_reader.get_catalog_products()
        available_products = catalog_reader.filter_available_products(catalog_products)

        log_with_context(f"[CATALOG_SEND_PRODUCTS] Total products: {len(catalog_products)}, Available: {len(available_products)}", "info")

        if not available_products:
            log_with_context("[CATALOG_SEND_NO_PRODUCTS] No available products found", "warning")
            await send_whatsapp_message(to_number, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üå∏", to_number, session_id)
            log_with_context(f"[CATALOG_LOG] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –¥–ª—è session_id={session_id}", "info")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –∫–∞–∂–¥–æ–≥–æ –±—É–∫–µ—Ç–∞
        for idx, product in enumerate(available_products):
            name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            price = product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            image_url = product.get('image_url')
            caption = f"{name}\n{price} üå∏"
            
            log_with_context(f"[CATALOG_SEND_ITEM] {idx+1}/{len(available_products)} - Name: {name}, Price: {price}, URL: {image_url}", "info")
            
            log_with_context(f"[CATALOG_LOG] –û—Ç–ø—Ä–∞–≤–ª—è—é –±—É–∫–µ—Ç: session_id={session_id}, name={name}, price={price}, image_url={image_url}", "info")
            await send_whatsapp_image_with_caption(to_number, image_url, caption, to_number, session_id)
            
        log_with_context(f"[CATALOG_SEND_SUCCESS] Sent {len(available_products)} products to {to_number}", "info")
        log_with_context(f"[CATALOG_LOG] –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_number} (session_id={session_id})", "info")
        return True
        
    except Exception as e:
        log_with_context(f"[CATALOG_SEND_ERROR] {e} | to_number={to_number}, session_id={session_id}", "error")
        whatsapp_logger.error(f"[CATALOG_SEND_ERROR] Error: {e}, To: {to_number}, Session: {session_id}")
        await send_whatsapp_message(to_number, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. üå∏", to_number, session_id)
        return False

def add_flower_emoji(text: str) -> str:
    text = text.rstrip()
    if not text.endswith('üå∏'):
        return text + ' üå∏'
    return text

async def send_whatsapp_message(to_number: str, message: str, sender_id: str = None, session_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –¥–ª—è reply"""
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø
    log_with_context(f"[MESSAGE_SEND_START] To: {to_number}, Sender: {sender_id}, Session: {session_id}", "info")
    log_with_context(f"[MESSAGE_SEND_INPUT] Message: {message}", "info")
    
    def clean_message(text):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è WhatsApp, –Ω–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º \n
        import re
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'[ \t]+', ' ', text)
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        text = re.sub(r'^[ \t]+', '', text, flags=re.MULTILINE)
        text = re.sub(r'[ \t]+$', '', text, flags=re.MULTILINE)
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        return text
    
    message = clean_message(message)
    
    log_with_context(f"[MESSAGE_SEND_CLEANED] Cleaned message: {message}", "info")
    log_with_context(f"[WHATSAPP_LOG] Sending message to {to_number}: '{message}' (sender_id={sender_id}, session_id={session_id})", "info")
    
    try:
        url = f"https://graph.facebook.com/v23.0/{WHATSAPP_PHONE_ID}/messages"
        headers = {
            "Authorization": f"Bearer {WHATSAPP_TOKEN}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "messaging_product": "whatsapp",
            "to": to_number,
            "type": "text",
            "text": {
                "body": add_flower_emoji(message)
            }
        }
        
        log_with_context(f"[MESSAGE_SEND_API_REQUEST] URL: {url}", "info")
        log_with_context(f"[MESSAGE_SEND_API_PAYLOAD] {payload}", "info")
        
        log_with_context(f"[WHATSAPP_LOG] Request payload: {payload}", "info")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            
            log_with_context(f"[MESSAGE_SEND_API_RESPONSE_STATUS] {response.status_code}", "info")
            log_with_context(f"[MESSAGE_SEND_API_RESPONSE_BODY] {response.text}", "info")
            
            log_with_context(f"[WHATSAPP_LOG] Response status: {response.status_code}", "info")
            log_with_context(f"[WHATSAPP_LOG] Response body: {response.text}", "info")
            
            response.raise_for_status()
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω session_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if session_id and sender_id:
                try:
                    response_data = json.loads(response.text)
                    if 'messages' in response_data and len(response_data['messages']) > 0:
                        message_id = response_data['messages'][0]['id']
                        
                        log_with_context(f"[MESSAGE_SEND_SAVE_ID] Message ID: {message_id}", "info")
                        
                        from . import database
                        database.add_message_with_wa_id(sender_id, session_id, "model", message, message_id)
                        log_with_context(f"[REPLY_DEBUG] Saved text message with ID {message_id} for sender {sender_id}, session {session_id} | message={message}", "info")
                        
                        log_with_context(f"[MESSAGE_SEND_SAVED] Saved to database with ID: {message_id}", "info")
                        
                        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï AI RESPONSE SAVED
                        ai_pipeline_logger.info(f"[AI_RESPONSE_SAVED] Sender: {sender_id}, Session: {session_id} | Message ID: {message_id} | Text: {message}")
                        
                except Exception as e:
                    log_with_context(f"[REPLY_DEBUG] Failed to save message_id: {e} | sender_id={sender_id}, session_id={session_id} | message={message}", "error")
                    whatsapp_logger.error(f"[MESSAGE_SEND_SAVE_ERROR] Error saving to DB: {e}")
            
            log_with_context(f"[MESSAGE_SEND_SUCCESS] Message sent successfully", "info")
            log_with_context(f"Message sent successfully to {to_number} (sender_id={sender_id}, session_id={session_id})", "info")
            return True
            
    except Exception as e:
        log_with_context(f"Failed to send message to {to_number}: {e} | sender_id={sender_id}, session_id={session_id}", "error")
        whatsapp_logger.error(f"[MESSAGE_SEND_ERROR] Error: {e}, To: {to_number}, Sender: {sender_id}, Session: {session_id}")
        return False

async def send_whatsapp_image_with_caption(to_number: str, image_url: str, caption: str, sender_id: str = None, session_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é —á–µ—Ä–µ–∑ WhatsApp –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –¥–ª—è reply"""
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    log_with_context(f"[IMAGE_SEND_START] To: {to_number}, Sender: {sender_id}, Session: {session_id}", "info")
    log_with_context(f"[IMAGE_SEND_INPUT] Caption: {caption}, URL: {image_url}", "info")
    
    import re
    def clean_caption(text):
        text = re.sub(r"[\U00010000-\U0010ffff\u2600-\u26FF\u2700-\u27BF]+", '', text)
        text = text.strip()
        if not text.endswith('üå∏'):
            text += ' üå∏'
        return text
    caption = clean_caption(caption)
    
    log_with_context(f"[IMAGE_SEND_CLEANED] Cleaned caption: {caption}", "info")
    log_with_context(f"[WHATSAPP_LOG] Sending image with caption to {to_number}: '{caption}' (sender_id={sender_id}, session_id={session_id}, image_url={image_url})", "info")
    
    try:
        url = f"https://graph.facebook.com/v23.0/{WHATSAPP_PHONE_ID}/messages"
        headers = {
            "Authorization": f"Bearer {WHATSAPP_TOKEN}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "messaging_product": "whatsapp",
            "to": to_number,
            "type": "image",
            "image": {
                "link": image_url,
                "caption": caption
            }
        }
        
        log_with_context(f"[IMAGE_SEND_API_REQUEST] URL: {url}", "info")
        log_with_context(f"[IMAGE_SEND_API_PAYLOAD] {payload}", "info")
        
        log_with_context(f"[WHATSAPP_LOG] Image request payload: {payload}", "info")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            
            log_with_context(f"[IMAGE_SEND_API_RESPONSE_STATUS] {response.status_code}", "info")
            log_with_context(f"[IMAGE_SEND_API_RESPONSE_BODY] {response.text}", "info")
            
            log_with_context(f"[WHATSAPP_LOG] Image response status: {response.status_code}", "info")
            log_with_context(f"[WHATSAPP_LOG] Image response body: {response.text}", "info")
            
            response.raise_for_status()
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω session_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if session_id and sender_id:
                try:
                    response_data = json.loads(response.text)
                    if 'messages' in response_data and len(response_data['messages']) > 0:
                        message_id = response_data['messages'][0]['id']
                        
                        log_with_context(f"[IMAGE_SEND_SAVE_ID] Message ID: {message_id}", "info")
                        
                        from . import database
                        database.add_message_with_wa_id(sender_id, session_id, "model", caption, message_id)
                        log_with_context(f"[REPLY_DEBUG] Saved bouquet message with ID {message_id} for sender {sender_id}, session {session_id} | caption={caption} | image_url={image_url}", "info")
                        
                        log_with_context(f"[IMAGE_SEND_SAVED] Saved to database with ID: {message_id}", "info")
                        
                        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï AI RESPONSE SAVED (IMAGE)
                        ai_pipeline_logger.info(f"[AI_RESPONSE_SAVED] Sender: {sender_id}, Session: {session_id} | Message ID: {message_id} | Caption: {caption}")
                        
                except Exception as e:
                    log_with_context(f"[REPLY_DEBUG] Failed to save message_id: {e} | sender_id={sender_id}, session_id={session_id} | caption={caption} | image_url={image_url}", "error")
                    whatsapp_logger.error(f"[IMAGE_SEND_SAVE_ERROR] Error saving to DB: {e}")
            
            log_with_context(f"[IMAGE_SEND_SUCCESS] Image sent successfully", "info")
            log_with_context(f"Image with caption sent successfully to {to_number} (sender_id={sender_id}, session_id={session_id})", "info")
            return True
            
    except Exception as e:
        log_with_context(f"Failed to send image with caption to {to_number}: {e} | sender_id={sender_id}, session_id={session_id} | caption={caption} | image_url={image_url}", "error")
        whatsapp_logger.error(f"[IMAGE_SEND_ERROR] Error: {e}, To: {to_number}, Sender: {sender_id}, Session: {session_id}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        try:
            log_with_context("[IMAGE_SEND_FALLBACK] Trying to send text only", "info")
            await send_whatsapp_message(to_number, caption, sender_id, session_id)
        except:
            log_with_context("[IMAGE_SEND_FALLBACK_ERROR] Text fallback also failed", "error")
            pass
        return False

async def mark_message_as_read(message_id: str):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –≤ WhatsApp Cloud API"""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï MARK AS READ
    log_with_context(f"[MARK_READ_START] Message ID: {message_id}", "info")
    
    url = f"https://graph.facebook.com/v23.0/{WHATSAPP_PHONE_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "status": "read",
        "message_id": message_id
    }
    
    log_with_context(f"[MARK_READ_API_REQUEST] URL: {url}", "info")
    log_with_context(f"[MARK_READ_API_PAYLOAD] {payload}", "info")
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            
            log_with_context(f"[MARK_READ_API_RESPONSE_STATUS] {response.status_code}", "info")
            log_with_context(f"[MARK_READ_API_RESPONSE_BODY] {response.text}", "info")
            
            log_with_context(f"[WHATSAPP_LOG] Mark as read response status: {response.status_code}", "info")
            log_with_context(f"[WHATSAPP_LOG] Mark as read response body: {response.text}", "info")
            response.raise_for_status()
            
            log_with_context("[MARK_READ_SUCCESS] Message marked as read", "info")
            return True
            
    except Exception as e:
        log_with_context(f"Failed to mark message as read: {e} | message_id={message_id}", "error")
        whatsapp_logger.error(f"[MARK_READ_ERROR] Error: {e}, Message ID: {message_id}")
        return False

async def send_typing_indicator(to_number: str, typing: bool = True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ WhatsApp Cloud API"""
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï TYPING INDICATOR
    log_with_context(f"[TYPING_INDICATOR] To: {to_number}, Typing: {typing}", "info")
    
    # WhatsApp Cloud API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç typing indicator –Ω–∞–ø—Ä—è–º—É—é
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    if typing:
        log_with_context(f"[TYPING_LOG] User {to_number} would see typing indicator", "info")
    else:
        log_with_context(f"[TYPING_LOG] User {to_number} typing indicator stopped", "info")
    return True 