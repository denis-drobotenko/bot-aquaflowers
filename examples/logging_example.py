"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.utils.logging_decorator import log_function, get_logging_config
from src.config.logging_config import LoggingSettings


# –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@log_function("example_module")
def simple_function(name: str, age: int = 25) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return f"Hello {name}, you are {age} years old"


# –ü—Ä–∏–º–µ—Ä 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@log_function("example_module")
async def async_function(data: dict, delay: float = 1.0) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await asyncio.sleep(delay)
    return {"processed": True, "data": data, "timestamp": "2024-01-01"}


# –ü—Ä–∏–º–µ—Ä 3: –§—É–Ω–∫—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π
@log_function("example_module")
def function_with_error(param: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É"""
    if param == "error":
        raise ValueError("This is a test error")
    return f"Success: {param}"


# –ü—Ä–∏–º–µ—Ä 4: –§—É–Ω–∫—Ü–∏—è —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
@log_function("example_module")
def function_with_sensitive_data(user_data: dict) -> dict:
    """–§—É–Ω–∫—Ü–∏—è —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã)"""
    return {
        "user_id": user_data.get("user_id"),
        "status": "authenticated",
        "token": "secret_token_123"  # –ë—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –≤ –ª–æ–≥–∞—Ö
    }


class ExampleService:
    """–ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self):
        self.counter = 0
    
    @log_function("example_service")
    def increment_counter(self, amount: int = 1) -> int:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫"""
        self.counter += amount
        return self.counter
    
    @log_function("example_service")
    def get_counter(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        return self.counter
    
    @log_function("example_service")
    async def async_operation(self, data: list) -> dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
        await asyncio.sleep(0.1)
        return {
            "processed_items": len(data),
            "sum": sum(data) if data else 0
        }


def setup_logging_examples():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    print("=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
    print("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é:")
    LoggingSettings.setup_development_logging()
    config = get_logging_config()
    print(f"   –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {config.enabled_modules}")
    print(f"   –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {config.disabled_modules}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    print("\n2. –ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:")
    LoggingSettings.setup_custom_logging({
        "enabled_modules": ["example_module", "example_service"],
        "disabled_modules": ["test_"],
        "enabled_functions": ["example_module.simple_function"],
        "disabled_functions": ["example_module.noisy_function"]
    })
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print("\n3. –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    from src.utils.logging_decorator import enable_logging_for_module, disable_logging_for_module
    
    enable_logging_for_module("custom_module")
    disable_logging_for_module("noisy_module")
    
    print("   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")


async def run_examples():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\n=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    print("\n1. –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è:")
    result1 = simple_function("Alice", 30)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    print("\n2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:")
    result2 = await async_function({"key": "value"}, 0.5)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –§—É–Ω–∫—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π
    print("\n3. –§—É–Ω–∫—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π:")
    try:
        function_with_error("error")
    except ValueError as e:
        print(f"   –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 4: –§—É–Ω–∫—Ü–∏—è —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n4. –§—É–Ω–∫—Ü–∏—è —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    sensitive_data = {
        "user_id": "12345",
        "username": "john_doe",
        "password": "secret_password",
        "api_key": "sk-1234567890abcdef"
    }
    result4 = function_with_sensitive_data(sensitive_data)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –ü—Ä–∏–º–µ—Ä 5: –°–µ—Ä–≤–∏—Å —Å –º–µ—Ç–æ–¥–∞–º–∏
    print("\n5. –°–µ—Ä–≤–∏—Å —Å –º–µ—Ç–æ–¥–∞–º–∏:")
    service = ExampleService()
    
    service.increment_counter(5)
    service.increment_counter(3)
    current = service.get_counter()
    print(f"   –°—á–µ—Ç—á–∏–∫: {current}")
    
    # –ü—Ä–∏–º–µ—Ä 6: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
    print("\n6. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞:")
    async_result = await service.async_operation([1, 2, 3, 4, 5])
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {async_result}")


def show_logging_config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\n=== –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    config = get_logging_config()
    
    print(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.log_level}")
    print(f"–§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤: {config.log_format}")
    print(f"–§–∞–π–ª –ª–æ–≥–æ–≤: {config.log_file or 'stdout'}")
    print(f"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {config.enabled_modules}")
    print(f"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {config.disabled_modules}")
    print(f"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {config.enabled_functions}")
    print(f"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {config.disabled_functions}")


def show_environment_variables():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\n=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===")
    print("LOG_ENABLED_MODULES=order_service,ai_service,command_service")
    print("LOG_DISABLED_MODULES=test_,debug_")
    print("LOG_ENABLED_FUNCTIONS=order_service.create_order,order_service.confirm_order")
    print("LOG_DISABLED_FUNCTIONS=order_service.get_order_status")
    print("LOG_LEVEL=INFO")
    print("LOG_FILE=app.log")
    print("LOG_FORMAT=json")
    print("ENVIRONMENT=development")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging_examples()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_logging_config()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    await run_examples()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    show_environment_variables()
    
    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìù –õ–æ–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    os.environ["LOG_FORMAT"] = "text"  # –î–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    os.environ["LOG_LEVEL"] = "INFO"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main()) 