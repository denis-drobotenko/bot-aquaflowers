#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
"""

import asyncio
import os
import sys
import google.generativeai as genai
from google.generativeai import GenerationConfig
from google.generativeai.types import HarmCategory, HarmBlockThreshold

async def test_progressive_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI...")
    genai.configure(api_key=api_key)
    
    model = genai.GenerativeModel(
        model_name="gemini-2.5-flash",
        generation_config=GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            top_k=40,
            max_output_tokens=8192
        ),
        safety_settings={
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_prompts = [
        {
            "name": "–ë–∞–∑–æ–≤—ã–π JSON",
            "prompt": """Respond in JSON format:
{
  "text": "Hello in Russian",
  "text_en": "Hello in English", 
  "text_thai": "Hello in Thai",
  "command": null
}

User: "–ü—Ä–∏–≤–µ—Ç"
Response:"""
        },
        {
            "name": "–° –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤",
            "prompt": """You are a flower shop assistant. Respond in JSON format.

CATALOG:
- Pink peony 15 (4500 baht)
- White roses (3800 baht)
- Red tulips (3200 baht)

{
  "text": "your response in Russian",
  "text_en": "your response in English", 
  "text_thai": "your response in Thai",
  "command": null
}

User: "–ü—Ä–∏–≤–µ—Ç"
Response:"""
        },
        {
            "name": "–° –∫–æ–º–∞–Ω–¥–∞–º–∏",
            "prompt": """You are a flower shop assistant. Respond in JSON format.

AVAILABLE COMMANDS:
- send_catalog: send flower catalog
- save_order_info: save order data

{
  "text": "your response in Russian",
  "text_en": "your response in English", 
  "text_thai": "your response in Thai",
  "command": {"type": "command_name"} or null
}

User: "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç"
Response:"""
        },
        {
            "name": "–° –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞",
            "prompt": """You are a flower shop assistant. Respond in JSON format.

CONVERSATION HISTORY:
[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}]

AVAILABLE COMMANDS:
- send_catalog: send flower catalog
- save_order_info: save order data

{
  "text": "your response in Russian",
  "text_en": "your response in English", 
  "text_thai": "your response in Thai",
  "command": {"type": "command_name"} or null
}

User: "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç"
Response:"""
        }
    ]
    
    for i, test_case in enumerate(test_prompts, 1):
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢ {i}: {test_case['name']}")
        print(f"{'='*60}")
        
        prompt = test_case['prompt']
        print(f"üì§ –ü—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            response = model.generate_content(prompt)
            response_text = response.text.strip()
            
            print(f"üì• –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üì• –û—Ç–≤–µ—Ç (repr): {repr(response_text)}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
            import json
            import re
            try:
                json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
                if json_match:
                    json_str = json_match.group(0)
                    parsed = json.loads(json_str)
                    print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:")
                    print(f"   text: '{parsed.get('text', '')}'")
                    print(f"   command: {parsed.get('command')}")
                else:
                    print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AI...")
    asyncio.run(test_progressive_ai())
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!") 