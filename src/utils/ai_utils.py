import re
import json
from typing import List, Optional, Dict, Any, Tuple
from src.models.message import Message

async def format_conversation_for_ai(messages: List, session_id: str = None, sender_id: str = None) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è AI –≤ —Ñ–æ—Ä–º–∞—Ç —Å —Ä–æ–ª—è–º–∏ –¥–ª—è Gemini.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏ 'role' –∏ 'content'.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã Message, —Ç–∞–∫ –∏ dict.
    –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.
    """
    formatted = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
    if session_id and sender_id:
        try:
            from src.services.order_service import OrderService
            
            order_service = OrderService()
            order_data = await order_service.get_order_data(session_id, sender_id)
            
            if order_data and (order_data.get('items') or order_data.get('delivery_needed') or order_data.get('address')):
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                saved_info = []
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
                if order_data.get('items'):
                    for item in order_data['items']:
                        saved_info.append(f"–í—ã–±—Ä–∞–Ω –±—É–∫–µ—Ç: {item.get('bouquet', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (—Ü–µ–Ω–∞: {item.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')})")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                if order_data.get('delivery_needed'):
                    saved_info.append("–î–æ—Å—Ç–∞–≤–∫–∞: –Ω—É–∂–Ω–∞")
                    if order_data.get('address'):
                        saved_info.append(f"–ê–¥—Ä–µ—Å: {order_data['address']}")
                    if order_data.get('date'):
                        saved_info.append(f"–î–∞—Ç–∞: {order_data['date']}")
                    if order_data.get('time'):
                        saved_info.append(f"–í—Ä–µ–º—è: {order_data['time']}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∫–µ
                if order_data.get('card_needed'):
                    saved_info.append("–û—Ç–∫—Ä—ã—Ç–∫–∞: –Ω—É–∂–Ω–∞")
                    if order_data.get('card_text'):
                        saved_info.append(f"–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏: {order_data['card_text']}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
                if order_data.get('recipient_name'):
                    saved_info.append(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order_data['recipient_name']}")
                if order_data.get('recipient_phone'):
                    saved_info.append(f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {order_data['recipient_phone']}")
                
                if saved_info:
                    saved_content = "[–°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê]\n" + "\n".join(saved_info)
                    formatted.append({
                        'role': 'system',
                        'content': saved_content
                    })
        except Exception as e:
            print(f"[AI_UTILS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for message in messages:
        if isinstance(message, dict):
            role = message.get('role', 'assistant')
            content = message.get('content', '')
            if hasattr(role, 'value'):
                role = role.value
        else:
            role = message.role.value if hasattr(message.role, 'value') else str(message.role)
            content = message.content
        formatted.append({
            'role': role,
            'content': content
        })
    return formatted

def validate_ai_response(response_data: Dict[str, Any]) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if 'text' not in response_data:
        return False, "Missing 'text' field"
    
    # –í–ê–ñ–ù–û: –¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    if not response_data.get('text'):
        return False, "Missing or empty 'text' field - text is always required"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã (–¥–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏)
    if 'text_en' not in response_data:
        response_data['text_en'] = str(response_data.get('text', ''))
    if 'text_thai' not in response_data:
        response_data['text_thai'] = str(response_data.get('text', ''))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    command = response_data.get('command')
    if command is not None:
        if isinstance(command, str):
            return False, f"Command should be object with 'type' field, got string: '{command}'"
        elif isinstance(command, dict):
            if 'type' not in command:
                return False, "Command object missing 'type' field"
            if not isinstance(command['type'], str):
                return False, "Command 'type' should be string"
        else:
            return False, f"Command should be object or null, got: {type(command)}"
    
    return True, ""

def parse_ai_response(response_text: str) -> Tuple[str, str, str, Optional[Dict[str, Any]]]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö –∏ –∫–æ–º–∞–Ω–¥—É.
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è. –í—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ –¥–≤–æ–π–Ω–æ–π —Å–ª—ç—à (\\n).
    Returns:
        Tuple[str, str, str, Optional[Dict]]: (text, text_en, text_thai, command)
    """
    def fix_newlines(s: str) -> str:
        if not s:
            return ''
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ \\n
        s = s.replace('\r\n', '\\n').replace('\r', '\\n')
        s = s.replace('\n', '\\n')
        s = s.replace('\u2028', '\\n').replace('\u2029', '\\n')
        return s
    
    def preprocess_json_string(json_str: str) -> str:
        """
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Å—Ç—Ä–æ–∫—É, —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        """
        import re
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤ –Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        def replace_newlines_in_string(match):
            content = match.group(1)
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ \\n
            content = content.replace('\n', '\\n').replace('\r', '\\r')
            return f'"{content}"'
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ JSON (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        pattern = r'"([^"\\]*(?:\\.[^"\\]*)*)"'
        return re.sub(pattern, replace_newlines_in_string, json_str)
    
    try:
        response_text = response_text.strip()
        json_match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            json_match = re.search(r'(\{.*\})', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(1)
            else:
                fixed = fix_newlines(response_text)
                return fixed, fixed, fixed, None
        
        json_str = json_str.strip()
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON, —ç–∫—Ä–∞–Ω–∏—Ä—É—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        json_str = preprocess_json_string(json_str)
        
        response_data = json.loads(json_str)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        is_valid, error_msg = validate_ai_response(response_data)
        if not is_valid:
            print(f"[AI_VALIDATION] Invalid response: {error_msg}")
            print(f"[AI_VALIDATION] Response data: {response_data}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            text = fix_newlines(response_data.get('text', ''))
            text_en = fix_newlines(response_data.get('text_en', text))
            text_thai = fix_newlines(response_data.get('text_thai', text))
            return text, text_en, text_thai, None
        
        text = fix_newlines(response_data.get('text', ''))
        text_en = fix_newlines(response_data.get('text_en', text))
        text_thai = fix_newlines(response_data.get('text_thai', text))
        command = response_data.get('command')
        
        print(f"[AI_PARSE] Parsed text: '{text}'")
        print(f"[AI_PARSE] Parsed text_en: '{text_en}'")
        print(f"[AI_PARSE] Parsed text_thai: '{text_thai}'")
        print(f"[AI_PARSE] Parsed command: {command}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –µ—Å–ª–∏ text –ø—É—Å—Ç–æ–π (–¥–ª—è –∫–æ–º–∞–Ω–¥)
        return text, text_en, text_thai, command
    except json.JSONDecodeError as e:
        print(f"JSON decode error: {e}")
        print(f"JSON string: {json_str}")
        fixed = fix_newlines(response_text)
        return fixed, fixed, fixed, None
    except Exception as e:
        print(f"Parse error: {e}")
        fixed = fix_newlines(response_text)
        return fixed, fixed, fixed, None

def get_fallback_text(user_lang: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback-–æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞.
    """
    if user_lang == 'en':
        return "How can I help you today? üå∏"
    elif user_lang == 'th':
        return "‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ? üå∏"
    return "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üå∏"

def get_contextual_fallback_text(user_lang: str, context: str = None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π fallback-–æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏.
    """
    if context == "catalog_requested":
        if user_lang == 'en':
            return "Let me show you our flower catalog! üå∏"
        elif user_lang == 'th':
            return "‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üå∏"
        return "–ü–æ–∫–∞–∂—É –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤! üå∏"
    
    elif context == "order_info":
        if user_lang == 'en':
            return "I'll help you with your order! üå∏"
        elif user_lang == 'th':
            return "‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠! üå∏"
        return "–ü–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º! üå∏"
    
    # –û–±—â–∏–π fallback
    return get_fallback_text(user_lang)

def format_catalog_for_ai(products: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI.
    """
    if not products:
        return "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    catalog_text = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –ö–ê–¢–ê–õ–û–ì –¶–í–ï–¢–û–í –ò–ó WABA\n\n"
    for i, product in enumerate(products, 1):
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = product.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        retailer_id = product.get('retailer_id', '')
        catalog_text += f"{i}. {name} (ID: {retailer_id})\n   –¶–µ–Ω–∞: {price}\n"
    
    catalog_text += "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã! –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è!"
    return catalog_text 