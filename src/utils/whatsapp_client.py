"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è WhatsApp Business API
"""

import httpx
import json
from typing import Optional, Dict, Any
from src.config.settings import WHATSAPP_TOKEN, WHATSAPP_PHONE_ID

class WhatsAppClient:
    def __init__(self):
        self.token = WHATSAPP_TOKEN
        self.phone_id = WHATSAPP_PHONE_ID
        self.base_url = f"https://graph.facebook.com/v23.0/{self.phone_id}/messages"

    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

    def _add_flower_emoji(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ —Ü–≤–µ—Ç–∫–∞ –∫ —Ç–µ–∫—Å—Ç—É"""
        text = text.rstrip()
        if not text:
            return 'üå∏'
        if not text.endswith('üå∏'):
            return text + ' üå∏'
        return text

    def _fix_newlines_for_whatsapp(self, text: str) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç \\n –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è WhatsApp API
        """
        if not text:
            return text
        # –ó–∞–º–µ–Ω—è–µ–º \\n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        return text.replace('\\n', '\n')

    async def send_text_message(self, to_number: str, text: str, session_id: str = None) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Returns:
            str: message_id (wamid) –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è WhatsApp
        fixed_text = self._fix_newlines_for_whatsapp(text)
        print(f"[WHATSAPP] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: {fixed_text[:50]}... (session_id={session_id})")
        
        try:
            url = f"https://graph.facebook.com/v23.0/{self.phone_id}/messages"
            headers = self._get_headers()
            payload = {
                "messaging_product": "whatsapp",
                "to": to_number,
                "type": "text",
                "text": {"body": fixed_text}
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, headers=headers, json=payload)
                print(f"[WHATSAPP] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    response_data = response.json()
                    if 'messages' in response_data and len(response_data['messages']) > 0:
                        message_id = response_data['messages'][0]['id']
                        print(f"[WHATSAPP] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {message_id}")
                        return message_id
                    else:
                        print(f"[WHATSAPP] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                        return None
                else:
                    print(f"[WHATSAPP] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            print(f"[WHATSAPP] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return None

    async def send_message(self, to_number: str, text: str, session_id: str = None) -> Optional[str]:
        """–ê–ª–∏–∞—Å –¥–ª—è send_text_message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.send_text_message(to_number, text, session_id)

    async def send_image_with_caption(self, to_number: str, image_url: str, caption: str, session_id: str = None) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            # –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç —ç–º–æ–¥–∑–∏
            import re
            caption = re.sub(r"[\U00010000-\U0010ffff\u2600-\u26FF\u2700-\u27BF]+", '', caption)
            caption = caption.strip()
            if not caption.endswith('üå∏'):
                caption += ' üå∏'
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è WhatsApp
            fixed_caption = self._fix_newlines_for_whatsapp(caption)

            payload = {
                "messaging_product": "whatsapp",
                "to": to_number,
                "type": "image",
                "image": {
                    "link": image_url,
                    "caption": fixed_caption
                }
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.base_url, 
                    headers=self._get_headers(), 
                    json=payload
                )
                response.raise_for_status()
                
                response_data = response.json()
                if 'messages' in response_data and len(response_data['messages']) > 0:
                    message_id = response_data['messages'][0]['id']
                    print(f"Image sent successfully to {to_number}, ID: {message_id} (session_id={session_id})")
                    return message_id
                
                return None

        except Exception as e:
            print(f"Error sending image to {to_number}: {e}")
            return None

    async def send_typing_indicator(self, message_id: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.
        
        –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WhatsApp Business API, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        –≤–º–µ—Å—Ç–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 25 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            url = f"https://graph.facebook.com/v23.0/{self.phone_id}/messages"
            headers = self._get_headers()
            payload = {
                "messaging_product": "whatsapp",
                "status": "read",
                "message_id": message_id,
                "typing_indicator": {
                    "type": "text"
                }
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, headers=headers, json=payload)
                # print(f"[WHATSAPP_TYPING] –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    # print(f"[WHATSAPP_TYPING] –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                    return True
                else:
                    # print(f"[WHATSAPP_TYPING] –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            # print(f"[WHATSAPP_TYPING] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False

    async def mark_message_as_read(self, message_id: str) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ (—Å–∏–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏).
        
        Args:
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            url = f"https://graph.facebook.com/v23.0/{self.phone_id}/messages"
            headers = self._get_headers()
            payload = {
                "messaging_product": "whatsapp",
                "status": "read",
                "message_id": message_id
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, headers=headers, json=payload)
                # print(f"[WHATSAPP_READ] –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    # print(f"[WHATSAPP_READ] –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                    return True
                else:
                    # print(f"[WHATSAPP_READ] –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            # print(f"[WHATSAPP_READ] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False 