"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WhatsApp Business API
"""

import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional

class WABALogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WABA"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('waba_tracker')
        self.logger.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º console handler –¥–ª—è Cloud Run (–ª–æ–≥–∏ –∏–¥—É—Ç –≤ stdout)
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s | %(message)s', datefmt='%H:%M:%S')
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º handler –∫ –ª–æ–≥–≥–µ—Ä—É
        self.logger.addHandler(console_handler)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º propagation —á—Ç–æ–±—ã –ª–æ–≥–∏ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å
        self.logger.propagate = False
    
    def log_webhook_received(self, body: Dict[str, Any]) -> Optional[str]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ webhook –æ—Ç WABA
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç wamid –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            value = body.get('entry', [{}])[0].get('changes', [{}])[0].get('value', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            if 'statuses' in value:
                for status in value['statuses']:
                    wamid = status.get('id')
                    status_type = status.get('status')
                    recipient_id = status.get('recipient_id')
                    
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - wamid
                    self.logger.info(f"üì® STATUS | wamid:{wamid}")
                    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    self.logger.info(f"   status:{status_type} | recipient:{recipient_id}")
                    return wamid
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'messages' in value:
                for message in value['messages']:
                    wamid = message.get('id')
                    message_type = message.get('type')
                    sender_id = message.get('from')
                    timestamp = message.get('timestamp')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = ""
                    if message_type == 'text':
                        message_text = message.get('text', {}).get('body', '')[:50]  # –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
                    elif message_type == 'interactive':
                        interactive = message.get('interactive', {})
                        if 'button_reply' in interactive:
                            message_text = f"button:{interactive['button_reply'].get('title', '')}"
                        elif 'list_reply' in interactive:
                            message_text = f"list:{interactive['list_reply'].get('title', '')}"
                    else:
                        message_text = f"[{message_type.upper()}]"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º reply
                    reply_to = ""
                    if message.get('context'):
                        reply_to = f" | reply_to:{message['context'].get('id', '')}"
                    
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - wamid
                    self.logger.info(f"üì® MESSAGE | wamid:{wamid}")
                    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    self.logger.info(f"   type:{message_type} | from:{sender_id} | text:{message_text}{reply_to}")
                    return wamid
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            self.logger.info(f"üì® UNKNOWN | body_type:{list(value.keys())}")
            return None
            
        except Exception as e:
            self.logger.error(f"üì® ERROR | Failed to parse webhook: {e}")
            return None
    
    def log_webhook_validation(self, wamid: str, validation_result: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook"""
        if validation_result.get('valid'):
            self.logger.info(f"‚úÖ VALID | type:{validation_result.get('type')} | message_type:{validation_result.get('message_type', '')}")
        else:
            self.logger.info(f"‚ùå INVALID | error:{validation_result.get('error')}")
    
    def log_typing_indicator(self, wamid: str, success: bool):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        status = "‚úÖ" if success else "‚ùå"
        self.logger.info(f"{status} TYPING")
    
    def log_status_sent(self, wamid: str, sender_id: str, status_type: str = "status"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ/–ø–µ—á–∞—Ç–∞–µ—Ç)"""
        self.logger.info(f"üìã STATUS | type:{status_type} | sender:{sender_id}")
    
    def log_ai_processing(self, wamid: str, sender_id: str, message_text: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI"""
        self.logger.info(f"ü§ñ AI_START | sender:{sender_id} | text:{message_text[:50]}")
    
    def log_ai_response(self, wamid: str, ai_text: str, ai_command: Optional[Dict] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI"""
        command_info = ""
        if ai_command:
            command_info = f" | command:{ai_command.get('type', '')}"
        
        self.logger.info(f"ü§ñ AI_RESPONSE | response:{ai_text[:50]}{command_info}")
    
    def log_message_sent(self, wamid: str, to_number: str, content: str, response_wamid: Optional[str] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        response_info = f" | response_wamid:{response_wamid}" if response_wamid else ""
        self.logger.info(f"üì§ SENT | to:{to_number} | content:{content[:50]}{response_info}")
    
    def log_message_save(self, wamid: str, sender_id: str, session_id: str, role: str, content: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
        self.logger.info(f"üíæ SAVED | sender:{sender_id} | session:{session_id} | role:{role} | content:{content[:50]}")
    
    def log_command_handled(self, wamid: str, command_type: str, result: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã"""
        self.logger.info(f"‚öôÔ∏è COMMAND | type:{command_type} | result:{result.get('action', '')}")
    
    def log_error(self, wamid: str, error: str, context: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
        context_info = f" | context:{context}" if context else ""
        self.logger.error(f"üí• ERROR | error:{error}{context_info}")
    
    def log_separator(self, wamid: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info(f"{'='*80}")
        self.logger.info(f"üîÑ NEW MESSAGE FLOW | wamid:{wamid}")
        self.logger.info(f"{'='*80}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
waba_logger = WABALogger() 