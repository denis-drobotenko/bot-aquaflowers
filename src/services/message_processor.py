import asyncio
import logging
from typing import List, Optional, Tuple, Dict, Any
from dataclasses import dataclass
from datetime import datetime

from src.utils.whatsapp_client import WhatsAppClient
from src.services.message_service import MessageService
from src.models.message import Message, MessageRole
from src.utils.logging_decorator import log_function
from src.services.ai_service import AIService
from src.services.session_service import SessionService
from src.services.user_service import UserService
from src.services.command_service import CommandService
from src.utils.waba_logger import waba_logger
from src.models.user import User, UserStatus
from src.config.settings import GEMINI_API_KEY

@dataclass
class AIResponse:
    """–û—Ç–≤–µ—Ç –æ—Ç AI —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π"""
    text: str
    text_en: str
    text_thai: str
    command: Optional[Dict[str, Any]]

class MessageProcessor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.whatsapp_client = WhatsAppClient()
        self.message_service = MessageService()
        self.session_service = SessionService()
        self.user_service = UserService()
        self.ai_service = AIService(GEMINI_API_KEY)
        self.command_service = CommandService()

    @log_function("message_processor")
    async def process_user_message(self, message_data: Dict[str, Any]) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü—Ä–æ—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å—Ç–∞—Ç—É—Å—ã ‚Üí —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚Üí AI ‚Üí –∫–æ–º–∞–Ω–¥–∞ ‚Üí –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        """
        try:
            sender_id = message_data['sender_id']
            message_text = message_data['message_text']
            sender_name = message_data.get('sender_name')
            wamid = message_data.get('wa_message_id')
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"\n[INCOMING] üë§ {sender_name}: {message_text}")
            if wamid:
                waba_logger.log_ai_processing(wamid, sender_id, message_text)
            
            # 0. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ + –ø–µ—á–∞—Ç–∞–µ—Ç)
            if wamid:
                await self._send_status_updates(wamid, sender_id)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id = await self.session_service.get_or_create_session_id(sender_id)
            await self._ensure_user_exists(sender_id, sender_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            customer_data = {}
            if sender_name:
                customer_data['customer_name'] = sender_name  # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∏–∑ WABA
            if 'sender_phone' in message_data:
                customer_data['customer_phone'] = message_data['sender_phone']  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ WABA
            elif sender_id:  # –ï—Å–ª–∏ –Ω–µ—Ç sender_phone, –∏—Å–ø–æ–ª—å–∑—É–µ–º sender_id –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω
                customer_data['customer_phone'] = sender_id
            
            if customer_data:
                from src.services.order_service import OrderService
                order_service = OrderService()
                await order_service.update_order_data(session_id, sender_id, customer_data)
            
            # 2. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if message_text.strip().lower() == '/newses':
                return await self._handle_newses_command(sender_id, session_id)
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = self._create_user_message(message_data, session_id)
            success, _ = self.message_service.add_message_with_transaction_sync(user_message, limit=10)
            if not success:
                return False
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
            conversation_history = await self.message_service.get_conversation_history_for_ai_by_sender(
                sender_id, session_id, limit=50
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è AI
            print(f"[HISTORY] –ü–æ–ª—É—á–µ–Ω–æ {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
            ai_response = await self._process_ai(message_data, session_id, conversation_history)
            
            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥)
            success = await self._send_ai_response(ai_response, sender_id, session_id, wamid)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if success:
                print(f"[SUCCESS] ‚úÖ")
            else:
                print(f"[ERROR] ‚ùå")
            
            return success
            
        except Exception as e:
            wamid = message_data.get("wa_message_id")
            waba_logger.log_error(wamid or "unknown", str(e), "process_user_message")
            logging.error(f"[MESSAGE_PROCESSOR] Error: {e}")
            return False

    async def _ensure_user_exists(self, sender_id: str, sender_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        user = await self.user_service.get_user(sender_id)
        if not user:
            user = User(
                sender_id=sender_id,
                name=sender_name or "Unknown",
                language="auto",  # –Ø–∑—ã–∫ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏–∏
                status=UserStatus.ACTIVE
            )
            await self.user_service.create_user(user)

    def _create_user_message(self, message_data: dict, session_id: str) -> Message:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        user_lang = self.session_service.get_user_language_sync(message_data['sender_id'], session_id)
        if user_lang == 'auto' or not user_lang:
            user_lang = self.ai_service.detect_language(message_data['message_text'])
            self.session_service.save_user_language_sync(message_data['sender_id'], session_id, user_lang)
        
        text, text_en, text_thai = self.ai_service.translate_user_message(message_data['message_text'], user_lang)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message_data.get('sender_name'):
            self.session_service.save_user_info_sync(message_data['sender_id'], message_data['sender_name'])
        
        return Message(
            sender_id=message_data['sender_id'],
            session_id=session_id,
            role=MessageRole.USER,
            content=text,
            content_en=text_en,
            content_thai=text_thai,
            wa_message_id=message_data.get('wa_message_id'),
            timestamp=datetime.now()
        )

    def _create_ai_message(self, ai_response: AIResponse, sender_id: str, session_id: str) -> Message:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AI"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
        content = ai_response.text if ai_response.text and ai_response.text.strip() else "[COMMAND]"
        content_en = ai_response.text_en if ai_response.text_en and ai_response.text_en.strip() else "[COMMAND]"
        content_thai = ai_response.text_thai if ai_response.text_thai and ai_response.text_thai.strip() else "[COMMAND]"
        
        return Message(
            sender_id=sender_id,
            session_id=session_id,
            role=MessageRole.ASSISTANT,
            content=content,
            content_en=content_en,
            content_thai=content_thai,
            wa_message_id=None,
            timestamp=datetime.now()
        )

    async def _process_ai(self, message_data: Dict[str, Any], session_id: str, conversation_history: List[Dict]) -> AIResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–±—ä–µ–∫—Ç—ã Message
            ai_messages = []
            for msg_dict in conversation_history:
                message = Message(
                    sender_id=message_data['sender_id'],
                    session_id=session_id,
                    role=MessageRole.USER if msg_dict.get('role') == 'user' else MessageRole.ASSISTANT,
                    content=msg_dict.get('content', ''),
                    content_en=msg_dict.get('content_en'),
                    content_thai=msg_dict.get('content_thai')
                )
                ai_messages.append(message)
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_lang = await self.session_service.get_user_language(message_data['sender_id'], session_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫
            if user_lang == 'auto' or not user_lang:
                detected_lang = self.ai_service.detect_language(message_data['message_text'])
                if detected_lang != 'auto':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
                    await self.session_service.save_user_language(message_data['sender_id'], session_id, detected_lang)
                    user_lang = detected_lang
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
                    confirmation_text = self.ai_service.ask_language_confirmation(message_data['message_text'], detected_lang)
                    return AIResponse(
                        text=confirmation_text,
                        text_en=confirmation_text,
                        text_thai=confirmation_text,
                        command=None
                    )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
            is_first_message = len(conversation_history) <= 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
            ai_text, ai_text_en, ai_text_thai, ai_command = await self.ai_service.generate_response(
                ai_messages,
                user_lang=user_lang,
                sender_name=message_data.get('sender_name'),
                is_first_message=is_first_message
            )
            
            return AIResponse(ai_text, ai_text_en, ai_text_thai, ai_command)
            
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] AI processing error: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            try:
                user_lang = await self.session_service.get_user_language(message_data['sender_id'], session_id)
            except:
                user_lang = 'auto'
            
            error_messages = self._get_error_messages(user_lang)
            return AIResponse(
                error_messages['ru'],
                error_messages['en'],
                error_messages['th'],
                None
            )

    async def _handle_ai_command(self, command: Dict[str, Any], session_id: str, sender_id: str, wamid: str = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            command_result = await self.command_service.handle_command(command, session_id, sender_id)
            if wamid:
                waba_logger.log_command_handled(wamid, command.get('type', ''), command_result)
            return command_result
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] Command handling error: {e}")
            return {"status": "error", "message": str(e)}

    async def _send_ai_response(self, ai_response: AIResponse, sender_id: str, session_id: str, wamid: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if ai_response.text and ai_response.text.strip():
                success = await self._send_text_message(
                    sender_id, 
                    ai_response.text, 
                    session_id, 
                    ai_response.text_en, 
                    ai_response.text_thai
                )
                if wamid:
                    waba_logger.log_message_sent(wamid, sender_id, ai_response.text)
                
                if not success:
                    return False
            
            # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë
            if ai_response.command:
                command_result = await self._handle_ai_command(ai_response.command, session_id, sender_id, wamid)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã
                if wamid:
                    waba_logger.log_command_handled(wamid, ai_response.command.get('type', ''), command_result)
                
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                if command_result.get('status') != 'success':
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                    user_lang = await self.session_service.get_user_language(sender_id, session_id)
                    error_messages = self._get_error_messages(user_lang)
                    error_message = command_result.get('message', error_messages['ru'])
                    error_success = await self._send_text_message(
                        sender_id, 
                        error_message, 
                        session_id
                    )
                    if wamid:
                        waba_logger.log_message_sent(wamid, sender_id, error_message)
                    return error_success
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                if command_result.get('action') == 'order_confirmed':
                    # –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                    print(f"[MESSAGE_PROCESSOR] –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é: {session_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                    user_lang = await self.session_service.get_user_language(sender_id, session_id)
                    completion_messages = self._get_completion_messages(user_lang)
                    await self._send_text_message(sender_id, completion_messages['ru'], session_id, completion_messages['en'], completion_messages['th'])
            
            return True
            
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] Send response error: {e}")
            return False

    def _get_error_messages(self, user_lang: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        if user_lang == 'en':
            return {
                'ru': 'Sorry, an error occurred. Please try again. üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            }
        elif user_lang == 'th':
            return {
                'ru': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            }
        else:  # ru –∏–ª–∏ auto
            return {
                'ru': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            }

    def _get_completion_messages(self, user_lang: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        if user_lang == 'en':
            return {
                'ru': '‚úÖ Your order has been sent! Wait for a call from the operator. üå∏',
                'en': '‚úÖ Your order has been sent! Wait for a call from the operator. üå∏',
                'th': '‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô üå∏'
            }
        elif user_lang == 'th':
            return {
                'ru': '‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô üå∏',
                'en': '‚úÖ Your order has been sent! Wait for a call from the operator. üå∏',
                'th': '‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô üå∏'
            }
        else:  # ru –∏–ª–∏ auto
            return {
                'ru': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. üå∏',
                'en': '‚úÖ Your order has been sent! Wait for a call from the operator. üå∏',
                'th': '‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô üå∏'
            }

    def _get_newses_messages(self, user_lang: str, session_id: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        if user_lang == 'en':
            return {
                'ru': f'‚úÖ New session created! ID: {session_id}\n\nYou can now start a new dialogue. üå∏',
                'en': f'‚úÖ New session created! ID: {session_id}\n\nYou can now start a new dialogue. üå∏',
                'th': f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! ID: {session_id}\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ üå∏'
            }
        elif user_lang == 'th':
            return {
                'ru': f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! ID: {session_id}\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ üå∏',
                'en': f'‚úÖ New session created! ID: {session_id}\n\nYou can now start a new dialogue. üå∏',
                'th': f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! ID: {session_id}\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ üå∏'
            }
        else:  # ru –∏–ª–∏ auto
            return {
                'ru': f'‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! ID: {session_id}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. üå∏',
                'en': f'‚úÖ New session created! ID: {session_id}\n\nYou can now start a new dialogue. üå∏',
                'th': f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! ID: {session_id}\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ üå∏'
            }

    async def _send_text_message(self, to_number: str, content: str, session_id: str, content_en: str = None, content_thai: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_lang = await self.session_service.get_user_language(to_number, session_id)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            print(f"[SEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_number}: {content[:100]}... (lang={user_lang})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WhatsApp (—ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            message_id = await self.whatsapp_client.send_text_message(to_number, content, session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if message_id and session_id:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                from src.utils.multilingual_emoji import format_message_with_emoji
                content_with_emoji = format_message_with_emoji(content, user_lang)
                
                message = Message(
                    sender_id=to_number,
                    session_id=session_id,
                    role=MessageRole.ASSISTANT,
                    content=content_with_emoji,
                    content_en=content_en,
                    content_thai=content_thai,
                    wa_message_id=message_id,
                    timestamp=datetime.now()
                )
                await self.message_service.add_message_to_conversation(message)
            
            if message_id:
                print(f"[SEND] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, ID: {message_id}")
            else:
                print(f"[SEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            return message_id is not None
            
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] Send text error: {e}")
            return False

    async def _handle_newses_command(self, sender_id: str, session_id: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            new_session_id = await self.session_service.create_new_session_after_order(sender_id)
            user_lang = await self.session_service.get_user_language(sender_id, session_id)
            confirmation_messages = self._get_newses_messages(user_lang, new_session_id)
            return await self._send_text_message(sender_id, confirmation_messages['ru'], session_id, confirmation_messages['en'], confirmation_messages['th'])
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] Newses command error: {e}")
            return False

    async def _send_status_updates(self, wamid: str, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ + –ø–µ—á–∞—Ç–∞–µ—Ç)"""
        try:
            # 1. –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            read_success = await self.whatsapp_client.mark_message_as_read(wamid)
            if read_success:
                # print(f"[STATUS] –°–æ–æ–±—â–µ–Ω–∏–µ {wamid} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                if wamid:
                    waba_logger.log_status_sent(wamid, sender_id, "read")
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            typing_success = await self.whatsapp_client.send_typing_indicator(wamid)
            if typing_success:
                # print(f"[STATUS] –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {wamid}")
                if wamid:
                    waba_logger.log_status_sent(wamid, sender_id, "typing")
            
            return True
            
        except Exception as e:
            logging.error(f"[MESSAGE_PROCESSOR] Send status updates error: {e}")
            return False 