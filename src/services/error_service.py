import traceback
import sys
from typing import Optional, Dict, Any
from datetime import datetime
from src.repositories.error_repository import ErrorRepository
from src.models.error import Error, ErrorSeverity, ErrorStatus


class ErrorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏"""
    
    def __init__(self):
        self.error_repository = ErrorRepository()
    
    async def log_error(
        self,
        error: Exception,
        sender_id: Optional[str] = None,
        session_id: Optional[str] = None,
        user_message: Optional[str] = None,
        ai_response: Optional[str] = None,
        context_data: Optional[Dict[str, Any]] = None,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        module: str = "",
        function: str = ""
    ) -> str:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –ë–î
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            sender_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_response: –û—Ç–≤–µ—Ç AI
            context_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            severity: –í–∞–∂–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            module: –ú–æ–¥—É–ª—å –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            function: –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            
        Returns:
            ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error_type = type(error).__name__
            error_message = str(error)
            stack_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            line_number = None
            if error.__traceback__:
                tb = error.__traceback__
                while tb.tb_next:
                    tb = tb.tb_next
                line_number = tb.tb_lineno
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
            error_obj = Error(
                timestamp=datetime.now(),
                severity=severity,
                status=ErrorStatus.NEW,
                sender_id=sender_id,
                session_id=session_id,
                error_type=error_type,
                error_message=error_message,
                error_details=error_message,
                stack_trace=stack_trace,
                module=module,
                function=function,
                line_number=line_number,
                context_data=context_data or {},
                user_message=user_message,
                ai_response=ai_response
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            error_id = await self.error_repository.save_error(error_obj)
            print(f"[ERROR_SERVICE] Logged error {error_id}: {error_type} - {error_message}")
            
            return error_id
            
        except Exception as e:
            print(f"[ERROR_SERVICE] Failed to log error: {e}")
            return ""
    
    async def get_error(self, error_id: str) -> Optional[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É –ø–æ ID"""
        return await self.error_repository.get_error(error_id)
    
    async def get_errors_by_user(self, sender_id: str, limit: int = 50) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.error_repository.get_errors_by_user(sender_id, limit)
    
    async def get_errors_by_session(self, session_id: str) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Å—Å–∏–∏"""
        return await self.error_repository.get_errors_by_session(session_id)
    
    async def get_recent_errors(self, hours: int = 24, limit: int = 100) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        return await self.error_repository.get_recent_errors(hours, limit)
    
    async def get_errors_by_status(self, status: ErrorStatus, limit: int = 100) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        return await self.error_repository.get_errors_by_status(status, limit)
    
    async def get_errors_by_severity(self, severity: ErrorSeverity, limit: int = 100) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        return await self.error_repository.get_errors_by_severity(severity, limit)
    
    async def get_all_errors(self, limit: int = 200) -> list[Error]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏"""
        return await self.error_repository.get_all_errors(limit)
    
    async def update_error_status(
        self, 
        error_id: str, 
        status: ErrorStatus, 
        resolved_by: Optional[str] = None, 
        notes: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏"""
        return await self.error_repository.update_error_status(error_id, status, resolved_by, notes)
    
    async def delete_error(self, error_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –æ—à–∏–±–∫—É"""
        return await self.error_repository.delete_error(error_id)
    
    async def get_error_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        return await self.error_repository.get_error_stats()
    
    def get_error_messages(self, user_lang: str = 'ru') -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        if user_lang == 'en':
            return {
                'ru': 'Sorry, an error occurred. Please try again. üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            }
        elif user_lang == 'th':
            return {
                'ru': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            }
        else:
            return {
                'ru': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏',
                'en': 'Sorry, an error occurred. Please try again. üå∏',
                'th': '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üå∏'
            } 