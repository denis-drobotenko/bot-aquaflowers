"""
AuraFlora WhatsApp Bot - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
============================================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WhatsApp.
–ß–∏—Ç–∞—è —ç—Ç–æ—Ç —Ñ–∞–π–ª, –≤—ã –ø–æ–π–º–µ—Ç–µ –ø–æ–ª–Ω—ã–π flow –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:

1. –ü–æ–ª—É—á–µ–Ω–∏–µ webhook –æ—Ç WhatsApp
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI (Gemini)
6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
7. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ WhatsApp

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- SessionService: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- MessageService: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- AIService: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Google Gemini
- CatalogService: —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ WhatsApp
- WhatsAppClient: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ WhatsApp
"""

import logging
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, Response, Query
from fastapi.responses import PlainTextResponse, JSONResponse
from dotenv import load_dotenv
from datetime import datetime
from typing import Dict, Any, Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from src.utils.logging_utils import setup_logging
setup_logging()

logger = logging.getLogger(__name__)

# ============================================================================
# –ò–ú–ü–û–†–¢ –°–ï–†–í–ò–°–û–í –ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ============================================================================

from src.services.session_service import SessionService
from src.services.message_service import MessageService
from src.services.ai_service import AIService
from src.services.catalog_service import CatalogService
from src.services.command_service import CommandService
from src.utils.whatsapp_client import WhatsAppClient
from src.models.message import Message, MessageRole
from src.utils.logging_utils import ContextLogger
from src.config import VERIFY_TOKEN, GEMINI_API_KEY, WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
session_service = SessionService()
message_service = MessageService()
ai_service = AIService(GEMINI_API_KEY)
catalog_service = CatalogService(WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN)
command_service = CommandService()
whatsapp_client = WhatsAppClient()
webhook_logger = ContextLogger("webhook_flow")

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó WEBHOOK
# ============================================================================

def extract_sender_id(body: dict) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ webhook WhatsApp.
    
    WhatsApp –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
        "entry": [{
            "changes": [{
                "value": {
                    "contacts": [{"wa_id": "1234567890"}],
                    "messages": [...]
                }
            }]
        }]
    }
    """
    try:
        return body['entry'][0]['changes'][0]['value']['contacts'][0]['wa_id']
    except (KeyError, IndexError):
        webhook_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å sender_id –∏–∑ webhook")
        return None

def extract_sender_name(body: dict) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ webhook WhatsApp.
    
    –ò–º—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
        "entry": [{
            "changes": [{
                "value": {
                    "contacts": [{
                        "profile": {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"}
                    }]
                }
            }]
        }]
    }
    """
    try:
        profile = body['entry'][0]['changes'][0]['value']['contacts'][0]['profile']
        full_name = profile.get('name', '')
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–º—è (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞)
        if full_name:
            first_name = full_name.split()[0]
            webhook_logger.info(f"[SENDER_NAME] –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è: {first_name}")
            return first_name
        return None
    except (KeyError, IndexError):
        webhook_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ webhook")
        return None

def extract_message_text(body: dict) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ webhook.
    
    –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
        "messages": [{
            "text": {"body": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"}
        }]
    }
    """
    try:
        return body['entry'][0]['changes'][0]['value']['messages'][0]['text']['body']
    except (KeyError, IndexError):
        return None

def extract_interactive_message(body: dict) -> Optional[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∏, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤).
    
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
        "messages": [{
            "interactive": {
                "type": "button" | "catalog_message",
                "button_reply": {"id": "button_id"},
                "catalog_message": {...}
            }
        }]
    }
    """
    try:
        message = body['entry'][0]['changes'][0]['value']['messages'][0]
        if 'interactive' in message:
            return message['interactive']
        return None
    except (KeyError, IndexError):
        return None

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================

async def process_text_message(sender_id: str, message_text: str, sender_name: str = None) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Flow –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/newses)
    3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É
    8. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–∫–∞—Ç–∞–ª–æ–≥, –∑–∞–∫–∞–∑—ã)
    9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ WhatsApp
    
    Args:
        sender_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sender_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –û—Ç–≤–µ—Ç AI –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    webhook_logger.info(f"[TEXT_MESSAGE] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {sender_id} (–∏–º—è: {sender_name})")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_id = await session_service.get_or_create_session_id(sender_id)
    webhook_logger.info(f"[SESSION] –°–µ—Å—Å–∏—è: {session_id}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message_text.strip().lower() == '/newses':
        webhook_logger.info(f"[NEWSES] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newses –¥–ª—è {sender_id}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        new_session_id = await session_service.create_new_session_after_order(sender_id)
        webhook_logger.info(f"[NEWSES] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {new_session_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î)
        confirmation_message = f"‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! ID: {new_session_id}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. üå∏"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
        user_message = Message(
            sender_id=sender_id,
            session_id=session_id,
            role=MessageRole.USER,
            content=message_text
        )
        await message_service.add_message_to_conversation(user_message)
        webhook_logger.info(f"[NEWSES] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é")
        
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ë–î - —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        webhook_logger.info(f"[NEWSES] –û—Ç–≤–µ—Ç AI –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î, —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        return confirmation_message
    
    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_lang = ai_service.detect_language(message_text)
    webhook_logger.info(f"[LANGUAGE] –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {user_lang}")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
    text, text_en, text_thai = ai_service.translate_user_message(message_text, user_lang)
    webhook_logger.info(f"[TRANSLATE] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é users –µ—Å–ª–∏ –µ—Å—Ç—å
    if sender_name:
        await session_service.save_user_info(sender_id, sender_name)
        webhook_logger.info(f"[USER_INFO] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {sender_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    user_message = Message(
        sender_id=sender_id,
        session_id=session_id,
        role=MessageRole.USER,
        content=text,
        content_en=text_en,
        content_thai=text_thai
    )
    await message_service.add_message_to_conversation(user_message)
    webhook_logger.info(f"[DB] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    conversation_history = await message_service.get_conversation_history_for_ai_by_sender(sender_id, session_id, limit=10)
    webhook_logger.info(f"[HISTORY] –ü–æ–ª—É—á–µ–Ω–æ {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã Message –¥–ª—è AI
    ai_messages = []
    for msg_dict in conversation_history:
        message = Message(
            sender_id=sender_id,
            session_id=session_id,
            role=MessageRole.USER if msg_dict.get('role') == 'user' else MessageRole.ASSISTANT,
            content=msg_dict.get('content', ''),
            content_en=msg_dict.get('content_en'),
            content_thai=msg_dict.get('content_thai')
        )
        ai_messages.append(message)
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI (Google Gemini) —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    ai_response_text = await ai_service.generate_response(
        ai_messages,  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Message
        user_lang=user_lang,
        sender_name=sender_name  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    webhook_logger.info(f"[AI] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(ai_response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 6. –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    ai_text, ai_text_en, ai_text_thai, ai_command = ai_service.parse_ai_response(ai_response_text)
    
    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    ai_message = Message(
        sender_id=sender_id,
        session_id=session_id,
        role=MessageRole.ASSISTANT,
        content=ai_text,
        content_en=ai_text_en,
        content_thai=ai_text_thai
    )
    await message_service.add_message_to_conversation(ai_message)
    webhook_logger.info(f"[DB] –û—Ç–≤–µ—Ç AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏")
    
    # 8. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª –∫–æ–º–∞–Ω–¥—É)
    
    if ai_command:
        webhook_logger.info(f"[COMMAND] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {ai_command}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É send_catalog
        if ai_command.get('type') == 'send_catalog':
            webhook_logger.info(f"[CATALOG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}")
            try:
                from src.catalog_sender import handle_send_catalog
                await handle_send_catalog(sender_id, sender_id, session_id)
                webhook_logger.info(f"[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                webhook_logger.error(f"[CATALOG_ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ save_order_info, confirm_order
    
    return ai_text if ai_text else ai_response_text

async def process_interactive_message(sender_id: str, interactive_data: Dict[str, Any]) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏, –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤).
    
    –¢–∏–ø—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    - button: –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    - catalog_message: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    - list_reply: –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    
    Args:
        sender_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp
        interactive_data: –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        str: –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    interactive_type = interactive_data.get('type')
    webhook_logger.info(f"[INTERACTIVE] –û–±—Ä–∞–±–æ—Ç–∫–∞ {interactive_type} –æ—Ç {sender_id}")
    
    if interactive_type == 'button':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        button_id = interactive_data.get('button_reply', {}).get('id')
        webhook_logger.info(f"[BUTTON] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {button_id}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if button_id == 'catalog':
            return "–í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤! üå∏"
        elif button_id == 'help':
            return "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏"
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! üå∏"
    
    elif interactive_type == 'catalog_message':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_data = interactive_data.get('catalog_message', {})
        retailer_id = catalog_data.get('retailer_id')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º retailer_id
        webhook_logger.info(f"[CATALOG] –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {retailer_id}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        validation = await catalog_service.validate_product(retailer_id)
        if validation['valid']:
            product = validation['product']
            return f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! {product.get('name')} - {product.get('price')} üå∏"
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üå∏"
    
    else:
        webhook_logger.warning(f"[INTERACTIVE] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {interactive_type}")
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ! üå∏"

async def handle_webhook_message(sender_id: str, body: dict) -> str:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        sender_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp
        body: –¢–µ–ª–æ webhook –æ—Ç WhatsApp
        
    Returns:
        str: –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    webhook_logger.info(f"[WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {sender_id}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sender_name = extract_sender_name(body)
    if sender_name:
        webhook_logger.info(f"[WEBHOOK] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sender_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = extract_message_text(body)
    interactive_message = extract_interactive_message(body)
    
    if message_text:
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await process_text_message(sender_id, message_text, sender_name)
    
    elif interactive_message:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await process_interactive_message(sender_id, interactive_message)
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        webhook_logger.warning(f"[WEBHOOK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {sender_id}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è üå∏"

# ============================================================================
# FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ============================================================================

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ AuraFlora Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    logger.info("üõë AuraFlora Bot –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="AuraFlora WhatsApp Bot",
    description="AI-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤",
    version="1.0.0",
    lifespan=lifespan
)

# CORS —Ç–æ–ª—å–∫–æ –¥–ª—è DEV_MODE
if os.getenv('DEV_MODE', 'false').lower() == 'true':
    from fastapi.middleware.cors import CORSMiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# ============================================================================
# WEBHOOK ENDPOINTS
# ============================================================================

@app.get("/webhook")
async def verify_webhook(request: Request):
    """
    –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç Meta/WhatsApp.
    
    WhatsApp —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    - hub.mode: "subscribe"
    - hub.verify_token: –Ω–∞—à —Ç–æ–∫–µ–Ω
    - hub.challenge: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    """
    mode = request.query_params.get("hub.mode")
    token = request.query_params.get("hub.verify_token")
    challenge = request.query_params.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        webhook_logger.info("[VERIFY] Webhook —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        return PlainTextResponse(content=challenge, status_code=200)
    else:
        webhook_logger.error("[VERIFY] –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook")
        return Response(content="Failed to verify webhook", status_code=403)

@app.post("/webhook")
async def webhook_handler(request: Request):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç WhatsApp.
    
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.
    
    Flow:
    1. –ü–æ–ª—É—á–∞–µ–º webhook –æ—Ç WhatsApp
    2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (sender_id, —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)
    3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ handle_webhook_message
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ WhatsApp
    5. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ webhook
        body = await request.json()
        webhook_logger.info("[WEBHOOK_START] ==================== WEBHOOK RECEIVED ====================")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ webhook –æ—Ç WhatsApp Business API
        if not body.get("object") == "whatsapp_business_account":
            webhook_logger.info("[WEBHOOK_INVALID] Invalid WhatsApp message, ignoring")
            return JSONResponse({"status": "ignored"})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_id = extract_sender_id(body)
        if not sender_id:
            webhook_logger.warning("[WEBHOOK] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å sender_id")
            return JSONResponse({"status": "no_sender"})
        
        webhook_logger.info(f"[WEBHOOK_CALLER] webhook_handlers.py:webhook_handler:198")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response_text = await handle_webhook_message(sender_id, body)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ WhatsApp
        message_id = await whatsapp_client.send_text_message(sender_id, response_text)
        
        if message_id:
            webhook_logger.info(f"[WHATSAPP] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id: {message_id}")
        else:
            webhook_logger.error(f"[WHATSAPP] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        
        webhook_logger.info(f"[WEBHOOK_END] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {sender_id}")
        return JSONResponse({"status": "success"})
        
    except Exception as e:
        webhook_logger.error(f"[WEBHOOK_ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return JSONResponse({"status": "error"}, status_code=500)

# ============================================================================
# –û–°–ù–û–í–ù–´–ï ENDPOINTS
# ============================================================================

@app.get("/", summary="–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "AuraFlora Bot is running",
        "service": "WhatsApp AI Bot",
        "version": "1.0.0",
        "features": [
            "AI-powered responses (Google Gemini)",
            "WhatsApp Business API integration",
            "Product catalog integration",
            "Session management",
            "Message history"
        ]
    }

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        return {
            "status": "healthy",
            "service": "AuraFlora WhatsApp Bot",
            "version": "1.0.0",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "ai_service": "‚úÖ",
                "whatsapp_client": "‚úÖ",
                "catalog_service": "‚úÖ",
                "database": "‚úÖ"
            }
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "service": "AuraFlora WhatsApp Bot"
        }

# ============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# ============================================================================

# Debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è DEV_MODE
if os.getenv('DEV_MODE', 'false').lower() == 'true':
    from src.debug.debug_interface import setup_debug_routes
    setup_debug_routes(app)

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv('PORT', 8080))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port) 