"""
–†–æ—É—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
"""

from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from src.services.message_service import MessageService
from src.services.session_service import SessionService
import os
import html

router = APIRouter(prefix="/chat", tags=["chat"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
message_service = MessageService()
session_service = SessionService()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory="templates")

def detect_original_language(text: str) -> tuple[str, str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–¥_—è–∑—ã–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ_—è–∑—ã–∫–∞, —Ñ–ª–∞–≥)
    """
    if not text:
        return 'en', 'English', 'üá¨üáß'
    
    # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    text_lower = text.lower()
    
    # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    russian_chars = [c for c in text_lower if '–∞' <= c <= '—è' or c == '—ë']
    if len(russian_chars) > len(text) * 0.3:
        return 'ru', '–†—É—Å—Å–∫–∏–π', 'üá∑üá∫'
    
    # –¢–∞–π—Å–∫–∏–π —è–∑—ã–∫
    thai_chars = [c for c in text if '\u0E00' <= c <= '\u0E7F']
    if len(thai_chars) > len(text) * 0.3:
        return 'th', '‡πÑ‡∏ó‡∏¢', 'üáπüá≠'
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    return 'en', 'English', 'üá¨üáß'

def get_available_languages(messages: list, user_language: str = None) -> list:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–æ–¥_—è–∑—ã–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ_—è–∑—ã–∫–∞, —Ñ–ª–∞–≥, –∞–∫—Ç–∏–≤–Ω—ã–π_—è–∑—ã–∫)
    """
    if not messages:
        return [('en', 'English', 'üá¨üáß', True)]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    original_lang = 'en'
    original_name = 'English'
    original_flag = 'üá¨üáß'
    
    if user_language and user_language != 'auto':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        if user_language == 'it':
            original_lang, original_name, original_flag = 'it', 'Italiano', 'üáÆüáπ'
        elif user_language == 'ru':
            original_lang, original_name, original_flag = 'ru', '–†—É—Å—Å–∫–∏–π', 'üá∑üá∫'
        elif user_language == 'en':
            original_lang, original_name, original_flag = 'en', 'English', 'üá¨üáß'
        elif user_language == 'th':
            original_lang, original_name, original_flag = 'th', '‡πÑ‡∏ó‡∏¢', 'üáπüá≠'
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            for msg in messages:
                if msg.get('role') == 'user' and msg.get('content'):
                    original_lang, original_name, original_flag = detect_original_language(msg['content'])
                    break
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for msg in messages:
            if msg.get('role') == 'user' and msg.get('content'):
                original_lang, original_name, original_flag = detect_original_language(msg['content'])
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã
    has_en = any(msg.get('content_en') and msg['content_en'] != msg.get('content') for msg in messages)
    has_thai = any(msg.get('content_thai') and msg['content_thai'] != msg.get('content') for msg in messages)
    
    languages = []
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫
    languages.append((original_lang, original_name, original_flag, True))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    if has_en and original_lang != 'en':
        languages.append(('en', 'English', 'üá¨üáß', False))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π—Å–∫–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    if has_thai and original_lang != 'th':
        languages.append(('th', '‡πÑ‡∏ó‡∏¢', 'üáπüá≠', False))
    
    return languages

def format_messages_for_language(messages: list, target_lang: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    """
    messages_html = ""
    
    for msg in messages:
        role = msg["role"]
        timestamp = msg["timestamp"]
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if target_lang == 'en' and msg.get('content_en'):
            content = msg['content_en']
        elif target_lang == 'th' and msg.get('content_thai'):
            content = msg['content_thai']
        else:
            content = msg.get('content', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è
        message_class = "user" if role == "user" else "model"
        # avatar = "üë§" if role == "user" else "ü§ñ"  # —É–±–∏—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = ""
        if timestamp:
            try:
                from datetime import datetime
                if isinstance(timestamp, str):
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                else:
                    dt = timestamp
                time_str = dt.strftime('%H:%M')
            except:
                time_str = ""
        
        # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω—è–µ–º \n –Ω–∞ <br>
        content_escaped = html.escape(content)
        content_with_breaks = content_escaped.replace('\\n', '<br>').replace('\n', '<br>')
        
        messages_html += f"""
            <div class="message {message_class}">
                <div class="message-content">{content_with_breaks}</div>
                {f'<div class="timestamp">{time_str}</div>' if time_str else ''}
            </div>
        """
    
    return messages_html

@router.get("/history/{sender_id}", response_class=HTMLResponse)
async def get_chat_history(request: Request, sender_id: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        request: FastAPI request
        sender_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp
        
    Returns:
        HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
    """
    try:
        print(f"[CHAT_HISTORY] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è {sender_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = await message_service.get_conversation_history_for_ai_by_sender(sender_id, limit=50)
        
        if not messages:
            print(f"[CHAT_HISTORY] –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {sender_id}")
            return templates.TemplateResponse(
                "chat_history_not_found.html",
                {"request": request, "sender_id": sender_id}
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_messages = []
        for msg in messages:
            formatted_msg = {
                "role": msg.get("role", "unknown"),
                "content": msg.get("content", ""),
                "content_en": msg.get("content_en", ""),
                "content_thai": msg.get("content_thai", ""),
                "timestamp": msg.get("timestamp", ""),
                "session_id": msg.get("session_id", "")
            }
            formatted_messages.append(formatted_msg)
        
        print(f"[CHAT_HISTORY] –ù–∞–π–¥–µ–Ω–æ {len(formatted_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await session_service.get_user_info(sender_id)
        user_name = user_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        user_phone = user_info.get('phone', sender_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = await session_service.get_user_language(sender_id, formatted_messages[0].get('session_id', '')) if formatted_messages else 'auto'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        available_languages = get_available_languages(formatted_messages, user_language)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥–∏)
        language_buttons_html = ""
        for lang_code, lang_name, lang_flag, is_active in available_languages:
            active_class = "active" if is_active else ""
            language_buttons_html += f'<button class="lang-btn {active_class}" data-lang="{lang_code}" title="{lang_name}">{lang_flag}</button>'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º user_info HTML
        user_info_html = f"""
            <div class='user-header' style='display: flex; align-items: center; justify-content: center; gap: 16px; margin: 24px 0 12px 0;'>
                <span style='font-size:1.3em;font-weight:600;'>{user_name}</span>
                <a href='https://wa.me/{user_phone}' target='_blank' style='color:#34c759;text-decoration:none;font-size:1.1em;margin-left:12px;'>
                    {user_phone}
                </a>
            </div>
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
        active_lang = available_languages[0][0] if available_languages else 'en'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —è–∑—ã–∫–µ
        messages_html = format_messages_for_language(formatted_messages, active_lang)
        
        return templates.TemplateResponse(
            "chat_history.html",
            {
                "request": request,
                "sender_id": sender_id,
                "user_info": user_info_html,
                "language_buttons": language_buttons_html,
                "messages_html": messages_html,
                "available_languages": available_languages
            }
        )
        
    except Exception as e:
        print(f"[CHAT_HISTORY_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="Error loading chat history")

@router.get("/history/{sender_id}/{session_id}", response_class=HTMLResponse)
async def get_session_history(request: Request, sender_id: str, session_id: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    
    Args:
        request: FastAPI request
        sender_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WhatsApp
        session_id: ID —Å–µ—Å—Å–∏–∏
        
    Returns:
        HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–µ—Å—Å–∏–∏
    """
    try:
        print(f"[SESSION_HISTORY] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏ {session_id} –¥–ª—è {sender_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
        messages = await message_service.get_conversation_history_for_ai_by_sender(
            sender_id, session_id, limit=50
        )
        
        if not messages:
            print(f"[SESSION_HISTORY] –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_id}")
            return templates.TemplateResponse(
                "chat_history_not_found.html",
                {"request": request, "sender_id": sender_id, "session_id": session_id}
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_messages = []
        for msg in messages:
            formatted_msg = {
                "role": msg.get("role", "unknown"),
                "content": msg.get("content", ""),
                "content_en": msg.get("content_en", ""),
                "content_thai": msg.get("content_thai", ""),
                "timestamp": msg.get("timestamp", ""),
                "session_id": msg.get("session_id", "")
            }
            formatted_messages.append(formatted_msg)
        
        print(f"[SESSION_HISTORY] –ù–∞–π–¥–µ–Ω–æ {len(formatted_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await session_service.get_user_info(sender_id)
        user_name = user_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        user_phone = user_info.get('phone', sender_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = await session_service.get_user_language(sender_id, session_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        available_languages = get_available_languages(formatted_messages, user_language)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥–∏)
        language_buttons_html = ""
        for lang_code, lang_name, lang_flag, is_active in available_languages:
            active_class = "active" if is_active else ""
            language_buttons_html += f'<button class="lang-btn {active_class}" data-lang="{lang_code}" title="{lang_name}">{lang_flag}</button>'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º user_info HTML
        user_info_html = f"""
            <div class='user-header' style='display: flex; align-items: center; justify-content: center; gap: 16px; margin: 24px 0 12px 0;'>
                <span style='font-size:1.3em;font-weight:600;'>{user_name}</span>
                <a href='https://wa.me/{user_phone}' target='_blank' style='color:#34c759;text-decoration:none;font-size:1.1em;margin-left:12px;'>
                    {user_phone}
                </a>
            </div>
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
        active_lang = available_languages[0][0] if available_languages else 'en'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —è–∑—ã–∫–µ
        messages_html = format_messages_for_language(formatted_messages, active_lang)
        
        return templates.TemplateResponse(
            "chat_history.html",
            {
                "request": request,
                "sender_id": sender_id,
                "session_id": session_id,
                "user_info": user_info_html,
                "language_buttons": language_buttons_html,
                "messages_html": messages_html,
                "available_languages": available_languages
            }
        )
        
    except Exception as e:
        print(f"[SESSION_HISTORY_ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="Error loading session history")

@router.get("/api/messages/{sender_id}/{session_id}/{language}")
async def get_messages_by_language(request: Request, sender_id: str, session_id: str, language: str):
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
    """
    try:
        print(f"[API_MESSAGES] –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {sender_id}/{session_id} –Ω–∞ —è–∑—ã–∫–µ {language}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        from src.repositories.message_repository import MessageRepository
        message_repo = MessageRepository()
        messages = await message_repo.get_conversation_history_by_sender(sender_id, session_id, limit=50)
        
        print(f"[API_MESSAGES] –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if not messages:
            return {"messages": "", "error": "No messages found"}
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        messages_html = format_messages_for_language(messages, language)
        
        return {"messages": messages_html}
        
    except Exception as e:
        print(f"[API_MESSAGES_ERROR] Error getting messages: {e}")
        return {"messages": "", "error": str(e)} 