"""
–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import logging.config
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, PlainTextResponse
from fastapi.templating import Jinja2Templates
from src.routes.chat_routes import router as chat_router
from src.routes.healthcheck import router as healthcheck_router
from src.routes.crm_routes import router as crm_router
from src.routes.error_routes import router as error_router
from src.handlers.webhook_handler import WebhookHandler
from fastapi.responses import JSONResponse
from src.config.settings import DEBUG_MODE
from src.config.logging_config import LOGGING_CONFIG

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)

def create_app() -> FastAPI:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    Returns:
        FastAPI: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    templates = Jinja2Templates(directory="templates")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        title="Aqua Flowers Bot API",
        description="WhatsApp Bot –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
        version="1.0.0",
        docs_url="/docs",
        redoc_url="/redoc",
        debug=DEBUG_MODE
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è ngrok –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    @app.middleware("http")
    async def add_headers(request: Request, call_next):
        response = await call_next(request)
        response.headers["ngrok-skip-browser-warning"] = "true"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        if request.url.path.startswith("/static/"):
            response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            response.headers["Pragma"] = "no-cache"
            response.headers["Expires"] = "0"
        
        return response

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    try:
        app.mount("/static", StaticFiles(directory="static"), name="static")
        print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —á–µ—Ä–µ–∑ StaticFiles")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è StaticFiles: {e}")
        
        # Fallback: –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        @app.get("/static/{path:path}")
        async def serve_static_files(path: str, request: Request):
            """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
            file_path = f"static/{path}"
            print(f"üìÅ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
            
            if os.path.exists(file_path):
                print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
                return FileResponse(
                    file_path,
                    headers={
                        "Cache-Control": "no-cache, no-store, must-revalidate",
                        "Pragma": "no-cache",
                        "Expires": "0",
                        "ngrok-skip-browser-warning": "true"
                    }
                )
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return JSONResponse({"error": "File not found"}, status_code=404)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
    app.include_router(chat_router)
    app.include_router(healthcheck_router)
    app.include_router(crm_router)
    app.include_router(error_router)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebhookHandler
    webhook_handler = WebhookHandler()

    # –ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç –¥–ª—è webhook (WhatsApp –∏–Ω–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ /)
    @app.get("/")
    async def root_webhook(request: Request):
        """–ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç –¥–ª—è webhook –æ—Ç WhatsApp"""
        try:
            params = dict(request.query_params)
            mode = params.get("hub.mode")
            challenge = params.get("hub.challenge")
            verify_token = params.get("hub.verify_token")
            
            if mode and challenge and verify_token:
                result = await webhook_handler.verify_webhook(mode, challenge, verify_token)
                if result.isdigit():
                    return PlainTextResponse(content=result)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ challenge –∫–∞–∫ plain text
                else:
                    return JSONResponse(content={"error": "Invalid token"}, status_code=int(result))
            else:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ CRM –≤–º–µ—Å—Ç–æ API —Å–æ–æ–±—â–µ–Ω–∏—è
                from fastapi.responses import RedirectResponse
                return RedirectResponse(url="/crm/")
        except Exception as e:
            return JSONResponse(content={"error": str(e)}, status_code=403)

    # Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–∑–∞–º–µ–Ω—è—é—Ç webhook_routes.py)
    @app.get("/webhook")
    async def verify_webhook_no_slash(request: Request):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç WhatsApp (–±–µ–∑ —Å–ª–µ—à–∞)"""
        try:
            params = dict(request.query_params)
            mode = params.get("hub.mode")
            challenge = params.get("hub.challenge")
            verify_token = params.get("hub.verify_token")
            
            result = await webhook_handler.verify_webhook(mode, challenge, verify_token)
            if result.isdigit():
                return PlainTextResponse(content=result)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ challenge –∫–∞–∫ plain text
            else:
                return JSONResponse(content={"error": "Invalid token"}, status_code=int(result))
        except Exception as e:
            return JSONResponse(content={"error": str(e)}, status_code=403)

    @app.get("/webhook/")
    async def verify_webhook(request: Request):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç WhatsApp"""
        try:
            params = dict(request.query_params)
            mode = params.get("hub.mode")
            challenge = params.get("hub.challenge")
            verify_token = params.get("hub.verify_token")
            
            result = await webhook_handler.verify_webhook(mode, challenge, verify_token)
            if result.isdigit():
                return PlainTextResponse(content=result)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ challenge –∫–∞–∫ plain text
            else:
                return JSONResponse(content={"error": "Invalid token"}, status_code=int(result))
        except Exception as e:
            return JSONResponse(content={"error": str(e)}, status_code=403)

    @app.post("/webhook")
    async def webhook_handler_route_no_slash(request: Request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç WhatsApp Business API (–±–µ–∑ —Å–ª–µ—à–∞)"""
        try:
            body = await request.json()
            result = await webhook_handler.process_webhook(body)
            return JSONResponse(content=result)
        except Exception as e:
            return JSONResponse(content={"status": "error", "message": str(e)}, status_code=500)

    @app.post("/webhook/")
    async def webhook_handler_route(request: Request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç WhatsApp Business API"""
        try:
            body = await request.json()
            result = await webhook_handler.process_webhook(body)
            return JSONResponse(content=result)
        except Exception as e:
            return JSONResponse(content={"status": "error", "message": str(e)}, status_code=500)

    @app.get("/webhook/metrics")
    async def get_webhook_metrics():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤"""
        metrics = WebhookHandler.get_metrics()
        return JSONResponse(content=metrics, status_code=200)

    # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–æ–≥-–≤—å—é–≤–µ—Ä–∞
    @app.get("/logs", response_class=HTMLResponse)
    async def log_viewer(request: Request):
        return templates.TemplateResponse("log_viewer.html", {"request": request})

    @app.get("/api/logs")
    async def get_logs():
        try:
            log_file = os.getenv("LOG_FILE", "logs/app.json")
            if not os.path.exists(log_file):
                return {"logs": [], "error": "Log file not found"}
            logs = []
            with open(log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        try:
                            import json
                            log_entry = json.loads(line)
                            logs.append(log_entry)
                        except json.JSONDecodeError:
                            continue
            return {"logs": logs}
        except Exception as e:
            return {"logs": [], "error": str(e)}

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    @app.get("/test-static")
    async def test_static_files():
        """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        files_to_check = [
            "static/css/chat_history.css",
            "static/js/chat_history.js"
        ]
        
        results = {}
        for file_path in files_to_check:
            if os.path.exists(file_path):
                file_size = os.path.getsize(file_path)
                results[file_path] = {
                    "exists": True,
                    "size": file_size,
                    "readable": os.access(file_path, os.R_OK)
                }
            else:
                results[file_path] = {
                    "exists": False,
                    "size": 0,
                    "readable": False
                }
        
        return JSONResponse(content={
            "static_files": results,
            "static_dir_exists": os.path.exists("static"),
            "static_dir_readable": os.access("static", os.R_OK) if os.path.exists("static") else False
        })

    return app

app = create_app() 