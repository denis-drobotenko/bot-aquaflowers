import pytest
from unittest.mock import patch, MagicMock, AsyncMock
from src.services.message_processor import MessageProcessor


@pytest.fixture
def message_processor():
    with patch('src.services.message_processor.WhatsAppClient') as mock_whatsapp_client:
        with patch('src.services.message_processor.MessageService') as mock_message_service:
            processor = MessageProcessor()
            processor.whatsapp_client = mock_whatsapp_client
            processor.message_service = mock_message_service
            return processor


def test_init(message_processor):
    assert isinstance(message_processor.whatsapp_client, MagicMock)
    assert isinstance(message_processor.message_service, MagicMock)


@pytest.mark.asyncio
async def test_send_text_message_success(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞
    message_processor.whatsapp_client.send_text_message = AsyncMock(return_value="test_message_id")
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ü—Ä–∏–≤–µ—Ç!",
        "text",
        save_to_db=True,
        session_id="session_123",
        sender_id="user_456"
    )
    
    assert result is True
    message_processor.whatsapp_client.send_text_message.assert_called_once()


@pytest.mark.asyncio
async def test_send_text_message_without_db_save(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞
    message_processor.whatsapp_client.send_text_message = AsyncMock(return_value="test_message_id")
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ü—Ä–∏–≤–µ—Ç!",
        "text",
        save_to_db=False
    )
    
    assert result is True
    message_processor.whatsapp_client.send_text_message.assert_called_once()


@pytest.mark.asyncio
async def test_send_text_message_error(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    message_processor.whatsapp_client.send_text_message = AsyncMock(return_value=None)
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ü—Ä–∏–≤–µ—Ç!",
        "text"
    )
    
    assert result is False


@pytest.mark.asyncio
async def test_send_image_message_success(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    message_processor.whatsapp_client.send_image_with_caption = AsyncMock(return_value="test_message_id")
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç",
        "image",
        {"image_url": "https://example.com/image.jpg"},
        save_to_db=True,
        session_id="session_123",
        sender_id="user_456"
    )
    
    assert result is True
    message_processor.whatsapp_client.send_image_with_caption.assert_called_once()


@pytest.mark.asyncio
async def test_send_image_message_error_with_fallback(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    message_processor.whatsapp_client.send_image_with_caption = AsyncMock(return_value=None)
    # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π fallback –Ω–∞ —Ç–µ–∫—Å—Ç
    message_processor.whatsapp_client.send_text_message = AsyncMock(return_value="fallback_message_id")
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç",
        "image",
        {"image_url": "https://example.com/image.jpg"}
    )
    
    assert result is True
    message_processor.whatsapp_client.send_text_message.assert_called_once()


@pytest.mark.asyncio
async def test_send_image_message_error_without_fallback(message_processor):
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    message_processor.whatsapp_client.send_image_with_caption = AsyncMock(return_value=None)
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É fallback
    message_processor.whatsapp_client.send_text_message = AsyncMock(return_value=None)
    
    result = await message_processor.send_message(
        "+1234567890",
        "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç",
        "image",
        {"image_url": "https://example.com/image.jpg"}
    )
    
    assert result is False


@pytest.mark.asyncio
async def test_send_unknown_message_type(message_processor):
    result = await message_processor.send_message(
        "+1234567890",
        "–¢–µ—Å—Ç",
        "unknown_type"
    )
    
    assert result is False


def test_add_flower_emoji():
    processor = MessageProcessor()
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üå∏ –µ—Å–ª–∏ –Ω–µ—Ç
    result = processor._add_flower_emoji("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    assert result == "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç üå∏"
    
    # –¢–µ—Å—Ç –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å üå∏
    result = processor._add_flower_emoji("–¢–µ–∫—Å—Ç üå∏")
    assert result == "–¢–µ–∫—Å—Ç üå∏"
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    result = processor._add_flower_emoji("")
    assert result == "üå∏"

def test_clean_caption():
    processor = MessageProcessor()
    
    # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —ç–º–æ–¥–∑–∏
    result = processor._clean_caption("–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç üíï")
    assert result == "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç üå∏"
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üå∏ –µ—Å–ª–∏ –Ω–µ—Ç
    result = processor._clean_caption("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    assert result == "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç üå∏"
    
    # –¢–µ—Å—Ç –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å üå∏
    result = processor._clean_caption("–¢–µ–∫—Å—Ç üå∏")
    assert result == "–¢–µ–∫—Å—Ç üå∏"


@pytest.mark.asyncio
async def test_process_incoming_message(message_processor):
    # –ú–æ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_processor.message_service.add_message_to_conversation = AsyncMock()
    
    result = await message_processor.process_incoming_message(
        "+1234567890",
        "–ü—Ä–∏–≤–µ—Ç!",
        save_to_db=True,
        session_id="session_123",
        sender_id="user_456"
    )
    
    assert result == "–ü—Ä–∏–≤–µ—Ç!"
    message_processor.message_service.add_message_to_conversation.assert_called_once()


@pytest.mark.asyncio
async def test_process_incoming_message_without_db_save(message_processor):
    result = await message_processor.process_incoming_message(
        "+1234567890",
        "–ü—Ä–∏–≤–µ—Ç!",
        save_to_db=False
    )
    
    assert result == "–ü—Ä–∏–≤–µ—Ç!"
    # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    message_processor.message_service.add_message_to_conversation.assert_not_called() 