"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, MagicMock
from typing import Dict, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pytest-cov
def pytest_configure(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-cov"""
    config.addinivalue_line(
        "markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')"
    )
    config.addinivalue_line(
        "markers", "integration: marks tests as integration tests"
    )
    config.addinivalue_line(
        "markers", "unit: marks tests as unit tests"
    )


def pytest_collection_modifyitems(config, items):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º —Ç–µ—Å—Ç—ã –∫–∞–∫ unit –∏–ª–∏ integration"""
    for item in items:
        if "integration" in str(item.fspath):
            item.add_marker(pytest.mark.integration)
        elif "unit" in str(item.fspath):
            item.add_marker(pytest.mark.unit)


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–µ—Ç event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def mock_firestore_client():
    """–ú–æ–∫ –¥–ª—è Firestore –∫–ª–∏–µ–Ω—Ç–∞"""
    mock_client = Mock()
    mock_collection = Mock()
    mock_document = Mock()
    mock_doc = Mock()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞
    mock_doc.exists = True
    mock_doc.to_dict.return_value = {}
    mock_document.get.return_value = mock_doc
    mock_collection.document.return_value = mock_document
    mock_client.collection.return_value = mock_collection
    
    return mock_client

@pytest.fixture
def mock_whatsapp_client():
    """–ú–æ–∫ –¥–ª—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞"""
    mock_client = Mock()
    mock_client.send_text_message = AsyncMock(return_value=True)
    return mock_client

@pytest.fixture
def mock_gemini_model():
    """–ú–æ–∫ –¥–ª—è Gemini –º–æ–¥–µ–ª–∏"""
    mock_model = Mock()
    mock_response = Mock()
    mock_response.text = "Test response"
    mock_model.generate_content.return_value = mock_response
    return mock_model

@pytest.fixture
def sample_catalog_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    return [
        {
            "id": "test_id_1",
            "name": "Pretty üòç",
            "description": "Beautiful bouquet",
            "price": "2 600,00 ‡∏ø",
            "retailer_id": "kie4sy3qsy",
            "image_url": "https://example.com/image1.jpg",
            "availability": "in stock"
        },
        {
            "id": "test_id_2", 
            "name": "Spirit üå∏",
            "description": "Elegant bouquet",
            "price": "1 800,00 ‡∏ø",
            "retailer_id": "rl7vdxcifo",
            "image_url": "https://example.com/image2.jpg",
            "availability": "in stock"
        }
    ]

@pytest.fixture
def sample_messages():
    """–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return [
        {
            "sender_id": "test_user_123",
            "session_id": "test_session_456",
            "role": "user",
            "content": "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
            "timestamp": "2024-01-01T12:00:00Z"
        },
        {
            "sender_id": "test_user_123",
            "session_id": "test_session_456", 
            "role": "assistant",
            "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞–∂—É –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤",
            "timestamp": "2024-01-01T12:01:00Z"
        }
    ]

@pytest.fixture
def sample_order_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞"""
    return {
        "sender_id": "test_user_123",
        "session_id": "test_session_456",
        "bouquet": "Pretty üòç",
        "retailer_id": "kie4sy3qsy",
        "delivery_needed": True,
        "address": "Rawai, Phuket",
        "date": "2024-01-15",
        "time": "14:00",
        "card_needed": True,
        "card_text": "–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!",
        "recipient_name": "–ê–Ω–Ω–∞",
        "recipient_phone": "+79123456789"
    }

@pytest.fixture
def mock_ai_response():
    """–ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ AI"""
    return {
        "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤?",
        "text_en": "Hello! Would you like to see our flower catalog?",
        "text_thai": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏´‡∏°?",
        "command": None
    }

@pytest.fixture
def mock_ai_response_with_command():
    """–ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ AI —Å –∫–æ–º–∞–Ω–¥–æ–π"""
    return {
        "text": "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç —Å —Ñ–æ—Ç–æ!",
        "text_en": "Great! I'll show you each bouquet with photo!",
        "text_thai": "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û!",
        "command": {
            "type": "send_catalog"
        }
    }

@pytest.fixture(scope="function")
def mock_firestore():
    """–ú–æ–∫ –¥–ª—è Firestore"""
    with pytest.MonkeyPatch().context() as m:
        m.setattr('firebase_admin.firestore.Client', MagicMock())
        yield

@pytest.fixture(scope="function")
def mock_requests():
    """–ú–æ–∫ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    with pytest.MonkeyPatch().context() as m:
        m.setattr('requests.get', MagicMock())
        m.setattr('requests.post', MagicMock())
        yield

@pytest.fixture(scope="function")
def mock_ai_client():
    """–ú–æ–∫ –¥–ª—è AI –∫–ª–∏–µ–Ω—Ç–∞"""
    with pytest.MonkeyPatch().context() as m:
        m.setattr('google.generativeai.GenerativeModel', MagicMock())
        yield

@pytest.fixture(scope="function")
def mock_whatsapp_client():
    """–ú–æ–∫ –¥–ª—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞"""
    with pytest.MonkeyPatch().context() as m:
        m.setattr('src.utils.whatsapp_client.WhatsAppClient', MagicMock())
        yield

@pytest.fixture(scope="function")
def test_data():
    """–û–±—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    return {
        "user_id": "test_user_123",
        "session_id": "test_session_456",
        "order_id": "test_order_789",
        "message_id": "test_message_101"
    } 