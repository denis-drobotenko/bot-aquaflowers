#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""

import subprocess
import sys
import os
import argparse
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"{'='*60}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print("STDOUT:")
        print(result.stdout)
    
    if result.stderr:
        print("STDERR:")
        print(result.stderr)
    
    print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
    print(f"{'='*60}")
    
    return result.returncode == 0


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤")
    parser.add_argument(
        "--type", 
        choices=["all", "unit", "integration", "coverage", "fast"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--service",
        help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ai_service)"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--html-report",
        action="store_true",
        help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
    )
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ pytest
    base_opts = ["python3", "-m", "pytest"]
    
    if args.verbose:
        base_opts.append("-v")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
    tests_path = Path(__file__).parent
    
    if args.type == "all":
        # –í—Å–µ —Ç–µ—Å—Ç—ã
        command = base_opts + [str(tests_path)]
        success = run_command(" ".join(command), "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
        
    elif args.type == "unit":
        # –¢–æ–ª—å–∫–æ –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        unit_path = tests_path / "unit"
        command = base_opts + [str(unit_path)]
        success = run_command(" ".join(command), "–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
    elif args.type == "integration":
        # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        integration_path = tests_path / "integration"
        command = base_opts + [str(integration_path)]
        success = run_command(" ".join(command), "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
    elif args.type == "coverage":
        # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        coverage_opts = base_opts + [
            "--cov=src/services",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov" if args.html_report else "",
            str(tests_path)
        ]
        command = " ".join([opt for opt in coverage_opts if opt])
        success = run_command(command, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
        
    elif args.type == "fast":
        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)
        command = base_opts + ["-m", "not slow", str(tests_path)]
        success = run_command(" ".join(command), "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    if args.service:
        service_test_path = tests_path / "unit" / f"test_{args.service}.py"
        if service_test_path.exists():
            command = base_opts + [str(service_test_path)]
            success = run_command(" ".join(command), f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ {args.service}")
        else:
            print(f"‚ùå –¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {args.service} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {service_test_path}")
            success = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 