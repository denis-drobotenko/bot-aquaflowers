#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
sys.path.insert(0, os.path.dirname(__file__))

from src.utils.logging_decorator import log_function, get_logging_config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
os.environ["LOG_FILE"] = "logs/simple_test.json"
os.environ["LOG_FORMAT"] = "json"
os.environ["ENVIRONMENT"] = "development"

import logging
log_file = os.environ["LOG_FILE"]
root_logger = logging.getLogger()
if not any(isinstance(h, logging.FileHandler) and h.baseFilename == os.path.abspath(log_file) for h in root_logger.handlers):
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(logging.Formatter('%(message)s'))
    root_logger.addHandler(file_handler)
root_logger.setLevel(logging.INFO)

@log_function("test_module")
def simple_function(name: str, age: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return f"Hello {name}, you are {age} years old"

@log_function("test_module")
async def async_function(name: str, age: int) -> str:
    """Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import asyncio
    await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º async –æ–ø–µ—Ä–∞—Ü–∏—é
    return f"Async hello {name}, you are {age} years old"

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_logging_config()
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: file={config.log_file}, format={config.log_format}")
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é...")
    result = simple_function("Alice", 30)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –¢–µ—Å—Ç async —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º async —Ñ—É–Ω–∫—Ü–∏—é...")
    import asyncio
    result = asyncio.run(async_function("Bob", 25))
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    log_file = os.environ["LOG_FILE"]
    if os.path.exists(log_file):
        print(f"üìÑ –§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω: {os.path.getsize(log_file)} –±–∞–π—Ç")
        with open(log_file, "r") as f:
            lines = f.readlines()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(lines)}")
            if lines:
                print("üìù –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:")
                print(lines[0][:200] + "...")
    else:
        print("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω") 