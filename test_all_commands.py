#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ AI
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.services.command_service import CommandService
from src.services.message_processor import MessageProcessor
from src.services.ai_service import AIService
from src.config.settings import GEMINI_API_KEY

async def test_send_catalog():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã send_catalog"""
    print("\n=== –¢–ï–°–¢: send_catalog ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞
    result = await command_service.handle_command(
        command={"type": "send_catalog"},
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'success':
        print("‚úÖ send_catalog —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå send_catalog –æ—à–∏–±–∫–∞: {result.get('message')}")

async def test_save_order_info():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã save_order_info"""
    print("\n=== –¢–ï–°–¢: save_order_info ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞
    result = await command_service.handle_command(
        command={
            "type": "save_order_info",
            "bouquet": "Spirit",
            "retailer_id": "test_product_123"
        },
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'success':
        print("‚úÖ save_order_info —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå save_order_info –æ—à–∏–±–∫–∞: {result.get('message')}")

async def test_add_order_item():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã add_order_item"""
    print("\n=== –¢–ï–°–¢: add_order_item ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    result = await command_service.handle_command(
        command={
            "type": "add_order_item",
            "bouquet": "Rose Garden",
            "retailer_id": "test_product_456",
            "quantity": 2
        },
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'success':
        print("‚úÖ add_order_item —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå add_order_item –æ—à–∏–±–∫–∞: {result.get('message')}")

async def test_remove_order_item():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã remove_order_item"""
    print("\n=== –¢–ï–°–¢: remove_order_item ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    result = await command_service.handle_command(
        command={
            "type": "remove_order_item",
            "product_id": "test_product_123"
        },
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'success':
        print("‚úÖ remove_order_item —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå remove_order_item –æ—à–∏–±–∫–∞: {result.get('message')}")



async def test_confirm_order():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã confirm_order"""
    print("\n=== –¢–ï–°–¢: confirm_order ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    result = await command_service.handle_command(
        command={"type": "confirm_order"},
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'success':
        print("‚úÖ confirm_order —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå confirm_order –æ—à–∏–±–∫–∞: {result.get('message')}")

async def test_unknown_command():
    """–¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    print("\n=== –¢–ï–°–¢: unknown_command ===")
    
    command_service = CommandService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    result = await command_service.handle_command(
        command={"type": "unknown_command"},
        session_id="test_session_123",
        sender_id="test_user_456"
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get('status') == 'error':
        print("‚úÖ unknown_command –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    else:
        print("‚ùå unknown_command –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

async def test_supported_commands():
    """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n=== –¢–ï–°–¢: SUPPORTED_COMMANDS ===")
    
    message_processor = MessageProcessor()
    
    expected_commands = {
        'send_catalog',
        'save_order_info', 
        'add_order_item',
        'remove_order_item',
        'confirm_order'
    }
    
    actual_commands = message_processor.SUPPORTED_COMMANDS
    
    print(f"–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã: {expected_commands}")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: {actual_commands}")
    
    if expected_commands == actual_commands:
        print("‚úÖ SUPPORTED_COMMANDS —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
    else:
        missing = expected_commands - actual_commands
        extra = actual_commands - expected_commands
        print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:")
        if missing:
            print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing}")
        if extra:
            print(f"   –õ–∏—à–Ω–∏–µ: {extra}")

async def test_ai_response_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ AI"""
    print("\n=== –¢–ï–°–¢: AI Response Parsing ===")
    
    ai_service = AIService(GEMINI_API_KEY)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JSON
    test_response = '''
    {
      "text": "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞–∂—É –∫–∞—Ç–∞–ª–æ–≥.",
      "text_en": "Hello! I'll show the catalog.",
      "text_thai": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å",
      "command": {
        "type": "send_catalog"
      }
    }
    '''
    
    from src.utils.ai_utils import parse_ai_response
    result = parse_ai_response(test_response)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
    
    if result[0] and result[3] and result[3].get('type') == 'send_catalog':
        print("‚úÖ AI response parsing —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå AI response parsing –æ—à–∏–±–∫–∞")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ö–û–ú–ê–ù–î AI")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥
        await test_send_catalog()
        await test_save_order_info()
        await test_add_order_item()
        await test_remove_order_item()
        await test_confirm_order()
        await test_unknown_command()
        
        # –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        await test_supported_commands()
        await test_ai_response_parsing()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 