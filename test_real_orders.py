#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
"""

import asyncio
from google.cloud import firestore
from src.services.order_service import OrderService
from src.models.order import Order, OrderStatus, OrderItem
from datetime import datetime

async def test_real_orders():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
    
    db = firestore.Client()
    order_service = OrderService()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏–∏ –≤ conversations
    print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –≤ conversations...")
    conversations_ref = db.collection('conversations')
    conversations = list(conversations_ref.stream())
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(conversations)}")
    
    if not conversations:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ conversations")
        return
    
    # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏
    total_sessions = 0
    for conv_doc in conversations:
        sender_id = conv_doc.id
        sessions_ref = conv_doc.reference.collection('sessions')
        sessions = list(sessions_ref.stream())
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}: {len(sessions)} —Å–µ—Å—Å–∏–π")
        total_sessions += len(sessions)
        
        # 3. –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        for session_doc in sessions:
            session_id = session_doc.id
            session_data = session_doc.to_dict()
            message_count = session_data.get('message_count', 0)
            
            print(f"    –°–µ—Å—Å–∏—è {session_id}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            try:
                order = Order(
                    order_id=session_id,
                    session_id=session_id,
                    sender_id=sender_id,
                    status=OrderStatus.DRAFT,
                    created_at=session_data.get('created_at', datetime.now()),
                    updated_at=datetime.now()
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                item = OrderItem(
                    product_id="test_product_1",
                    bouquet="–¢–µ—Å—Ç–æ–≤—ã–π –±—É–∫–µ—Ç",
                    quantity=1,
                    price="‡∏ø500",
                    notes="–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
                order.items.append(item)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
                await order_service.repo.create_order_for_session(order)
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è {session_id}: {e}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ: {total_sessions} —Å–µ—Å—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
    print("\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã...")
    try:
        all_orders = await order_service.get_all_orders_for_crm()
        print(f"‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑–æ–≤ –≤ CRM: {len(all_orders)}")
        
        if all_orders:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤:")
            for i, order in enumerate(all_orders[:3]):
                print(f"  {i+1}. ID: {order.get('order_id')}, –°—Ç–∞—Ç—É—Å: {order.get('status')}, –ö–ª–∏–µ–Ω—Ç: {order.get('sender_id')}")
                print(f"     –¢–æ–≤–∞—Ä—ã: {order.get('total_items', 0)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

if __name__ == "__main__":
    asyncio.run(test_real_orders()) 