#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ –∑–∞–∫–∞–∑–µ
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.services.order_service import OrderService

async def test_customer_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    print("üß™ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞...")
    
    order_service = OrderService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_session_id = f"customer_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    test_sender_id = "customer_test_user"
    test_customer_name = "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"  # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∏–∑ WABA
    test_customer_phone = "+79123456789"  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ WABA
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {test_session_id}")
    print(f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {test_customer_name}")
    print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {test_customer_phone}")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞...")
        customer_data = {
            'customer_name': test_customer_name,
            'customer_phone': test_customer_phone
        }
        
        order_id = await order_service.update_order_data(test_session_id, test_sender_id, customer_data)
        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        item_data = {
            'bouquet': 'Test Bouquet',
            'quantity': 1,
            'price': '1 500,00 ‡∏ø',
            'product_id': 'test_product_123'
        }
        
        order_id = await order_service.add_item(test_session_id, test_sender_id, item_data)
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞...")
        order = await order_service.get_order_data(test_session_id, test_sender_id)
        
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:")
        print(f"   - ID: {order.get('order_id')}")
        print(f"   - –ó–∞–∫–∞–∑—á–∏–∫: {order.get('customer_name')}")
        print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {order.get('customer_phone')}")
        print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(order.get('items', []))}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞...")
        assert order.get('customer_name') == test_customer_name, f"–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {order.get('customer_name')} != {test_customer_name}"
        assert order.get('customer_phone') == test_customer_phone, f"–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {order.get('customer_phone')} != {test_customer_phone}"
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        # 5. –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è AI
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è AI...")
        summary = order_service.get_order_summary_for_ai(order)
        print(f"üìã –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:")
        print(summary)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–≤–æ–¥–∫–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        assert test_customer_name in summary, "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–¥–∫–µ"
        assert test_customer_phone in summary, "–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–¥–∫–µ"
        
        print("‚úÖ –°–≤–æ–¥–∫–∞ –¥–ª—è AI —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞!")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∑–∞–∫–∞–∑–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_customer_data()) 