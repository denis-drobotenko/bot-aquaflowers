#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_prompt_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ AI"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
        prompt_path = os.path.join("src", "services", "prompts", "ai_system_prompt.prompt")
        
        with open(prompt_path, encoding="utf-8") as f:
            prompt_template = f.read()
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {prompt_path}")
        print(f"üìè –î–ª–∏–Ω–∞ —à–∞–±–ª–æ–Ω–∞: {len(prompt_template)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        user_lang = 'ru'
        sender_name = 'Test User'
        phuket_time_str = '08 July 2025, 12:00'
        name_context = f"User name: {sender_name}"
        name_instruction = f"""
GREETING WITH NAME: This is the first message in conversation, use the user's name '{sender_name}' in greeting.
IMPORTANT: The name '{sender_name}' is from WhatsApp profile. If the user writes in Russian, use Russian name format.
If the user writes in English, use English name format. If the user writes in Thai, use Thai name format.
Example: 'Hello {sender_name}! Would you like to see our flower catalog?'"""
        language_instruction = f"IMPORTANT: Respond in user's language! User writes in language code '{user_lang}'. Respond in the same language."
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É
            final_prompt = prompt_template.format(
                user_lang=user_lang,
                sender_name=sender_name or "",
                phuket_time_str=phuket_time_str,
                name_context=name_context,
                name_instruction=name_instruction,
                language_instruction=language_instruction
            )
        except KeyError as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê KeyError: {e}")
            print("--- –§—Ä–∞–≥–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤) ---")
            print(prompt_template[:1000])
            print("--- –ö–û–ù–ï–¶ –§–†–ê–ì–ú–ï–ù–¢–ê ---")
            raise
        
        print(f"‚úÖ –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"üìè –î–ª–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–≤–æ–π–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        if '{{' in final_prompt or '}}' in final_prompt:
            print("‚ùå –û–®–ò–ë–ö–ê: –í –ø—Ä–æ–º–ø—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å –¥–≤–æ–π–Ω—ã–µ —Å–∫–æ–±–∫–∏!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ
            lines = final_prompt.split('\n')
            for i, line in enumerate(lines):
                if '{{' in line or '}}' in line:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {line}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ JSON –ø—Ä–∏–º–µ—Ä—ã
        if '"text":' in final_prompt and '"command":' in final_prompt:
            print("‚úÖ JSON –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: JSON –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'Test User' in final_prompt:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è!")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞
        print("\nüìÑ –§—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("=" * 50)
        print(final_prompt[:500])
        print("=" * 50)
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–∞...")
    success = test_prompt_loading()
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–•' if success else '–û–®–ò–ë–ö–ê'}") 