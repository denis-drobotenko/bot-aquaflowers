#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OrderService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CatalogService
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.services.order_service import OrderService
from src.services.catalog_service import CatalogService
from src.models.order import OrderStatus
from src.config.settings import WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN

async def test_order_with_catalog():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OrderService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç OrderService —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º...")
    
    order_service = OrderService()
    catalog_service = CatalogService(WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_session_id = f"catalog_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    test_sender_id = "catalog_test_user"
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {test_session_id}")
    print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_sender_id}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        products = catalog_service.get_available_products()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if not products:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
        for i, product in enumerate(products[:3], 1):
            print(f"   {i}. {product.get('name')} - {product.get('price')} (ID: {product.get('retailer_id')})")
        
        # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏...")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä
        first_product = products[0]
        retailer_id = first_product.get('retailer_id')
        product_name = first_product.get('name')
        product_price = first_product.get('price')
        
        print(f"üõí –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä: {product_name} - {product_price}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            'delivery_needed': True,
            'address': 'Phuket, Patong Beach, 123/45',
            'date': '2025-07-10',
            'time': '14:00',
            'card_needed': True,
            'card_text': 'Happy Birthday! üå∏',
            'recipient_name': 'John Doe',
            'recipient_phone': '+66 123 456 789'
        }
        
        order_id = await order_service.update_order_data(test_session_id, test_sender_id, order_data)
        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞...")
        item_data = {
            'bouquet': product_name,
            'quantity': 1,
            'price': product_price,
            'product_id': retailer_id,
            'notes': 'Test order from catalog'
        }
        
        order_id = await order_service.add_item(test_session_id, test_sender_id, item_data)
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞...")
        validation = catalog_service.validate_product(retailer_id)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞: {validation['valid']}")
        if validation['valid']:
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {validation['product'].get('name')}")
            print(f"   - –¶–µ–Ω–∞: {validation['product'].get('price')}")
            print(f"   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {validation['product'].get('availability')}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞...")
        order = await order_service.get_order_data(test_session_id, test_sender_id)
        
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:")
        print(f"   - –°—Ç–∞—Ç—É—Å: {order.get('status')}")
        print(f"   - –î–æ—Å—Ç–∞–≤–∫–∞: {order.get('delivery_needed')}")
        print(f"   - –ê–¥—Ä–µ—Å: {order.get('address')}")
        print(f"   - –î–∞—Ç–∞: {order.get('date')}")
        print(f"   - –í—Ä–µ–º—è: {order.get('time')}")
        print(f"   - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.get('recipient_name')}")
        print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('recipient_phone')}")
        print(f"   - –û—Ç–∫—Ä—ã—Ç–∫–∞: {order.get('card_needed')}")
        print(f"   - –¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏: {order.get('card_text')}")
        
        items = order.get('items', [])
        print(f"   - –¢–æ–≤–∞—Ä–æ–≤: {len(items)}")
        for i, item in enumerate(items, 1):
            print(f"     {i}. {item.get('bouquet')} - {item.get('price')} (x{item.get('quantity')})")
        
        # 6. –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        order_result = await order_service.process_order_for_operator(test_session_id, test_sender_id)
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   - –ì–æ—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {order_result.get('is_ready_for_operator')}")
        
        validation = order_result.get('validation', {})
        print(f"   - –ü–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑: {validation.get('is_complete')}")
        print(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {validation.get('missing_required')}")
        print(f"   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {validation.get('missing_optional')}")
        
        # 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        print("\n7Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
        await order_service.update_order_status(test_session_id, test_sender_id, OrderStatus.CONFIRMED)
        
        # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\n8Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        final_order = await order_service.get_order_data(test_session_id, test_sender_id)
        print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {final_order.get('status')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert final_order.get('status') == 'confirmed', "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å confirmed"
        assert final_order.get('delivery_needed') == True, "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å True"
        assert final_order.get('address') == 'Phuket, Patong Beach, 123/45', "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert len(final_order.get('items', [])) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —Ç–æ–≤–∞—Ä"
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ OrderService –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_order_with_catalog()) 