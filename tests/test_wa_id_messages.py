#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å WA ID —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import sys
import os
import time
import pytest
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src import database, session_manager

@pytest.mark.asyncio
async def test_wa_id_messages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ WA ID"""
    print("=== –¢–ï–°–¢ WA ID –°–û–û–ë–©–ï–ù–ò–ô ===")
    
    sender_id = "test_user_wa_id"
    session_id = session_manager.get_or_create_session_id(sender_id)
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º session_id: {session_id}")

    # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å WA ID
    wa_message_id = "wamid.HBgLMTIzNDU2Nzg5MDEyMzQ1NgAB"
    user_message = "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç."
    
    print(f"1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å WA ID: {wa_message_id}")
    database.add_message_with_wa_id(sender_id, session_id, "user", user_message, wa_message_id)
    
    # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI —Å WA ID
    ai_wa_id = "wamid.HBgLMTIzNDU2Nzg5MDEyMzQ1NgAC"
    ai_response = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∫–∞–∂—É –≤–∞–º –∫–∞—Ç–∞–ª–æ–≥ –±—É–∫–µ—Ç–æ–≤ üå∏"
    
    print(f"2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI —Å WA ID: {ai_wa_id}")
    database.add_message_with_parts_wa_id(sender_id, session_id, "assistant", [{"text": ai_response}], ai_wa_id)
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ WA ID
    print(f"3. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ WA ID: {wa_message_id}")
    retrieved_message = database.get_message_by_wa_id(sender_id, session_id, wa_message_id)
    
    assert retrieved_message is not None, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ WA ID"
    assert retrieved_message['role'] == 'user', "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"
    assert retrieved_message['content'] == user_message, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {retrieved_message['content']}")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI –ø–æ WA ID
    print(f"4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –ø–æ WA ID: {ai_wa_id}")
    retrieved_ai = database.get_message_by_wa_id(sender_id, session_id, ai_wa_id)
    
    assert retrieved_ai is not None, "–û—Ç–≤–µ—Ç AI –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ WA ID"
    assert retrieved_ai['role'] == 'assistant', "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –æ—Ç–≤–µ—Ç–∞ AI"
    assert retrieved_ai['parts'][0]['text'] == ai_response, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ AI"
    print(f"‚úÖ –û—Ç–≤–µ—Ç AI –Ω–∞–π–¥–µ–Ω: {retrieved_ai['parts'][0]['text']}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    fake_wa_id = "wamid.FAKE_ID_THAT_DOES_NOT_EXIST"
    print(f"5. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {fake_wa_id}")
    fake_message = database.get_message_by_wa_id(sender_id, session_id, fake_wa_id)
    
    assert fake_message is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
    print("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None")
    
    # –¢–µ—Å—Ç 6: –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è AI —Å WA ID
    print("6. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI")
    history = database.get_conversation_history_for_ai(sender_id, session_id)
    
    assert len(history) >= 2, "–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è"
    print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    print("\n=== –í–°–ï –¢–ï–°–¢–´ WA ID –ü–†–û–ô–î–ï–ù–´ ===")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_wa_id_messages()) 