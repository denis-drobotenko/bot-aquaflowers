#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ LINE
"""

import sys
import os
import pytest
import asyncio
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src import database, session_manager, order_utils

@pytest.mark.asyncio
async def test_line_sending():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–∫–∞–∑–∞ –≤ LINE"""
    print("=== –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –í LINE ===")
    
    sender_id = "test_user_line_sending"
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    session_id = session_manager.get_or_create_session_id(sender_id)
    print(f"1. –°–µ—Å—Å–∏—è: {session_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
    database.add_message(sender_id, session_id, "user", "–ü—Ä–∏–≤–µ—Ç!")
    database.add_message(sender_id, session_id, "model", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    database.add_message(sender_id, session_id, "user", "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç Good vibes")
    database.add_message(sender_id, session_id, "model", "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        'bouquet': 'Good vibes üå∏',
        'date': '05 July 2025',
        'time': '10:00',
        'delivery_needed': False,
        'address': None,
        'card_needed': False,
        'card_text': None,
        'recipient_name': '–ü–µ—Ç—Ä',
        'recipient_phone': '3543585834',
        'retailer_id': 'rldxcifo_goodvibes'
    }
    
    print(f"2. –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
    
    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ LINE
    print("3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ LINE...")
    try:
        result = await order_utils.send_order_to_line(sender_id, session_id, order_data)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        
        if "–û—à–∏–±–∫–∞" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            return False
        else:
            print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LINE!")
            return True
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    asyncio.run(test_line_sending()) 