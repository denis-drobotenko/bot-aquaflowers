#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ AI –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
import re

def parse_response_test(response_text):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ parse_response"""
    text = None
    command = None
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ AI
        full_text = response_text
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
        try:
            # –ò—â–µ–º JSON –±–ª–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ ```json –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ JSON)
            if '```json' in full_text:
                json_start = full_text.find('```json') + 7
                json_end = full_text.find('```', json_start)
                json_str = full_text[json_start:json_end].strip()
            elif full_text.strip().startswith('{'):
                json_str = full_text.strip()
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º JSON —Å –¥–≤–æ–π–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ (–∏–∑ f-string)
                json_match = re.search(r'\{\{.*\}\}', full_text, re.DOTALL)
                if json_match:
                    json_str = json_match.group()
                    # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
                    json_str = json_str.replace('{{', '{').replace('}}', '}')
                else:
                    # –ò—â–µ–º –æ–±—ã—á–Ω—ã–π JSON
                    json_match = re.search(r'\{.*\}', full_text, re.DOTALL)
                    if json_match:
                        json_str = json_match.group()
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç
                        text = full_text
                        return text, None
            
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π JSON (–¥–æ –∑–∞–º–µ–Ω—ã): {json_str}")
            if '{{' in json_str:
                json_str = json_str.replace('{{', '{').replace('}}', '}')
                print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π JSON (–ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã): {json_str}")
            
            # –ü–∞—Ä—Å–∏–º JSON
            response_data = json.loads(json_str)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—É
            text = response_data.get('text', '')
            command = response_data.get('command', None)
            
            print(f"[JSON_PARSE] Parsed JSON: text='{text}', command={command}")
            
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")
            # –ï—Å–ª–∏ JSON —Å–ª–æ–º–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç
            text = full_text
            command = None
            
    except Exception as e:
        print(f"Error parsing response: {e}")
        text = None
        command = None
        
    return text, command

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ª–æ–≥–æ–≤
test_cases = [
    # –°–ª—É—á–∞–π 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Å –¥–≤–æ–π–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    """{{
  "text": "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üåπ",
  "command": {{
    "type": "confirm_order",
    "order_summary": {{
      "bouquet": "Candy's",
      "delivery_needed": true,
      "address": "Centrio condo",
      "date": "2 July 2025",
      "time": "09:00",
      "card_needed": true,
      "card_text": "–Ø —Ç–µ–±—è –ª—é–±–ª—é!",
      "recipient_name": "–°–∞—à–∞",
      "recipient_phone": "3578368646774"
    }}
  }}
}}""",
    
    # –°–ª—É—á–∞–π 2: JSON —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
    """{{\n  "text": "–û—Ç–ª–∏—á–Ω–æ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∞–Ω. –í–æ—Ç —Å–≤–æ–¥–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\\n\\n–ë—É–∫–µ—Ç: Candy's\\n–î–æ—Å—Ç–∞–≤–∫–∞: –î–∞, –ø–æ –∞–¥—Ä–µ—Å—É Centrio condo\\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 2 –∏—é–ª—è 2025 –≥–æ–¥–∞, 09:00\\n–û—Ç–∫—Ä—ã—Ç–∫–∞: –î–∞, —Å —Ç–µ–∫—Å—Ç–æ–º '–Ø —Ç–µ–±—è –ª—é–±–ª—é!'\\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –°–∞—à–∞\\n–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: 3578368646774\\n\\n–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?",\n  "command": {\n    "type": "save_order_info",\n    "recipient_name": "–°–∞—à–∞",\n    "recipient_phone": "3578368646774"\n  }\n}}""",
    
    # –°–ª—É—á–∞–π 3: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ JSON
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤? üå∏",
    
    # –°–ª—É—á–∞–π 4: JSON –≤ markdown –±–ª–æ–∫–µ
    """```json
{
  "text": "–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º!",
  "command": {
    "type": "send_catalog"
  }
}
```""",
]

print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê JSON ===\n")

for i, test_case in enumerate(test_cases, 1):
    print(f"--- –¢–µ—Å—Ç {i} ---")
    print(f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{test_case}\n")
    
    text, command = parse_response_test(test_case)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"Text: {text}")
    print(f"Command: {command}")
    print("-" * 50)
    print() 