#!/usr/bin/env python3
"""
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
"""

import asyncio
import sys
import os
import pytest
import time
from datetime import datetime

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.stdout.encoding.lower() != 'utf-8':
    sys.stdout.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = os.path.dirname(__file__)
project_root = os.path.join(current_dir, '..')
src_path = os.path.join(project_root, 'src')
sys.path.insert(0, project_root)
sys.path.insert(0, src_path)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from src.services.ai_service import AIService
from src.services.catalog_service import CatalogService
from src.services.message_service import MessageService
from src.services.session_service import SessionService
from src.utils.whatsapp_client import WhatsAppClient
from src.repositories.message_repository import MessageRepository
from src.models.message import Message, MessageRole
from src.config import GEMINI_API_KEY, WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN, WHATSAPP_PHONE_ID, PROJECT_ID

class CriticalComponentTester:
    """–¢–µ—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = time.time()
        
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   {details}")
        self.test_results[test_name] = success
        
    async def test_ai_service(self):
        """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞ (Gemini)"""
        print("\n=== –¢–ï–°–¢ AI –°–ï–†–í–ò–°–ê (GEMINI) ===")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
            ai_service = AIService(GEMINI_API_KEY)
            
            # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            test_messages = [
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–ü—Ä–∏–≤–µ—Ç"
                )
            ]
            
            response = await ai_service.generate_response(test_messages)
            if response and len(response) > 10:
                self.log_test("AI –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", True, f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                self.log_test("AI –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", False, "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return False
                
            # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            lang_ru = ai_service.detect_language("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
            lang_en = ai_service.detect_language("Hello, how are you?")
            
            if lang_ru == 'ru' and lang_en == 'en':
                self.log_test("AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞", True, f"RU: {lang_ru}, EN: {lang_en}")
            else:
                self.log_test("AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞", False, f"RU: {lang_ru}, EN: {lang_en}")
                return False
                
            return True
            
        except Exception as e:
            self.log_test("AI —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_catalog_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("\n=== –¢–ï–°–¢ –°–ï–†–í–ò–°–ê –ö–ê–¢–ê–õ–û–ì–ê ===")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_service = CatalogService(WHATSAPP_CATALOG_ID, WHATSAPP_TOKEN)
            
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
            products = await catalog_service.get_available_products()
            if products and len(products) > 0:
                self.log_test("–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", True, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                self.log_test("–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", False, "–¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return False
                
            # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
            if products:
                test_product = products[0]
                retailer_id = test_product.get('retailer_id')
                if retailer_id:
                    validation = await catalog_service.validate_product(retailer_id)
                    if validation['valid']:
                        self.log_test("–ö–∞—Ç–∞–ª–æ–≥ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞", True, f"–¢–æ–≤–∞—Ä {test_product.get('name')} –≤–∞–ª–∏–¥–µ–Ω")
                    else:
                        self.log_test("–ö–∞—Ç–∞–ª–æ–≥ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞", False, "–¢–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                        return False
                        
            return True
            
        except Exception as e:
            self.log_test("–ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_database_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\n=== –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            message_service = MessageService()
            session_service = SessionService()
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            test_sender_id = f"test_user_{int(time.time())}"
            session_id = await session_service.get_or_create_session_id(test_sender_id)
            
            if session_id:
                self.log_test("–ë–î —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏", True, f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
            else:
                self.log_test("–ë–î —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, "–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return False
                
            # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = Message(
                sender_id=test_sender_id,
                session_id=session_id,
                role=MessageRole.USER,
                content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            
            message_id = await message_service.add_message(test_message)
            if message_id:
                self.log_test("–ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", True, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {message_id}")
            else:
                self.log_test("–ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", False, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                return False
                
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            history = await message_service.get_conversation_history(session_id, limit=10)
            if history and len(history) > 0:
                self.log_test("–ë–î –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                self.log_test("–ë–î –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏", False, "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                return False
                
            return True
            
        except Exception as e:
            self.log_test("–ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_whatsapp_client(self):
        """–¢–µ—Å—Ç WhatsApp –∫–ª–∏–µ–Ω—Ç–∞"""
        print("\n=== –¢–ï–°–¢ WHATSAPP –ö–õ–ò–ï–ù–¢–ê ===")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            whatsapp_client = WhatsAppClient()
            
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if whatsapp_client.token and whatsapp_client.phone_id:
                self.log_test("WhatsApp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", True, "–¢–æ–∫–µ–Ω –∏ Phone ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                self.log_test("WhatsApp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ Phone ID")
                return False
                
            # –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            formatted_text = whatsapp_client._add_flower_emoji(test_text)
            if "üå∏" in formatted_text:
                self.log_test("WhatsApp —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", True, "–≠–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.log_test("WhatsApp —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", False, "–≠–º–æ–¥–∑–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                return False
                
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–∞—Ö
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ –≤ WhatsApp
            self.log_test("WhatsApp –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", True, "–ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return True
            
        except Exception as e:
            self.log_test("WhatsApp –∫–ª–∏–µ–Ω—Ç", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n=== –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
        
        try:
            # –¢–µ—Å—Ç 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            critical_vars = {
                'GEMINI_API_KEY': GEMINI_API_KEY,
                'WHATSAPP_TOKEN': WHATSAPP_TOKEN,
                'WHATSAPP_PHONE_ID': WHATSAPP_PHONE_ID,
                'PROJECT_ID': PROJECT_ID
            }
            
            missing_vars = []
            for var_name, var_value in critical_vars.items():
                if not var_value:
                    missing_vars.append(var_name)
                    
            if not missing_vars:
                self.log_test("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", True, "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                self.log_test("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_vars)}")
                return False
                
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
            if len(GEMINI_API_KEY) > 20:
                self.log_test("Gemini API –∫–ª—é—á", True, "API –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã")
            else:
                self.log_test("Gemini API –∫–ª—é—á", False, "API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
                
            if len(WHATSAPP_TOKEN) > 50:
                self.log_test("WhatsApp —Ç–æ–∫–µ–Ω", True, "–¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã")
            else:
                self.log_test("WhatsApp —Ç–æ–∫–µ–Ω", False, "–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
                
            return True
            
        except Exception as e:
            self.log_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ü–ï–†–ï–î –î–ï–ü–õ–û–ï–ú")
        print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        tests = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration),
            ("AI —Å–µ—Ä–≤–∏—Å", self.test_ai_service),
            ("–ö–∞—Ç–∞–ª–æ–≥", self.test_catalog_service),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database_operations),
            ("WhatsApp", self.test_whatsapp_client)
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results[test_name] = result
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {test_name}: {e}")
                results[test_name] = False
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(results)
        passed_tests = sum(1 for result in results.values() if result)
        failed_tests = total_tests - passed_tests
        
        print(f"\n{'='*60}")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í")
        print(f"{'='*60}")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests} ‚úÖ")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time.time() - self.start_time:.2f} —Å–µ–∫")
        
        if failed_tests > 0:
            print(f"\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, result in results.items():
                if not result:
                    print(f"   - {test_name}")
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –Ω–∞ 80% –∏–ª–∏ –±–æ–ª—å—à–µ
        if success_rate >= 80:
            print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é.")
            return True
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω.")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CriticalComponentTester()
    success = await tester.run_all_tests()
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 