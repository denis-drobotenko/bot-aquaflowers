import requests
import json
import re
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
url = "https://auraflora-bot-75152239022.asia-southeast1.run.app/api/debug/logs"
response = requests.get(url)
data = response.json()
logs = data['logs']

print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(logs)} –ª–æ–≥–æ–≤")

# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ debug_clean.html
def extractUserMessageFromLog(logMessage):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: 'text': {'body': '–ü—Ä–∏–≤–µ—Ç'}
        jsonMatch = re.search(r"'text':\s*\{'body':\s*'([^']+)'", logMessage)
        if jsonMatch:
            return jsonMatch.group(1).strip()
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        jsonMatch2 = re.search(r'"text":\s*{\s*"body":\s*"([^"]+)"', logMessage)
        if jsonMatch2:
            return jsonMatch2.group(1).strip()
        
    except Exception as e:
        print(f"Error: {e}")
    return ""

def extractBotResponseFromLog(logMessage):
    try:
        # [AI_FINAL_RESULT] Text: –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏, Command: None
        aiMatch = re.search(r'\[AI_FINAL_RESULT\] Text:\s*(.+?)(?:,\s*Command:|$)', logMessage)
        if aiMatch:
            return aiMatch.group(1).strip()
        
        # [WEBHOOK_AI_RESPONSE_TEXT] –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏
        responseMatch = re.search(r'\[WEBHOOK_AI_RESPONSE_TEXT\]\s*(.+)', logMessage)
        if responseMatch:
            return responseMatch.group(1).strip()
        
        # [MESSAGE_SEND_INPUT] Original message: –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏
        sendMatch = re.search(r'\[MESSAGE_SEND_INPUT\] Original message:\s*(.+)', logMessage)
        if sendMatch:
            return sendMatch.group(1).strip()
        
    except Exception as e:
        print(f"Error: {e}")
    return ""

def buildSessionsFromLogs(logs):
    sessions = {}
    
    # –ò—â–µ–º session_id –≤ –ª–æ–≥–∞—Ö
    for log in logs:
        message = log.get('message', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        sessionId = log.get('session_id')
        if not sessionId:
            # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–æ–≥–∞
            sessionMatch = re.search(r'Session[:\s]+([^\s,]+)', message)
            if sessionMatch:
                sessionId = sessionMatch.group(1)
            else:
                # –ò—â–µ–º –≤ webhook –¥–∞–Ω–Ω—ã—Ö
                webhookMatch = re.search(r'from[\'"]?\s*:\s*[\'"]([^\'"]+)[\'"]', message)
                if webhookMatch:
                    sessionId = webhookMatch.group(1) + '_' + datetime.fromisoformat(log.get('timestamp')).strftime('%Y%m%d')
        
        if not sessionId:
            continue
        
        if sessionId not in sessions:
            senderId = sessionId.split('_')[0] if '_' in sessionId else sessionId
            sessions[sessionId] = {
                'session_id': sessionId,
                'sender_id': senderId,
                'message_count': 0,
                'last_message_time': log.get('timestamp')
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if '[WEBHOOK_RAW_MESSAGE]' in message and ('"text"' in message or "'text'" in message):
            sessions[sessionId]['message_count'] += 1
        
        if log.get('timestamp') > sessions[sessionId]['last_message_time']:
            sessions[sessionId]['last_message_time'] = log.get('timestamp')
    
    sessionsList = list(sessions.values())
    sessionsList.sort(key=lambda x: x['last_message_time'], reverse=True)
    
    return sessionsList

def buildMessagesFromLogs(sessionId, logs):
    messages = []
    
    # –ò—â–µ–º –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–ø–æ session_id –∏–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º)
    sessionLogs = []
    for log in logs:
        message = log.get('message', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º session_id
        if log.get('session_id') == sessionId:
            sessionLogs.append(log)
            continue
        
        # –ò—â–µ–º session_id –≤ —Ç–µ–∫—Å—Ç–µ –ª–æ–≥–∞
        sessionMatch = re.search(r'Session[:\s]+([^\s,]+)', message)
        if sessionMatch and sessionMatch.group(1) == sessionId:
            sessionLogs.append(log)
            continue
        
        # –ò—â–µ–º –ø–æ sender_id (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å session_id)
        senderId = sessionId.split('_')[0]
        webhookMatch = re.search(r'from[\'"]?\s*:\s*[\'"]([^\'"]+)[\'"]', message)
        if webhookMatch and webhookMatch.group(1) == senderId:
            sessionLogs.append(log)
            continue
    
    print(f'–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(sessionLogs)} –ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {sessionId}')
    
    # –ò—â–µ–º –ª–æ–≥–∏ —Å AI –æ—Ç–≤–µ—Ç–∞–º–∏ –≤–æ –≤—Å–µ—Ö –ª–æ–≥–∞—Ö
    allAiLogs = [log for log in logs if '[AI_FINAL_RESULT]' in log.get('message', '')]
    print(f'–ù–∞–π–¥–µ–Ω–æ {len(allAiLogs)} –ª–æ–≥–æ–≤ —Å AI –æ—Ç–≤–µ—Ç–∞–º–∏ –≤–æ –≤—Å–µ—Ö –ª–æ–≥–∞—Ö')
    
    for log in sessionLogs:
        message = log.get('message', '')
        timestamp = log.get('timestamp')
        logger = log.get('logger_name', '')
        
        # –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if '[WEBHOOK_RAW_MESSAGE]' in message and ('"text"' in message or "'text'" in message):
            print(f'–ù–∞–π–¥–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –ª–æ–≥: {message[:100]}...')
            content = extractUserMessageFromLog(message)
            print(f'–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}')
            if content:
                messages.append({
                    'role': 'user',
                    'content': content,
                    'timestamp': timestamp
                })
        
        # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        elif '[AI_FINAL_RESULT]' in message or '[WEBHOOK_AI_RESPONSE_TEXT]' in message or '[MESSAGE_SEND_INPUT] Original message:' in message:
            print(f'–ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥—è—â–∏–π –ª–æ–≥: {message[:100]}...')
            content = extractBotResponseFromLog(message)
            print(f'–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}')
            if content:
                messages.append({
                    'role': 'assistant',
                    'content': content,
                    'timestamp': timestamp
                })
    
    messages.sort(key=lambda x: x['timestamp'])
    print(f'–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π')
    return messages

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
print("\n=== –¢–ï–°–¢ –ü–û–°–¢–†–û–ï–ù–ò–Ø –°–ï–°–°–ò–ô ===")
sessions = buildSessionsFromLogs(logs)
print(f"–ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π:")
for session in sessions:
    print(f"  {session['session_id']} - {session['sender_id']} ({session['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π)")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
if sessions:
    print(f"\n=== –¢–ï–°–¢ –ü–û–°–¢–†–û–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –°–ï–°–°–ò–ò {sessions[0]['session_id']} ===")
    messages = buildMessagesFromLogs(sessions[0]['session_id'], logs)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç - {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
    for i, msg in enumerate(messages):
        print(f"  {i+1}. [{msg['role']}] {msg['content'][:50]}...")

print("\n=== –í–°–ï AI-–û–¢–í–ï–¢–´ –° sessionId ===")
for log in logs:
    msg = log.get('message', '')
    if '[AI_FINAL_RESULT]' in msg:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ sessionId –≤ —Ç–µ–∫—Å—Ç–µ
        session_match = re.search(r'Session[:\s]+([^\s,]+)', msg)
        session_id_in_log = session_match.group(1) if session_match else None
        print(f"AI_LOG: session_id_in_log={session_id_in_log}, msg={msg[:100]}...") 