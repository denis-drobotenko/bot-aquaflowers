"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–∞—Ç–æ–≤
"""

import pytest
import asyncio
from src.chat_translation_manager import (
    translate_chat_batch, 
    parse_translated_chat, 
    extract_translated_content,
    format_timestamp,
    extract_order_summary
)

def test_format_timestamp():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è timestamp"""
    from datetime import datetime
    
    # –¢–µ—Å—Ç —Å datetime –æ–±—ä–µ–∫—Ç–æ–º
    dt = datetime(2024, 1, 15, 10, 30)
    assert format_timestamp(dt) == "10:30"
    
    # –¢–µ—Å—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("2024-01-15 10:30:00") == "10:30"
    assert format_timestamp("10:30") == "10:30"
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("10") == "10"

def test_extract_translated_content():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –¢–µ—Å—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
    assert extract_translated_content("–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): –ü—Ä–∏–≤–µ—Ç!") == "–ü—Ä–∏–≤–µ—Ç!"
    assert extract_translated_content("Message 1 (User): Hello!") == "Hello!"
    
    # –¢–µ—Å—Ç –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
    assert extract_translated_content("–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç") == "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç"

def test_extract_order_summary():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞"""
    conversation_history = [
        {
            'role': 'system',
            'content': 'order_info:bouquet=Spirit üå∏'
        },
        {
            'role': 'system', 
            'content': 'order_info:date=–∑–∞–≤—Ç—Ä–∞'
        },
        {
            'role': 'system',
            'content': 'order_info:address=—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
        },
        {
            'role': 'user',
            'content': '–ü—Ä–∏–≤–µ—Ç'
        }
    ]
    
    summary = extract_order_summary(conversation_history)
    
    assert summary['bouquet'] == 'Spirit üå∏'
    assert summary['date'] == '–∑–∞–≤—Ç—Ä–∞'
    assert summary['address'] == '—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
    assert len(summary) == 3

def test_parse_translated_chat():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    original_messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    translated_text = """–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): Hello!
–°–æ–æ–±—â–µ–Ω–∏–µ 2 (ü§ñ –ë–æ—Ç): Hello!"""
    
    result = parse_translated_chat(translated_text, original_messages, 'en')
    
    assert len(result) == 2
    assert result[0]['role'] == 'user'
    assert result[0]['content'] == 'Hello!'
    assert result[0]['lang'] == 'en'
    assert result[1]['role'] == 'model'
    assert result[1]['content'] == 'Hello!'

def test_chat_translation_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
    messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç!', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–∞–¥–∞—é—Ç
    assert format_timestamp('10:30') == '10:30'
    assert extract_translated_content('test: content') == 'content'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    history = [{'role': 'system', 'content': 'order_info:bouquet=Test'}]
    summary = extract_order_summary(history)
    assert summary.get('bouquet') == 'Test'

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–∞—Ç–æ–≤
"""

import pytest
import asyncio
from src.chat_translation_manager import (
    translate_chat_batch, 
    parse_translated_chat, 
    extract_translated_content,
    format_timestamp,
    extract_order_summary
)

def test_format_timestamp():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è timestamp"""
    from datetime import datetime
    
    # –¢–µ—Å—Ç —Å datetime –æ–±—ä–µ–∫—Ç–æ–º
    dt = datetime(2024, 1, 15, 10, 30)
    assert format_timestamp(dt) == "10:30"
    
    # –¢–µ—Å—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("2024-01-15 10:30:00") == "10:30"
    assert format_timestamp("10:30") == "10:30"
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("10") == "10"

def test_extract_translated_content():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –¢–µ—Å—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
    assert extract_translated_content("–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): –ü—Ä–∏–≤–µ—Ç!") == "–ü—Ä–∏–≤–µ—Ç!"
    assert extract_translated_content("Message 1 (User): Hello!") == "Hello!"
    
    # –¢–µ—Å—Ç –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
    assert extract_translated_content("–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç") == "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç"

def test_extract_order_summary():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞"""
    conversation_history = [
        {
            'role': 'system',
            'content': 'order_info:bouquet=Spirit üå∏'
        },
        {
            'role': 'system', 
            'content': 'order_info:date=–∑–∞–≤—Ç—Ä–∞'
        },
        {
            'role': 'system',
            'content': 'order_info:address=—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
        },
        {
            'role': 'user',
            'content': '–ü—Ä–∏–≤–µ—Ç'
        }
    ]
    
    summary = extract_order_summary(conversation_history)
    
    assert summary['bouquet'] == 'Spirit üå∏'
    assert summary['date'] == '–∑–∞–≤—Ç—Ä–∞'
    assert summary['address'] == '—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
    assert len(summary) == 3

def test_parse_translated_chat():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    original_messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    translated_text = """–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): Hello!
–°–æ–æ–±—â–µ–Ω–∏–µ 2 (ü§ñ –ë–æ—Ç): Hello!"""
    
    result = parse_translated_chat(translated_text, original_messages, 'en')
    
    assert len(result) == 2
    assert result[0]['role'] == 'user'
    assert result[0]['content'] == 'Hello!'
    assert result[0]['lang'] == 'en'
    assert result[1]['role'] == 'model'
    assert result[1]['content'] == 'Hello!'

def test_chat_translation_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
    messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç!', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–∞–¥–∞—é—Ç
    assert format_timestamp('10:30') == '10:30'
    assert extract_translated_content('test: content') == 'content'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    history = [{'role': 'system', 'content': 'order_info:bouquet=Test'}]
    summary = extract_order_summary(history)
    assert summary.get('bouquet') == 'Test'

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–∞—Ç–æ–≤
"""

import pytest
import asyncio
from src.chat_translation_manager import (
    translate_chat_batch, 
    parse_translated_chat, 
    extract_translated_content,
    format_timestamp,
    extract_order_summary
)

def test_format_timestamp():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è timestamp"""
    from datetime import datetime
    
    # –¢–µ—Å—Ç —Å datetime –æ–±—ä–µ–∫—Ç–æ–º
    dt = datetime(2024, 1, 15, 10, 30)
    assert format_timestamp(dt) == "10:30"
    
    # –¢–µ—Å—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("2024-01-15 10:30:00") == "10:30"
    assert format_timestamp("10:30") == "10:30"
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert format_timestamp("10") == "10"

def test_extract_translated_content():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –¢–µ—Å—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
    assert extract_translated_content("–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): –ü—Ä–∏–≤–µ—Ç!") == "–ü—Ä–∏–≤–µ—Ç!"
    assert extract_translated_content("Message 1 (User): Hello!") == "Hello!"
    
    # –¢–µ—Å—Ç –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
    assert extract_translated_content("–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç") == "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç"

def test_extract_order_summary():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞"""
    conversation_history = [
        {
            'role': 'system',
            'content': 'order_info:bouquet=Spirit üå∏'
        },
        {
            'role': 'system', 
            'content': 'order_info:date=–∑–∞–≤—Ç—Ä–∞'
        },
        {
            'role': 'system',
            'content': 'order_info:address=—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
        },
        {
            'role': 'user',
            'content': '–ü—Ä–∏–≤–µ—Ç'
        }
    ]
    
    summary = extract_order_summary(conversation_history)
    
    assert summary['bouquet'] == 'Spirit üå∏'
    assert summary['date'] == '–∑–∞–≤—Ç—Ä–∞'
    assert summary['address'] == '—É–ª. –ü—É—à–∫–∏–Ω–∞, 10'
    assert len(summary) == 3

def test_parse_translated_chat():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    original_messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    translated_text = """–°–æ–æ–±—â–µ–Ω–∏–µ 1 (üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): Hello!
–°–æ–æ–±—â–µ–Ω–∏–µ 2 (ü§ñ –ë–æ—Ç): Hello!"""
    
    result = parse_translated_chat(translated_text, original_messages, 'en')
    
    assert len(result) == 2
    assert result[0]['role'] == 'user'
    assert result[0]['content'] == 'Hello!'
    assert result[0]['lang'] == 'en'
    assert result[1]['role'] == 'model'
    assert result[1]['content'] == 'Hello!'

def test_chat_translation_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
    messages = [
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç!', 'timestamp': '10:30'},
        {'role': 'model', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', 'timestamp': '10:31'}
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–∞–¥–∞—é—Ç
    assert format_timestamp('10:30') == '10:30'
    assert extract_translated_content('test: content') == 'content'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    history = [{'role': 'system', 'content': 'order_info:bouquet=Test'}]
    summary = extract_order_summary(history)
    assert summary.get('bouquet') == 'Test'

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 