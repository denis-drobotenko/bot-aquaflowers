#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import re

def extractBotResponseFromLog(logMessage):
    try:
        # [AI_FINAL_RESULT] Text: –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏, Command: None
        aiMatch = re.search(r'\[AI_FINAL_RESULT\] Text:\s*(.+?)(?:,\s*Command:|$)', logMessage)
        if aiMatch:
            return aiMatch.group(1).strip()
        
        # [AI_RESPONSE_GENERATED] Session: 79140775712_20250703-022437 | Text: –ö–æ–Ω–µ—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏ | Command: None
        aiGeneratedMatch = re.search(r'\[AI_RESPONSE_GENERATED\].*?Text:\s*(.+?)(?:\s*\|\s*Command:|$)', logMessage)
        if aiGeneratedMatch:
            return aiGeneratedMatch.group(1).strip()
        
        # [AI_RESPONSE_SAVED] Session: 79140775712_20250703-022437 | Message ID: wamid.HBgLNzkxNDA3NzU3MTIVAgASGBQzQTY5RUI1MEU5MzY3QzUxMENDMQA= | Text: –ö–æ–Ω–µ—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏
        aiSavedMatch = re.search(r'\[AI_RESPONSE_SAVED\].*?Text:\s*(.+?)(?:\s*\|\s*Message ID:|$)', logMessage)
        if aiSavedMatch:
            return aiSavedMatch.group(1).strip()
        
        # [WEBHOOK_AI_RESPONSE_TEXT] –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏
        responseMatch = re.search(r'\[WEBHOOK_AI_RESPONSE_TEXT\]\s*(.+)', logMessage)
        if responseMatch:
            return responseMatch.group(1).strip()
        
        # [MESSAGE_SEND_INPUT] Original message: –î–æ–±—Ä–æ–π –Ω–æ—á–∏, Denis! –†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üå∏
        sendMatch = re.search(r'\[MESSAGE_SEND_INPUT\] Original message:\s*(.+)', logMessage)
        if sendMatch:
            return sendMatch.group(1).strip()
        
    except Exception as e:
        print(f'Error: {e}')
    return ''

def extractUserMessageFromLog(logMessage):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: 'text': {'body': '–ü—Ä–∏–≤–µ—Ç'}
        jsonMatch = re.search(r"'text':\s*\{'body':\s*'([^']+)'", logMessage)
        if jsonMatch:
            return jsonMatch.group(1).strip()
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        jsonMatch2 = re.search(r'"text":\s*{\s*"body":\s*"([^"]+)"', logMessage)
        if jsonMatch2:
            return jsonMatch2.group(1).strip()
        
    except Exception as e:
        print(f'Error: {e}')
    return ''

def test_real_logs():
    print("–ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.get('http://localhost:8000/api/debug/logs')
        if response.status_code == 200:
            logs = response.json()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(logs)} –ª–æ–≥–æ–≤")
            
            # –ò—â–µ–º AI –æ—Ç–≤–µ—Ç—ã
            ai_logs = []
            user_logs = []
            
            for log in logs:
                message = log.get('message', '')
                
                # AI –æ—Ç–≤–µ—Ç—ã
                if any(pattern in message for pattern in [
                    '[AI_FINAL_RESULT]',
                    '[AI_RESPONSE_GENERATED]',
                    '[AI_RESPONSE_SAVED]',
                    '[WEBHOOK_AI_RESPONSE_TEXT]',
                    '[MESSAGE_SEND_INPUT]'
                ]):
                    ai_logs.append(log)
                
                # –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if '[WEBHOOK_RAW_MESSAGE]' in message and ('"text"' in message or "'text'" in message):
                    user_logs.append(log)
            
            print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(ai_logs)} AI –ª–æ–≥–æ–≤:")
            for i, log in enumerate(ai_logs[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                message = log.get('message', '')
                extracted = extractBotResponseFromLog(message)
                print(f"  {i}. {message[:100]}...")
                print(f"     –ò–∑–≤–ª–µ—á–µ–Ω–æ: '{extracted}'")
                print()
            
            print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(user_logs)} –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
            for i, log in enumerate(user_logs[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                message = log.get('message', '')
                extracted = extractUserMessageFromLog(message)
                print(f"  {i}. {message[:100]}...")
                print(f"     –ò–∑–≤–ª–µ—á–µ–Ω–æ: '{extracted}'")
                print()
                
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_real_logs() 