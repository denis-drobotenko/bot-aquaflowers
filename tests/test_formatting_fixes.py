#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π AI
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.json_processor import parse_ai_response, extract_and_fix_json

def test_formatting_preservation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    print("=== –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    # –¢–µ—Å—Ç 1: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    test_json_1 = '''```json
{
  "text": "–ü—Ä–∏–≤–µ—Ç! 

–≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.

–ù–∞–¥–µ—é—Å—å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è!",
  "command": null
}
```'''
    
    print(f"1. –¢–µ—Å—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ JSON:")
    print(f"   –í—Ö–æ–¥–Ω–æ–π JSON:\\n{repr(test_json_1)}")
    
    json_data, user_text = extract_and_fix_json(test_json_1)
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\\n{repr(user_text)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if user_text and '\\n' in user_text:
        print("   ‚úÖ –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    else:
        print("   ‚ùå –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–æ—Ç–µ—Ä—è–Ω—ã")
    
    # –¢–µ—Å—Ç 2: JSON —Å –∞–±–∑–∞—Ü–∞–º–∏
    test_json_2 = '''```json
{
  "text": "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—à –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞ 'Spirit üå∏'.

–ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫—É–¥–∞?

–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 21:00.",
  "command": {
    "type": "save_order_info",
    "bouquet": "Spirit üå∏",
    "retailer_id": "rl7vdxcifo"
  }
}
```'''
    
    print(f"\\n2. –¢–µ—Å—Ç JSON —Å –∞–±–∑–∞—Ü–∞–º–∏:")
    print(f"   –í—Ö–æ–¥–Ω–æ–π JSON:\\n{repr(test_json_2)}")
    
    json_data, user_text = extract_and_fix_json(test_json_2)
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\\n{repr(user_text)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–±–∑–∞—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if user_text and user_text.count('\\n\\n') >= 2:
        print("   ‚úÖ –ê–±–∑–∞—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    else:
        print("   ‚ùå –ê–±–∑–∞—Ü—ã –ø–æ—Ç–µ—Ä—è–Ω—ã")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π JSON –±–µ–∑ markdown
    test_json_3 = '''{
  "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤? üå∏",
  "command": null
}'''
    
    print(f"\\n3. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ JSON:")
    print(f"   –í—Ö–æ–¥–Ω–æ–π JSON:\\n{repr(test_json_3)}")
    
    json_data, user_text = extract_and_fix_json(test_json_3)
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\\n{repr(user_text)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if user_text and "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" in user_text:
        print("   ‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    else:
        print("   ‚ùå –¢–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω")
    
    print("\\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")

def test_parse_ai_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é parse_ai_response"""
    print("\\n=== –¢–µ—Å—Ç parse_ai_response ===")
    
    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç response
    class MockResponse:
        def __init__(self, text):
            self.text = text
            self.candidates = [MockCandidate(text)]
    
    class MockCandidate:
        def __init__(self, text):
            self.content = MockContent(text)
    
    class MockContent:
        def __init__(self, text):
            self.parts = [MockPart(text)]
    
    class MockPart:
        def __init__(self, text):
            self.text = text
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
    mock_response_1 = MockResponse('''```json
{
  "text": "–ü—Ä–∏–≤–µ—Ç! 

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.",
  "command": null
}
```''')
    
    print(f"1. –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON:")
    ai_text, ai_command = parse_ai_response(mock_response_1)
    print(f"   –¢–µ–∫—Å—Ç: {repr(ai_text)}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {ai_command}")
    
    if ai_text and '\\n' in ai_text:
        print("   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    else:
        print("   ‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None)
    mock_response_2 = MockResponse("–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ JSON")
    
    print(f"\\n2. –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON:")
    ai_text, ai_command = parse_ai_response(mock_response_2)
    print(f"   –¢–µ–∫—Å—Ç: {ai_text}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {ai_command}")
    
    if ai_text is None and ai_command is None:
        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    else:
        print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    
    print("\\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")

if __name__ == "__main__":
    test_formatting_preservation()
    test_parse_ai_response() 
 