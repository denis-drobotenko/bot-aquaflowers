#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import json
import re
from datetime import datetime

def test_session_grouping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å–µ—Å—Å–∏–π –ø–æ sender_id"""
    print("üß™ –¢–ï–°–¢ –ì–†–£–ü–ü–ò–†–û–í–ö–ò –°–ï–°–°–ò–ô")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ session_id –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_logs = [
        {
            "timestamp": "2024-12-19T10:00:00Z",
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ü—Ä–∏–≤–µ—Ç'",
            "session_id": "1234567890_20241219-100000"
        },
        {
            "timestamp": "2024-12-19T10:05:00Z", 
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ö–∞–∫ –¥–µ–ª–∞?'",
            "session_id": "1234567890_20241219-100500"
        },
        {
            "timestamp": "2024-12-19T10:10:00Z",
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ü–æ–∫–∞'",
            "session_id": "1234567890_20241219-101000"
        }
    ]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ debug_clean.html
    sessions = {}
    
    for log in test_logs:
        message = log.get('message', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º sender_id
        webhook_match = re.search(r"from['\"]?\s*:\s*['\"]([^'\"]+)['\"]", message)
        if webhook_match:
            sender_id = webhook_match.group(1)
            
            if sender_id not in sessions:
                sessions[sender_id] = {
                    'session_id': sender_id,
                    'sender_id': sender_id,
                    'message_count': 0,
                    'last_message_time': log['timestamp'],
                    'unique_messages': set()
                }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if '[WEBHOOK_RAW_MESSAGE]' in message and ('"text"' in message or "'text'" in message):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                text_match = re.search(r"text['\"]?\s*:\s*['\"]([^'\"]+)['\"]", message)
                if text_match:
                    content = text_match.group(1)
                    sessions[sender_id]['unique_messages'].add(content)
                    sessions[sender_id]['message_count'] = len(sessions[sender_id]['unique_messages'])
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{content}' –¥–ª—è {sender_id}")
            
            if log['timestamp'] > sessions[sender_id]['last_message_time']:
                sessions[sender_id]['last_message_time'] = log['timestamp']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
    sessions_list = []
    for session in sessions.values():
        session_copy = session.copy()
        del session_copy['unique_messages']
        sessions_list.append(session_copy)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions_list)}")
    for session in sessions_list:
        print(f"  - {session['sender_id']}: {session['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã
    if len(sessions_list) == 1 and sessions_list[0]['message_count'] == 3:
        print("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π")
    
    return sessions_list

def test_reply_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ reply –∏–∑ –ª–æ–≥–æ–≤"""
    print("\nüß™ –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø REPLY")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å reply
    test_logs = [
        {
            "message": "[WEBHOOK_REPLY] Reply to message ID: wamid.1234567890",
            "expected_reply": "wamid.1234567890"
        },
        {
            "message": '{"context": {"id": "wamid.9876543210"}}',
            "expected_reply": "wamid.9876543210"
        },
        {
            "message": "{'context': {'id': 'wamid.1111111111'}}",
            "expected_reply": "wamid.1111111111"
        }
    ]
    
    for i, test_log in enumerate(test_logs):
        message = test_log['message']
        expected = test_log['expected_reply']
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è reply –∏–∑ debug_clean.html
        reply_to = None
        
        # –ü–æ–∏—Å–∫ WEBHOOK_REPLY
        reply_match = re.search(r'\[WEBHOOK_REPLY\] Reply to message ID: ([^\s,]+)', message)
        if reply_match:
            reply_to = reply_match.group(1)
        else:
            # –ü–æ–∏—Å–∫ context.id –≤ JSON
            context_match = re.search(r'"context":\s*{\s*"id":\s*"([^"]+)"', message)
            if context_match:
                reply_to = context_match.group(1)
            else:
                # –ü–æ–∏—Å–∫ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
                single_quote_match = re.search(r"'context':\s*\{'id':\s*'([^']+)'", message)
                if single_quote_match:
                    reply_to = single_quote_match.group(1)
        
        if reply_to == expected:
            print(f"‚úÖ –¢–µ—Å—Ç {i+1}: Reply –∏–∑–≤–ª–µ—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ - {reply_to}")
        else:
            print(f"‚ùå –¢–µ—Å—Ç {i+1}: –û–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {reply_to}")

def test_message_deduplication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–ï–°–¢ –£–°–¢–†–ê–ù–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    test_logs = [
        {
            "timestamp": "2024-12-19T10:00:00Z",
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ü—Ä–∏–≤–µ—Ç'"
        },
        {
            "timestamp": "2024-12-19T10:00:01Z", 
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ü—Ä–∏–≤–µ—Ç'"
        },
        {
            "timestamp": "2024-12-19T10:00:02Z",
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ü—Ä–∏–≤–µ—Ç'"
        },
        {
            "timestamp": "2024-12-19T10:05:00Z",
            "message": "[WEBHOOK_RAW_MESSAGE] from: '1234567890' text: '–ö–∞–∫ –¥–µ–ª–∞?'"
        }
    ]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    messages = []
    seen_messages = set()
    
    for log in test_logs:
        message = log['message']
        
        if '[WEBHOOK_RAW_MESSAGE]' in message and ('"text"' in message or "'text'" in message):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            text_match = re.search(r"text['\"]?\s*:\s*['\"]([^'\"]+)['\"]", message)
            if text_match:
                content = text_match.group(1)
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{content}'")
                
                if content not in seen_messages:
                    seen_messages.add(content)
                    messages.append({
                        'content': content,
                        'timestamp': log['timestamp']
                    })
                    print(f"  -> –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤–æ–µ")
                else:
                    print(f"  -> –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç")
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    for msg in messages:
        print(f"  - {msg['content']} ({msg['timestamp']})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
    if len(messages) == 2:  # "–ü—Ä–∏–≤–µ—Ç" –∏ "–ö–∞–∫ –¥–µ–ª–∞?"
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô DEBUG –ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("=" * 60)
    
    test_session_grouping()
    test_reply_extraction()
    test_message_deduplication()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ http://localhost:8080/debug_clean.html")

if __name__ == "__main__":
    main() 