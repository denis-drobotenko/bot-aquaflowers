#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /newses –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
"""

import sys
import os
import pytest
import asyncio
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.ai_service import AIService
from src.services.message_service import MessageService
from src.services.session_service import SessionService
from src.models.message import Message, MessageRole
from src.config.settings import GEMINI_API_KEY

@pytest.mark.asyncio
async def test_newses_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /newses"""
    print("=== –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /NEWSES ===")
    
    session_service = SessionService()
    message_service = MessageService()
    
    sender_id = "test_user_newses_fix"
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
    initial_session_id = await session_service.get_or_create_session_id(sender_id)
    print(f"1. –ù–∞—á–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: {initial_session_id}")
    
    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
    print("2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é")
    
    user_message = Message(
        sender_id=sender_id,
        session_id=initial_session_id,
        role=MessageRole.USER,
        content="–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç."
    )
    await message_service.add_message_to_conversation(user_message)
    
    ai_message = Message(
        sender_id=sender_id,
        session_id=initial_session_id,
        role=MessageRole.ASSISTANT,
        content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )
    await message_service.add_message_to_conversation(ai_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    history = await message_service.get_conversation_history_for_ai(initial_session_id, limit=10)
    assert len(history) >= 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(history)}"
    print(f"‚úÖ –í –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /newses
    print("3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /newses")
    new_session_id = await session_service.create_new_session_after_order(sender_id)
    print(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {new_session_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–π
    assert new_session_id != initial_session_id, "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–π"
    print("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–π")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    new_history = await message_service.get_conversation_history_for_ai(new_session_id, limit=10)
    assert len(new_history) == 0, f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(new_history)} —Å–æ–æ–±—â–µ–Ω–∏–π"
    print("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞—è")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ—Ç—Ä–æ–Ω—É—Ç–æ–π
    old_history = await message_service.get_conversation_history_for_ai(initial_session_id, limit=10)
    assert len(old_history) >= 2, f"–°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(old_history)}"
    print("‚úÖ –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ—Ç—Ä–æ–Ω—É—Ç–æ–π")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
    current_session_id = await session_service.get_or_create_session_id(sender_id)
    assert current_session_id == new_session_id, f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–æ –∞–∫—Ç–∏–≤–Ω–∞ {current_session_id}"
    print("‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π")
    
    # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /newses –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç AI –≤ –ë–î
    print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /newses –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç AI –≤ –ë–î")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /newses
    from src.main import process_text_message
    
    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sent_messages = []
    async def fake_send_message(to, msg):
        sent_messages.append({'to': to, 'message': msg})
        return "fake_message_id"
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
    import src.utils.whatsapp_client as whatsapp_client
    original_send = whatsapp_client.send_text_message
    whatsapp_client.send_text_message = fake_send_message
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /newses
        response = await process_text_message(sender_id, "/newses", "TestUser")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        assert "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞" in response, f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {response}"
        assert "üå∏" in response, f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏: {response}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç AI
        current_session = await session_service.get_or_create_session_id(sender_id)
        new_history_after = await message_service.get_conversation_history_for_ai(current_session, limit=10)
        assert len(new_history_after) == 0, f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /newses, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(new_history_after)} —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /newses —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –æ—Ç–≤–µ—Ç AI –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        whatsapp_client.send_text_message = original_send
    
    print("\n=== –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /NEWSES –ü–†–û–ô–î–ï–ù ===")

@pytest.mark.asyncio
async def test_json_parsing_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI"""
    print("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê JSON ===")
    
    ai_service = AIService(GEMINI_API_KEY)
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    correct_json = '''```json
{
  "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤?",
  "text_en": "Hello! Would you like to see our flower catalog?",
  "text_thai": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏´‡∏°?",
  "command": null
}
```'''
    
    text, text_en, text_thai, command = ai_service.parse_ai_response(correct_json)
    
    assert text == "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤?", f"–ù–µ–≤–µ—Ä–Ω—ã–π text: {text}"
    assert text_en == "Hello! Would you like to see our flower catalog?", f"–ù–µ–≤–µ—Ä–Ω—ã–π text_en: {text_en}"
    assert text_thai == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏´‡∏°?", f"–ù–µ–≤–µ—Ä–Ω—ã–π text_thai: {text_thai}"
    assert command is None, f"–ù–µ–≤–µ—Ä–Ω—ã–π command: {command}"
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 2: JSON —Å –∫–æ–º–∞–Ω–¥–æ–π
    print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Å –∫–æ–º–∞–Ω–¥–æ–π")
    json_with_command = '''```json
{
  "text": "–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ç–∞–ª–æ–≥!",
  "text_en": "Sending catalog!",
  "text_thai": "‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å!",
  "command": {
    "type": "send_catalog"
  }
}
```'''
    
    text, text_en, text_thai, command = ai_service.parse_ai_response(json_with_command)
    
    assert text == "–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ç–∞–ª–æ–≥!", f"–ù–µ–≤–µ—Ä–Ω—ã–π text: {text}"
    assert command is not None, "Command –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ None"
    assert command.get('type') == 'send_catalog', f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {command}"
    print("‚úÖ JSON —Å –∫–æ–º–∞–Ω–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 3: JSON –±–µ–∑ markdown
    print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON –±–µ–∑ markdown")
    json_without_markdown = '''{
  "text": "–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç",
  "text_en": "Simple answer",
  "text_thai": "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"
}'''
    
    text, text_en, text_thai, command = ai_service.parse_ai_response(json_without_markdown)
    
    assert text == "–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", f"–ù–µ–≤–µ—Ä–Ω—ã–π text: {text}"
    assert text_en == "Simple answer", f"–ù–µ–≤–µ—Ä–Ω—ã–π text_en: {text_en}"
    assert text_thai == "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ", f"–ù–µ–≤–µ—Ä–Ω—ã–π text_thai: {text_thai}"
    print("‚úÖ JSON –±–µ–∑ markdown –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
    print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    invalid_json = "–≠—Ç–æ –Ω–µ JSON"
    
    text, text_en, text_thai, command = ai_service.parse_ai_response(invalid_json)
    
    assert text == invalid_json, f"–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"
    assert text_en == invalid_json, f"–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_en}"
    assert text_thai == invalid_json, f"–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_thai}"
    assert command is None, f"–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON command –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None: {command}"
    print("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 5: –ü—É—Å—Ç–æ–π JSON
    print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π JSON")
    empty_json = '''```json
{
  "text": "",
  "text_en": "",
  "text_thai": ""
}
```'''
    
    text, text_en, text_thai, command = ai_service.parse_ai_response(empty_json)
    
    assert text == empty_json, f"–ü—Ä–∏ –ø—É—Å—Ç–æ–º text –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"
    print("‚úÖ –ü—É—Å—Ç–æ–π JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    print("\n=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê JSON –ü–†–û–ô–î–ï–ù ===")

@pytest.mark.asyncio
async def test_conversation_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É conversations"""
    print("=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ CONVERSATIONS ===")
    
    message_service = MessageService()
    session_service = SessionService()
    
    sender_id = "test_user_conversation_structure"
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = await session_service.get_or_create_session_id(sender_id)
    print(f"1. –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ conversations")
    
    user_message = Message(
        sender_id=sender_id,
        session_id=session_id,
        role=MessageRole.USER,
        content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        content_en="Test user message",
        content_thai="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    )
    
    result = await message_service.add_message_to_conversation(user_message)
    assert result == "success", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {result}"
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    ai_message = Message(
        sender_id=sender_id,
        session_id=session_id,
        role=MessageRole.ASSISTANT,
        content="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI",
        content_en="Test AI response",
        content_thai="‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á AI ‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
    )
    
    result = await message_service.add_message_to_conversation(ai_message)
    assert result == "success", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è AI: {result}"
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ AI –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = await message_service.get_conversation_history_for_ai(session_id, limit=10)
    assert len(history) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(history)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ç–æ—Ä–∏–∏
    assert history[0]['role'] == 'user', f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {history[0]}"
    assert history[0]['content'] == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {history[0]}"
    
    assert history[1]['role'] == 'assistant', f"–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç AI: {history[1]}"
    assert history[1]['content'] == "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI", f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {history[1]}"
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ conversations —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ CONVERSATIONS –ü–†–û–ô–î–ï–ù ===")

if __name__ == "__main__":
    asyncio.run(test_newses_command())
    asyncio.run(test_json_parsing_fixes())
    asyncio.run(test_conversation_structure()) 