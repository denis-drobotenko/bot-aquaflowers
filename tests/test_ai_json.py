#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON –æ—Ç–≤–µ—Ç–æ–≤ AI
"""

import sys
import os
import asyncio
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.ai_service import AIService
from src.models.message import Message, MessageRole
from src.config.settings import GEMINI_API_KEY

async def test_ai_json():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç JSON –æ—Ç–≤–µ—Ç—ã AI"""
    print("=== –¢–ï–°–¢ JSON –û–¢–í–ï–¢–û–í AI ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
        ai_service = AIService(GEMINI_API_KEY)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ...")
        test_messages = [
            Message(
                sender_id="test",
                session_id="test",
                role=MessageRole.USER,
                content="–ü—Ä–∏–≤–µ—Ç!"
            )
        ]
        
        ai_response = await ai_service.generate_response(test_messages, user_lang='ru')
        print(f"   ‚úÖ –û—Ç–≤–µ—Ç AI –ø–æ–ª—É—á–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(f"   {ai_response}")
        print()
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ JSON
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON...")
        ai_text, ai_text_en, ai_text_thai, ai_command = ai_service.parse_ai_response(ai_response)
        
        print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω:")
        print(f"   üìù text: {ai_text}")
        print(f"   üìù text_en: {ai_text_en}")
        print(f"   üìù text_thai: {ai_text_thai}")
        print(f"   üìù command: {ai_command}")
        print()
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞...")
        test_messages = [
            Message(
                sender_id="test",
                session_id="test",
                role=MessageRole.USER,
                content="–ü–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤"
            )
        ]
        
        ai_response = await ai_service.generate_response(test_messages, user_lang='ru')
        print(f"   ‚úÖ –û—Ç–≤–µ—Ç AI –ø–æ–ª—É—á–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(f"   {ai_response}")
        print()
        
        # –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã...")
        ai_text, ai_text_en, ai_text_thai, ai_command = ai_service.parse_ai_response(ai_response)
        
        print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω:")
        print(f"   üìù text: {ai_text}")
        print(f"   üìù command: {ai_command}")
        print()
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_ai_json())
    if not success:
        sys.exit(1) 