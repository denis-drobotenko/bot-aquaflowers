#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ JSON-–ø–æ–¥—Ö–æ–¥–∞ AI
"""

import asyncio
import sys
import os
import pytest

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.stdout.encoding.lower() != 'utf-8':
    sys.stdout.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
current_dir = os.path.dirname(__file__)
# –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
src_path = os.path.join(current_dir, '..', 'src')
sys.path.insert(0, src_path)

from src import ai_manager, command_handler

@pytest.mark.asyncio
async def test_json_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π JSON-–ø–æ–¥—Ö–æ–¥ AI"""
    print("=== –¢–ï–°–¢ JSON AI ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sender_id –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    sender_id = "test_user_json_ai"
    
    # –¢–µ—Å—Ç 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    print("\n1. –¢–µ—Å—Ç: '–ü—Ä–∏–≤–µ—Ç'")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = [
        {'role': 'user', 'parts': [{'text': '–ü—Ä–∏–≤–µ—Ç'}]}
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_text, ai_commands = ai_manager.get_ai_response("test_session1", history)
    print(f"AI –æ—Ç–≤–µ—Ç: text='{ai_text}', commands={ai_commands}")
    
    if ai_commands:
        print("‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        command_results = await command_handler.handle_commands(sender_id, "test_session1", ai_commands)
        print(f"‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {command_results}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if ai_text and ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in ai_text or "AURAFLORA" in ai_text):
        print("‚úÖ AI –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    
    if ai_commands and len(ai_commands) > 0:
        print("‚úÖ AI –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã")
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞
    print("\n2. –¢–µ—Å—Ç: '–ü–æ–∫–∞–∂–∏ –∫–∞—Ç–∞–ª–æ–≥'")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = [
        {'role': 'user', 'parts': [{'text': '–ü—Ä–∏–≤–µ—Ç'}]},
        {'role': 'model', 'parts': [{'text': '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AURAFLORA!'}]},
        {'role': 'user', 'parts': [{'text': '–ü–æ–∫–∞–∂–∏ –∫–∞—Ç–∞–ª–æ–≥'}]}
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_text, ai_commands = ai_manager.get_ai_response("test_session2", history)
    print(f"AI –æ—Ç–≤–µ—Ç: text='{ai_text}', commands={ai_commands}")
    
    if ai_commands:
        print("‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        command_results = await command_handler.handle_commands(sender_id, "test_session2", ai_commands)
        print(f"‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {command_results}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if ai_text and ("–∫–∞—Ç–∞–ª–æ–≥" in ai_text.lower() or "—Ü–≤–µ—Ç" in ai_text.lower()):
        print("‚úÖ AI –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    
    if ai_commands and len(ai_commands) > 0:
        print("‚úÖ AI –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã")
    
    # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    print("\n3. –¢–µ—Å—Ç: '–•–æ—á—É —Ä–æ–∑–æ–≤—ã–µ —Ä–æ–∑—ã'")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = [
        {'role': 'user', 'parts': [{'text': '–ü—Ä–∏–≤–µ—Ç'}]},
        {'role': 'model', 'parts': [{'text': '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AURAFLORA!'}]},
        {'role': 'user', 'parts': [{'text': '–•–æ—á—É —Ä–æ–∑–æ–≤—ã–µ —Ä–æ–∑—ã'}]}
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_text, ai_commands = ai_manager.get_ai_response("test_session3", history)
    print(f"AI –æ—Ç–≤–µ—Ç: text='{ai_text}', commands={ai_commands}")
    
    if ai_commands:
        print("‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        command_results = await command_handler.handle_commands(sender_id, "test_session3", ai_commands)
        print(f"‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {command_results}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if ai_text and ("–∑–∞–ø–∏—Å–∞–ª" in ai_text.lower() or "–≤—ã–±–æ—Ä" in ai_text.lower()):
        print("‚úÖ AI –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    
    if ai_commands and len(ai_commands) > 0:
        print("‚úÖ AI –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã")

    # –¢–µ—Å—Ç 4: –ß–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\n4. –¢–µ—Å—Ç: –ß–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è AI (–±–µ–∑ order_info, user_info)")
    history = [
        {'role': 'user', 'parts': [{'text': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!'}]},
        {'role': 'model', 'parts': [{'text': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤? üå∏'}]},
        {'role': 'user', 'parts': [{'text': '–î–∞, –ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥'}]},
        {'role': 'model', 'parts': [{'text': '–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º!'}]},
        {'role': 'user', 'parts': [{'text': '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±—É–∫–µ—Ç Spirit üå∏'}]},
    ]
    ai_text, ai_commands = ai_manager.get_ai_response("test_session_clean", history)
    print(f"AI –æ—Ç–≤–µ—Ç: text='{ai_text}', commands={ai_commands}")
    if ai_commands:
        print("‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        command_results = await command_handler.handle_commands(sender_id, "test_session_clean", ai_commands)
        print(f"‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {command_results}")
    if ai_text:
        print("‚úÖ AI –¥–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
    if ai_commands:
        print("‚úÖ AI –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã!")
    else:
        print("‚ùå AI –Ω–µ –¥–∞–ª –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    asyncio.run(test_json_ai()) 