#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import os
import sys
from datetime import datetime
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append('src')

from src.services.ai_service import AIService
from src.models.message import Message, MessageRole

async def test_ai_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞...")
    ai_service = AIService(api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_cases = [
        {
            "name": "–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "messages": [
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–ü—Ä–∏–≤–µ—Ç",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="Hello",
                    content_thai="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
                )
            ],
            "user_lang": "ru",
            "sender_name": "Test User",
            "is_first_message": True
        },
        {
            "name": "–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞",
            "messages": [
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="Good day, I'd like to order a bouquet",
                    content_thai="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ"
                ),
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–ü—Ä–∏–≤–µ—Ç",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="Hello",
                    content_thai="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
                )
            ],
            "user_lang": "ru",
            "sender_name": "Test User",
            "is_first_message": False
        },
        {
            "name": "–í—ã–±–æ—Ä –±—É–∫–µ—Ç–∞",
            "messages": [
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±—É–∫–µ—Ç Pink peony 15",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="I like the Pink peony 15 bouquet",
                    content_thai="‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ Pink peony 15"
                ),
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="Good day, I'd like to order a bouquet",
                    content_thai="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ"
                ),
                Message(
                    sender_id="test_user",
                    session_id="test_session",
                    role=MessageRole.USER,
                    content="–ü—Ä–∏–≤–µ—Ç",
                    timestamp=datetime.now(pytz.UTC),
                    content_en="Hello",
                    content_thai="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
                )
            ],
            "user_lang": "ru",
            "sender_name": "Test User",
            "is_first_message": False
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢ {i}: {test_case['name']}")
        print(f"{'='*60}")
        
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI...")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(test_case['messages'])}")
            print(f"   –Ø–∑—ã–∫: {test_case['user_lang']}")
            print(f"   –ò–º—è: {test_case['sender_name']}")
            print(f"   –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_case['is_first_message']}")
            
            # –í—ã–∑—ã–≤–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
            start_time = datetime.now()
            result = await ai_service.generate_response(
                messages=test_case['messages'],
                user_lang=test_case['user_lang'],
                sender_name=test_case['sender_name'],
                is_first_message=test_case['is_first_message']
            )
            end_time = datetime.now()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text, text_en, text_thai, command = result
            
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end_time - start_time).total_seconds():.2f} —Å–µ–∫")
            print(f"\nüì• –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"   text: '{text}'")
            print(f"   text_en: '{text_en}'")
            print(f"   text_thai: '{text_thai}'")
            print(f"   command: {command}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if not text:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            elif command is None:
                print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            else:
                print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AI —Å–µ—Ä–≤–∏—Å–∞...")
    asyncio.run(test_ai_service())
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!") 