#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ reply —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append('.')

from src.services.ai_service import AIService
from src.models.message import Message, MessageRole
from src.config.settings import GEMINI_API_KEY

async def test_reply_selection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É reply —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
    ai_service = AIService(GEMINI_API_KEY)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å reply
    messages = [
        Message(
            role=MessageRole.ASSISTANT,
            content="–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç —Å —Ñ–æ—Ç–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
            timestamp="2025-07-05T04:31:40"
        ),
        Message(
            role=MessageRole.ASSISTANT,
            content="Pretty üòç - 2 600,00 ‡∏ø",
            timestamp="2025-07-05T04:31:45"
        ),
        Message(
            role=MessageRole.USER,
            content="–¥–∞ (–æ—Ç–≤–µ—Ç –Ω–∞: Pretty üòç - 2 600,00 ‡∏ø)",
            timestamp="2025-07-05T04:32:00"
        )
    ]
    
    print("=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ reply —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞ ===")
    print(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
    for i, msg in enumerate(messages):
        print(f"{i+1}. [{msg.role.value}] {msg.content}")
    
    print("\n=== –û—Ç–≤–µ—Ç AI ===")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response, response_en, response_thai, command = await ai_service.generate_response(
        messages, user_lang='ru', sender_name="Test User"
    )
    
    print(f"–û—Ç–≤–µ—Ç: {response}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    if command and command.get('type') == 'save_order_info':
        print(f"‚úÖ –ë—É–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {command.get('bouquet')}")
        print(f"‚úÖ Retailer ID: {command.get('retailer_id')}")
    else:
        print("‚ùå –ë—É–∫–µ—Ç –ù–ï –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_reply_selection()) 