#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(__file__))

from src.config.logging_config import setup_logging_by_environment
from src.services.ai_service import AIService
from src.services.order_service import OrderService
from src.services.command_service import CommandService
from src.services.message_service import MessageService
from src.services.session_service import SessionService
from src.services.user_service import UserService
from src.services.message_processor import MessageProcessor
from src.handlers.webhook_handler import WebhookHandler
from src.models.message import Message, MessageRole
from src.models.order import OrderStatus
from src.config.settings import GEMINI_API_KEY


async def test_all_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging_by_environment()
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    # –¢–µ—Å—Ç 1: AI Service
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI Service...")
    try:
        ai_service = AIService(GEMINI_API_KEY)
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        lang = ai_service.detect_language("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {lang}")
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        translated = ai_service.translate_text("Hello world", "en", "ru")
        print(f"   –ü–µ—Ä–µ–≤–æ–¥: {translated}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ AI Service: {e}")
    
    # –¢–µ—Å—Ç 2: Order Service
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Order Service...")
    try:
        order_service = OrderService()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        order = await order_service.get_or_create_order("test_session_123", "test_user_456")
        print(f"   –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: {order.order_id}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        item_data = {"bouquet": "–†–æ–∑–∞ –∫—Ä–∞—Å–Ω–∞—è", "quantity": 2, "price": 1500}
        order_id = await order_service.add_item("test_session_123", "test_user_456", item_data)
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑: {order_id}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        await order_service.update_order_status("test_session_123", "test_user_456", OrderStatus.READY)
        print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Order Service: {e}")
    
    # –¢–µ—Å—Ç 3: Command Service
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Command Service...")
    try:
        command_service = CommandService()
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        command = {
            "type": "add_order_item",
            "bouquet": "–¢—é–ª—å–ø–∞–Ω –∂–µ–ª—Ç—ã–π",
            "quantity": 1,
            "price": 800
        }
        result = await command_service.handle_command("test_user_456", "test_session_123", command)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result['status']}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Command Service: {e}")
    
    # –¢–µ—Å—Ç 4: Session Service
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Session Service...")
    try:
        session_service = SessionService()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session_id = await session_service.get_or_create_session_id("test_user_789")
        print(f"   –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await session_service.get_user_info("test_user_789")
        print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Session Service: {e}")
    
    # –¢–µ—Å—Ç 5: Message Service
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Message Service...")
    try:
        message_service = MessageService()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = await message_service.get_conversation_history_for_ai("test_session_123", limit=10)
        print(f"   –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Message Service: {e}")
    
    # –¢–µ—Å—Ç 6: User Service
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º User Service...")
    try:
        user_service = UserService()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user("test_user_999")
        print(f"   –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user is not None}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ User Service: {e}")
    
    # –¢–µ—Å—Ç 7: Message Processor
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Message Processor...")
    try:
        message_processor = MessageProcessor()
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message_processor.process_incoming_message(
            from_number="+1234567890",
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            session_id="test_session_123",
            sender_id="test_user_456"
        )
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Message Processor: {e}")
    
    # –¢–µ—Å—Ç 8: Webhook Handler
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Webhook Handler...")
    try:
        webhook_handler = WebhookHandler()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ webhook
        test_webhook = {
            "object": "whatsapp_business_account",
            "entry": [{
                "changes": [{
                    "value": {
                        "messages": [{
                            "from": "1234567890",
                            "type": "text",
                            "text": {"body": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"},
                            "id": "test_message_id"
                        }]
                    }
                }]
            }]
        }
        
        result = webhook_handler.validate_webhook(test_webhook)
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è webhook: {result['valid']}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Webhook Handler: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {os.getenv('LOG_FILE', 'app.json')}")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/logs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    os.environ["LOG_FILE"] = "app.json"
    os.environ["LOG_FORMAT"] = "json"
    os.environ["ENVIRONMENT"] = "development"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_all_services()) 