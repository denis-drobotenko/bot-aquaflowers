#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
"""

import asyncio
import os
import sys
import google.generativeai as genai
from google.generativeai import GenerationConfig
from google.generativeai.types import HarmCategory, HarmBlockThreshold

async def test_simple_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI...")
    genai.configure(api_key=api_key)
    
    model = genai.GenerativeModel(
        model_name="gemini-2.5-flash",
        generation_config=GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            top_k=40,
            max_output_tokens=8192
        ),
        safety_settings={
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
    )
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    simple_prompt = """You are a flower shop assistant. Respond in JSON format:

{
  "text": "your response in Russian",
  "text_en": "your response in English", 
  "text_thai": "your response in Thai",
  "command": null
}

User says: "–ü—Ä–∏–≤–µ—Ç"

Response:"""
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    print(f"–ü—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π: {len(simple_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    try:
        response = model.generate_content(simple_prompt)
        response_text = response.text.strip()
        
        print(f"\nüì• –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û—Ç–≤–µ—Ç (repr): {repr(response_text)}")
        print(f"–û—Ç–≤–µ—Ç (display): {response_text}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        import json
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                parsed = json.loads(json_str)
                print(f"\n‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:")
                print(f"   text: '{parsed.get('text', '')}'")
                print(f"   text_en: '{parsed.get('text_en', '')}'")
                print(f"   text_thai: '{parsed.get('text_thai', '')}'")
                print(f"   command: {parsed.get('command')}")
            else:
                print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AI...")
    asyncio.run(test_simple_ai())
    print("\nÔøΩÔøΩ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!") 