#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
"""

import os
import json
import datetime
import random

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
def create_test_logs():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è (—Å–µ–π—á–∞—Å)
    base_time = datetime.datetime.now()
    
    # –ú–æ–¥—É–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    modules = ["order_service", "ai_service", "message_service", "session_service", "user_service"]
    functions = ["create_order", "process_message", "get_user", "update_session", "send_notification"]
    
    logs = []
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    for i in range(50):
        # –í—Ä–µ–º—è –æ—Ç 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–π—á–∞—Å
        hours_ago = random.uniform(0, 24)
        log_time = base_time - datetime.timedelta(hours=hours_ago)
        
        # –°–ª—É—á–∞–π–Ω—ã–π –º–æ–¥—É–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏—è
        module = random.choice(modules)
        function = random.choice(functions)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        start_log = {
            "event": "function_start",
            "module": module,
            "function": function,
            "timestamp": log_time.isoformat(),
            "parameters": {
                "user_id": f"user_{random.randint(1000, 9999)}",
                "data": {"test": "value", "count": random.randint(1, 100)}
            }
        }
        logs.append(start_log)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ 1-100–º—Å)
        execution_time = random.uniform(1, 100)
        end_time = log_time + datetime.timedelta(milliseconds=execution_time)
        
        end_log = {
            "event": "function_end",
            "module": module,
            "function": function,
            "timestamp": end_time.isoformat(),
            "execution_time_ms": round(execution_time, 2),
            "result": f"Success: processed {random.randint(1, 10)} items"
        }
        logs.append(end_log)
        
        # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É (10% —Å–ª—É—á–∞–µ–≤)
        if random.random() < 0.1:
            error_time = end_time + datetime.timedelta(milliseconds=random.uniform(1, 50))
            error_log = {
                "event": "function_error",
                "module": module,
                "function": function,
                "timestamp": error_time.isoformat(),
                "error_type": "ValidationError",
                "error_message": f"Invalid data for user {random.randint(1000, 9999)}"
            }
            logs.append(error_log)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    logs.sort(key=lambda x: x["timestamp"])
    
    return logs

if __name__ == "__main__":
    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏...")
    
    logs = create_test_logs()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    log_file = "logs/app.json"
    with open(log_file, "w", encoding="utf-8") as f:
        for log in logs:
            f.write(json.dumps(log, ensure_ascii=False) + "\n")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
    print(f"üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    if logs:
        first_time = datetime.datetime.fromisoformat(logs[0]["timestamp"])
        last_time = datetime.datetime.fromisoformat(logs[-1]["timestamp"])
        print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {first_time.strftime('%Y-%m-%d %H:%M:%S')} - {last_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    events = {}
    for log in logs:
        event = log["event"]
        events[event] = events.get(event, 0) + 1
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º:")
    for event, count in events.items():
        print(f"   {event}: {count}") 