#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.services.order_service import OrderService
from src.models.order import Order, OrderItem, OrderStatus
from datetime import datetime

async def test_create_order():
    print("üîç –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    
    order_service = OrderService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    test_session_id = "test_session_001"
    test_sender_id = "79140775712"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = await order_service.get_or_create_order(test_session_id, test_sender_id)
        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order.order_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        item_data = {
            "product_id": "test_product_001",
            "bouquet": "Test Bouquet üå∏",
            "quantity": 2,
            "price": "350.00 ‡∏ø",
            "notes": "Test item"
        }
        
        result = await order_service.add_item(test_session_id, test_sender_id, item_data)
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {result}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = {
            "customer_name": "Test Customer",
            "customer_phone": test_sender_id,
            "recipient_name": "Test Recipient",
            "recipient_phone": "1234567890",
            "address": "Test Address, Bangkok",
            "date": "2025-07-08",
            "time": "14:00",
            "card_text": "Test card text",
            "delivery_needed": True
        }
        
        result = await order_service.update_order_data(test_session_id, test_sender_id, order_data)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {result}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        result = await order_service.update_order_status(test_session_id, test_sender_id, OrderStatus.CONFIRMED)
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ CRM
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –≤ CRM...")
        all_orders = await order_service.get_all_orders_for_crm()
        print(f"‚úÖ –ó–∞–∫–∞–∑–æ–≤ –≤ CRM: {len(all_orders)}")
        
        if all_orders:
            for order in all_orders:
                print(f"üìã –ó–∞–∫–∞–∑: {order.get('order_id')} | {order.get('status')} | {order.get('customer_name')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º...")
        customer_summary = await order_service.get_customer_orders_summary()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: {len(customer_summary['with_orders'])}")
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {len(customer_summary['without_orders'])}")
        
        if customer_summary['with_orders']:
            for customer in customer_summary['with_orders']:
                print(f"üë§ {customer['name']} ({customer['phone']}) - {customer['total_orders']} –∑–∞–∫–∞–∑–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_create_order()) 