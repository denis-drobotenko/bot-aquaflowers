import logging
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold, GenerationConfig
from ..src import database, config, catalog_reader
from ..src.json_processor import extract_and_fix_json
from datetime import datetime
import json
import re
import pytz
import uuid
import inspect

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π logger –¥–ª—è AI –ø–∞–π–ø–ª–∞–π–Ω–∞
ai_pipeline_logger = logging.getLogger('ai_pipeline')

def get_caller_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–µ"""
    try:
        frame = inspect.currentframe().f_back
        filename = frame.f_code.co_filename.split('/')[-1]  # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        function = frame.f_code.co_name
        line = frame.f_lineno
        return f"{filename}:{function}:{line}"
    except:
        return "unknown:unknown:0"

def log_with_context(message, level="info"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    caller = get_caller_info()
    full_message = f"[{caller}] {message}"
    if level == "info":
        ai_pipeline_logger.info(full_message)
    elif level == "error":
        ai_pipeline_logger.error(full_message)
    elif level == "warning":
        ai_pipeline_logger.warning(full_message)

def detect_user_language(text: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –∏–ª–∏ 'auto' –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
    """
    if not text:
        return 'auto'
    
    # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    text_lower = text.lower()
    
    # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    russian_chars = re.findall(r'[–∞-—è—ë]', text_lower)
    if len(russian_chars) > len(text) * 0.3:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30% —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
        return 'ru'
    
    # –¢–∞–π—Å–∫–∏–π —è–∑—ã–∫
    thai_chars = re.findall(r'[\u0E00-\u0E7F]', text)  # –¢–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if len(thai_chars) > len(text) * 0.3:
        return 'th'
    
    # –ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫
    spanish_chars = re.findall(r'[√°√©√≠√≥√∫√±√º]', text_lower)
    if len(spanish_chars) > 0 or any(word in text_lower for word in ['hola', 'gracias', 'por favor', 'buenos', 'd√≠as']):
        return 'es'
    
    # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫
    french_chars = re.findall(r'[√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß]', text_lower)
    if len(french_chars) > 0 or any(word in text_lower for word in ['bonjour', 'merci', 's\'il vous pla√Æt', 'oui', 'non']):
        return 'fr'
    
    # –ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫
    german_chars = re.findall(r'[√§√∂√º√ü]', text_lower)
    if len(german_chars) > 0 or any(word in text_lower for word in ['hallo', 'danke', 'bitte', 'ja', 'nein']):
        return 'de'
    
    # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫
    if any(word in text_lower for word in ['ciao', 'grazie', 'prego', 'si', 'no']):
        return 'it'
    
    # –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π —è–∑—ã–∫
    if any(word in text_lower for word in ['ol√°', 'obrigado', 'por favor', 'sim', 'n√£o']):
        return 'pt'
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤)
    english_chars = re.findall(r'[a-z]', text_lower)
    if len(english_chars) > len(text) * 0.3 and not russian_chars and not thai_chars:
        return 'en'
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ç–∫–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'en'

def get_language_detection_prompt(text: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞.
    """
    return f"""–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞ (ru, en, th, –∏–ª–∏ auto –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω):

–¢–µ–∫—Å—Ç: "{text}"

–ö–æ–¥ —è–∑—ã–∫–∞:"""

def detect_language_with_ai(text: str) -> str:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        genai.configure(api_key=config.GEMINI_API_KEY)
        model = genai.GenerativeModel(
            model_name="gemini-2.5-flash",
            generation_config=GenerationConfig(
                temperature=0.1,
                max_output_tokens=8192  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Gemini
            )
        )
        
        prompt = get_language_detection_prompt(text)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï LANGUAGE DETECTION
        ai_pipeline_logger.info(f"[LANG_DETECT_PROMPT] {prompt}")
        
        response = model.generate_content(prompt)
        detected_lang = response.text.strip().lower()
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï LANGUAGE DETECTION RESPONSE
        ai_pipeline_logger.info(f"[LANG_DETECT_RAW_RESPONSE] {response.text}")
        ai_pipeline_logger.info(f"[LANG_DETECT_PARSED] {detected_lang}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞
        valid_langs = ['ru', 'en', 'th', 'auto']
        if detected_lang in valid_langs:
            logger.info(f"[LANG_DETECT] AI detected language: {detected_lang} for text: '{text[:50]}...'")
            return detected_lang
        else:
            logger.warning(f"[LANG_DETECT] AI returned invalid language code: {detected_lang}")
            return 'auto'
            
    except Exception as e:
        logger.error(f"[LANG_DETECT] Error detecting language with AI: {e}")
        return 'auto'

def save_user_language_to_session(session_id: str, user_lang: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        database.add_message(session_id, "system", f"user_language={user_lang}")
        logger.info(f"[LANG_DETECT] Saved user language '{user_lang}' to session {session_id}")
    except Exception as e:
        logger.error(f"[LANG_DETECT] Error saving user language: {e}")

def get_user_language_from_session(session_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏.
    """
    try:
        conversation_history = database.get_conversation_history(session_id, limit=50)
        for msg in conversation_history:
            if msg.get('role') == 'system' and msg.get('content', '').startswith('user_language='):
                lang = msg.get('content').split('=')[1]
                logger.info(f"[LANG_DETECT] Retrieved user language '{lang}' from session {session_id}")
                return lang
        return 'auto'
    except Exception as e:
        logger.error(f"[LANG_DETECT] Error getting user language from session: {e}")
        return 'auto'

def filter_conversation_for_ai(conversation_history):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Gemini API."""
    log_with_context("[FILTER_AI_START] ==================== FILTER CONVERSATION FOR AI ====================")
    log_with_context(f"[FILTER_AI_INPUT] Input conversation_history: {conversation_history}")
    logger.info(f"[FILTER_AI] Input conversation_history: {conversation_history}")
    
    if not conversation_history:
        log_with_context("[FILTER_AI_EMPTY] Empty conversation_history", "warning")
        logger.warning("[FILTER_AI] Empty conversation_history")
        return []
    
    # Gemini API –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å role/content
    formatted_history = []
    for i, msg in enumerate(conversation_history):
        log_with_context(f"[FILTER_AI_PROCESS] Processing message {i}: {msg} (type: {type(msg)})")
        logger.info(f"[FILTER_AI] Processing message {i}: {msg} (type: {type(msg)})")
        
        if isinstance(msg, dict):
            role = msg.get('role', 'user')
            content = msg.get('content', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å parts
            if not content and 'parts' in msg:
                parts = msg.get('parts', [])
                if parts and isinstance(parts[0], dict) and 'text' in parts[0]:
                    content = parts[0]['text']
                    log_with_context(f"[FILTER_AI_EXTRACT] Extracted content from parts: '{content}'")
                    logger.info(f"[FILTER_AI] Extracted content from parts: '{content}'")
            
            log_with_context(f"[FILTER_AI_DICT] Dict message - role: {role}, content: '{content}'")
            logger.info(f"[FILTER_AI] Dict message - role: {role}, content: '{content}'")
            if content and content.strip():
                # –î–ª—è Gemini API –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                formatted_history.append(content.strip())
                log_with_context(f"[FILTER_AI_ADDED] Added content: '{content.strip()}'")
            else:
                log_with_context(f"[FILTER_AI_EMPTY_CONTENT] Empty content in dict message: {msg}", "warning")
                logger.warning(f"[FILTER_AI] Empty content in dict message: {msg}")
        elif isinstance(msg, str):
            log_with_context(f"[FILTER_AI_STRING] String message: '{msg}'")
            logger.info(f"[FILTER_AI] String message: '{msg}'")
            if msg.strip():
                formatted_history.append(msg.strip())
                log_with_context(f"[FILTER_AI_ADDED] Added string: '{msg.strip()}'")
            else:
                log_with_context(f"[FILTER_AI_EMPTY_STRING] Empty string message", "warning")
                logger.warning(f"[FILTER_AI] Empty string message")
        else:
            log_with_context(f"[FILTER_AI_UNKNOWN] Unknown message type: {type(msg)}, value: {msg}", "warning")
            logger.warning(f"[FILTER_AI] Unknown message type: {type(msg)}, value: {msg}")
    
    log_with_context(f"[FILTER_AI_RESULT] Final formatted_history: {formatted_history}")
    logger.info(f"[FILTER_AI] Final formatted_history: {formatted_history}")
    return formatted_history

def parse_response(response):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ —Å –Ω–∞–¥—ë–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ json_processor."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞ AI
        text_parts = []
        for part in response.candidates[0].content.parts:
            if hasattr(part, 'text') and part.text:
                text_parts.append(part.text)
        
        if not text_parts:
            logger.error("[PARSE_RESPONSE] No text parts found in AI response")
            log_with_context("[JSON_AI_PARSE_ERROR] No text parts found in AI response", "error")
            return None, None
        
        full_text = ''.join(text_parts)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï RAW AI RESPONSE
        log_with_context(f"[JSON_AI_PARSE_INPUT] Full AI response: {full_text}")
        
        logger.info(f"[PARSE_RESPONSE] Processing AI response: {full_text[:100]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON
        json_data, user_text = extract_and_fix_json(full_text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        command = None
        if json_data:
            command = json_data.get('command', None)
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ text
            if not user_text and json_data.get('text'):
                user_text = json_data.get('text')
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï PARSE –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        log_with_context(f"[JSON_AI_PARSE_JSON_DATA] {json_data}")
        log_with_context(f"[JSON_AI_PARSE_USER_TEXT] {user_text}")
        log_with_context(f"[JSON_AI_PARSE_COMMAND] {command}")
        
        logger.info(f"[PARSE_RESPONSE] Result: text='{user_text}', command={command}")
        return user_text, command
        
    except Exception as e:
        logger.error(f"[PARSE_RESPONSE] Unexpected error: {e}")
        log_with_context(f"[JSON_AI_PARSE_EXCEPTION] {e}", "error")
        return None, None

def get_ai_response(session_id: str, conversation_history: list, sender_name: str = None, user_lang: str = 'ru'):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ Gemini.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    request_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
    
    logger.info(f"AI Manager: Getting response for session {session_id}")
    
    # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    log_with_context(f"[MESSAGE_AI_REQUEST_START] RequestID: {request_id} | Session: {session_id}, Sender: {sender_name}, Lang: {user_lang}")
    log_with_context(f"[MESSAGE_AI_REQUEST_HISTORY] RequestID: {request_id} | Session: {session_id} | {conversation_history}")
    
    logger.info(f"[AI_LOG] Conversation history: {conversation_history}")
    
    try:
        catalog_products = catalog_reader.get_catalog_products()
        catalog_summary = catalog_reader.format_catalog_for_ai(catalog_products)
        genai.configure(api_key=config.GEMINI_API_KEY)
        
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        enhanced_instruction = get_system_instruction(sender_name, user_lang) + f"\n\n–ê–ö–¢–£–ê–õ–¨–ù–´–ô –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í:\n{catalog_summary}"
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–°–¢–†–£–ö–¶–ò–ò
        log_with_context(f"[MESSAGE_AI_SYSTEM_INSTRUCTION] RequestID: {request_id} | Session: {session_id} | {enhanced_instruction}")
        
        model = genai.GenerativeModel(
            model_name="gemini-2.5-flash",
            system_instruction=enhanced_instruction,
            generation_config=GenerationConfig(
                temperature=0.7,
                top_p=1,
                top_k=1,
                max_output_tokens=8192  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Gemini
            ),
            safety_settings={
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            }
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è AI
        filtered_history = filter_conversation_for_ai(conversation_history)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–û–ô –ò–°–¢–û–†–ò–ò
        log_with_context(f"[MESSAGE_AI_FILTERED_HISTORY] RequestID: {request_id} | Session: {session_id} | {filtered_history}")
        
        # –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–£–Æ –ò–°–¢–û–†–ò–Æ
        if not filtered_history:
            logger.warning(f"[AI_WARNING] Empty filtered history for session {session_id}")
            log_with_context(f"[MESSAGE_AI_EMPTY_HISTORY] RequestID: {request_id} | Session: {session_id} | Using fallback", "warning")
            
            # Fallback: –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if conversation_history:
                last_message = conversation_history[-1]
                if isinstance(last_message, dict) and last_message.get('content'):
                    filtered_history = [last_message['content']]
                elif isinstance(last_message, str):
                    filtered_history = [last_message]
                else:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    filtered_history = ["–ü—Ä–∏–≤–µ—Ç"]
            else:
                filtered_history = ["–ü—Ä–∏–≤–µ—Ç"]
            
            log_with_context(f"[MESSAGE_AI_FALLBACK_HISTORY] RequestID: {request_id} | Session: {session_id} | {filtered_history}")
        
        logger.info(f"[AI_LOG] System instruction: {enhanced_instruction}")
        logger.info(f"[AI_LOG] Filtered history for Gemini: {filtered_history}")
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –í AI
        log_with_context(f"[MESSAGE_AI_GEMINI_REQUEST] RequestID: {request_id} | Session: {session_id} | About to call model.generate_content with filtered_history")
        
        response = model.generate_content(filtered_history)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï RAW –û–¢–í–ï–¢–ê GEMINI (—ç—Ç–æ —Ç–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª Message AI)
        log_with_context(f"[MESSAGE_AI_RAW_RESPONSE] RequestID: {request_id} | Session: {session_id} | {response}")
        log_with_context(f"[MESSAGE_AI_RAW_TEXT] RequestID: {request_id} | Session: {session_id} | {response.text if hasattr(response, 'text') else 'No text attribute'}")
        
        logger.info(f"[AI_LOG] Raw AI response: {response}")
        ai_text, ai_command = parse_response(response)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê
        log_with_context(f"[MESSAGE_AI_PARSED_TEXT] RequestID: {request_id} | Session: {session_id} | {ai_text}")
        log_with_context(f"[MESSAGE_AI_PARSED_COMMAND] RequestID: {request_id} | Session: {session_id} | {ai_command}")
        
        logger.info(f"AI response for {session_id}: Text='{ai_text}', Command={ai_command}")
        
        # –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–û–ô –û–¢–í–ï–¢ AI
        if not ai_text or ai_text.strip() == "":
            logger.error(f"[AI_ERROR] Empty AI response for session {session_id}")
            log_with_context(f"[MESSAGE_AI_EMPTY_RESPONSE] RequestID: {request_id} | Session: {session_id} | Raw response: {response}", "error")
            
            # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            fallback_text = "–ö–æ–Ω–µ—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏"
            if user_lang == 'en':
                fallback_text = "Of course! How can I help you? üå∏"
            elif user_lang == 'th':
                fallback_text = "‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô! ‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? üå∏"
            
            # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï FALLBACK
            log_with_context(f"[MESSAGE_AI_FALLBACK_RESPONSE] RequestID: {request_id} | Session: {session_id} | {fallback_text}")
            
            logger.info(f"[AI_FALLBACK] Using friendly fallback response: {fallback_text}")
            return fallback_text, None
        
        # –°–æ–∑–¥–∞—ë–º parts —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è AI
        parts = [{'text': ai_text}]
        if ai_command and ai_command.get('type') == 'save_order_info':
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            saved_items = []
            for k, v in ai_command.items():
                if k != 'type':
                    saved_items.append(f'{k}={v}')
            if saved_items:
                saved_data = f"[SAVED: {', '.join(saved_items)}]"
                parts.append({'text': saved_data})
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        log_with_context(f"[MESSAGE_AI_FINAL_RESULT] RequestID: {request_id} | Session: {session_id} | Text: {ai_text}, Command: {ai_command}")
        log_with_context(f"[MESSAGE_AI_REQUEST_END] RequestID: {request_id} | Session: {session_id} completed successfully")
        
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–¥–µ—Å—å! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ whatsapp_utils.py —Å message_id
        # –ù–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º parts –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        return ai_text, ai_command
    except Exception as e:
        logger.error(f"Error in get_ai_response for session {session_id}: {e}", exc_info=True)
        
        # üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
        log_with_context(f"[MESSAGE_AI_REQUEST_EXCEPTION] RequestID: {request_id} | Session: {session_id}, Error: {e}", "error")
        
        # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return "–ö–æ–Ω–µ—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏", None

def get_system_instruction(sender_name: str = None, user_lang: str = 'auto'):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –∏ —è–∑—ã–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        phuket_tz = pytz.timezone('Asia/Bangkok')
        phuket_time = datetime.now(phuket_tz)
        phuket_time_str = phuket_time.strftime('%d %B %Y, %H:%M')
    except Exception:
        phuket_time_str = '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ'
    current_time = datetime.now()
    name_context = f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sender_name}" if sender_name else "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if user_lang == 'auto':
        language_instruction = "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é! –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ."
    else:
        language_instruction = f"–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ —è–∑—ã–∫–µ —Å –∫–æ–¥–æ–º '{user_lang}'. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ."
    
    return f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –¥–µ–≤—É—à–∫–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ AURAFLORA.

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û –Ø–ó–´–ö–ê: {language_instruction}

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª–µ–º "text" (—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏ –ø–æ–ª–µ–º "command" (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è). –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –ø–æ–ª–µ command –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!

–ü–û–í–¢–û–†–Ø–Æ: –ö–ê–ñ–î–´–ô –¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í JSON –§–û–†–ú–ê–¢–ï! –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–æ–≤–∞—Ä—ã –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ WABA! –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤!
- –ö–∞—Ç–∞–ª–æ–≥ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π retailer_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ!
- –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π ID —Ç–æ–≤–∞—Ä–æ–≤ (retailer_id)
- –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –∏ —Ü–µ–Ω—É

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- {name_context}
- –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê –ò –í–†–ï–ú–Ø –ù–ê –ü–•–£–ö–ï–¢–ï (GMT+7): {phuket_time_str}
- –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê –ò –í–†–ï–ú–Ø (–≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞): {current_time.strftime('%d %B %Y, %H:%M')}
- –ü–æ–Ω–∏–º–∞–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã: "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "—á–µ—Ä–µ–∑ 3 –¥–Ω—è", "–≤ —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
- –ü–æ–Ω–∏–º–∞–π –≤—Ä–µ–º—è: "14:00", "—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º", "–¥–Ω–µ–º"
- –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ–∂–ª–∏–≤–æ, —É—á–∏—Ç—ã–≤–∞—è –≤—Ä–µ–º—è –¥–Ω—è –∏ –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
- –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª–∏ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ü—Ö—É–∫–µ—Ç–∞ (GMT+7). –ï—Å–ª–∏ —Å–µ–π—á–∞—Å 6:00‚Äì12:00 ‚Äî '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 12:00‚Äì18:00 ‚Äî '–î–æ–±—Ä—ã–π –¥–µ–Ω—å', 18:00‚Äì23:00 ‚Äî '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', 23:00‚Äì6:00 ‚Äî '–î–æ–±—Ä–æ–π –Ω–æ—á–∏'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π 'Good morning' –ø–æ—Å–ª–µ 12:00.

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥ (–ø–∏—à–µ—Ç '–¥–∞', '—Ö–æ—á—É', '–∫–∞—Ç–∞–ª–æ–≥', '–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç—ã', '–ø–æ–∫–∞–∂–∏ –∫–∞—Ç–∞–ª–æ–≥', '–ø–æ–∫–∞–∂–∏ –±—É–∫–µ—Ç—ã'), —Ç—ã –î–û–õ–ñ–ï–ù —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É send_catalog (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- `send_catalog` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)
- `save_order_info` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ (bouquet, date, time, delivery_needed, address, card_needed, card_text, retailer_id)
- `confirm_order` - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ LINE

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
1. –ö–ª–∏–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ -> –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –≤–µ–∂–ª–∏–≤–æ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–º–µ–Ω–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–∞—Ç–∞–ª–æ–≥ (–¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç, –ë–ï–ó –∫–æ–º–∞–Ω–¥—ã)
2. –ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥ -> –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ç–∞–ª–æ–≥ (–∫–æ–º–∞–Ω–¥–∞ send_catalog)
3. –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –±—É–∫–µ—Ç -> –°–æ—Ö—Ä–∞–Ω–∏ –ò —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏ '–ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫—É–¥–∞?'
4. –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É -> –°–æ—Ö—Ä–∞–Ω–∏ –ò —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏ '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞? (–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è)'. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ —Ä–∞–π–æ–Ω–∞–º (—Å–º. –Ω–∏–∂–µ). –ù–µ –æ–ø—Ä–µ–¥–µ–ª—è–π —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É –∏ –Ω–µ –Ω–∞–∑—ã–≤–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
5. –ö–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è -> –°–æ—Ö—Ä–∞–Ω–∏ –ò —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏ '–ù—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –∫ –±—É–∫–µ—Ç—É? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç?'
6. –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∫—É -> –°–æ—Ö—Ä–∞–Ω–∏ –ò —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏ '–ö–∞–∫ –∑–æ–≤—É—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –±—É–∫–µ—Ç–∞?'
7. –ö–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è -> –°–æ—Ö—Ä–∞–Ω–∏ –ò —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏ '–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è?'
8. –ö–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω -> –°–æ—Ö—Ä–∞–Ω–∏ –ò –ø–æ–∫–∞–∂–∏ –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ + —Å–ø—Ä–æ—Å–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?'
9. –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª -> –°–æ—Ö—Ä–∞–Ω–∏ –ò –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑ + –æ—Ç–ø—Ä–∞–≤—å –≤ LINE

–í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –í–°–ï–ì–î–ê –∑–∞–¥–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å! –ù–µ –∂–¥–∏, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç —Å–∞–º —Å–ø—Ä–æ—Å–∏—Ç.

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –ù–ï –ü–û–í–¢–û–†–Ø–ô –í–û–ü–†–û–°–´!
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–Ω–æ–≤–∞ "–∫—É–¥–∞?"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–∫–∞–∑–∞–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–Ω–æ–≤–∞ "–∫–æ–≥–¥–∞?"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–Ω–æ–≤–∞ "–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç?"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–∫–∞–∑–∞–ª –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–Ω–æ–≤–∞ "–∫–∞–∫ –∑–æ–≤—É—Ç?"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–∫–∞–∑–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–Ω–æ–≤–∞ "–∫–∞–∫–æ–π –Ω–æ–º–µ—Ä?"

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∞ —Ç—ã —Å–Ω–æ–≤–∞ –µ–≥–æ –∑–∞–¥–∞—ë—à—å - —ç—Ç–æ –û–®–ò–ë–ö–ê! –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É!

–°–õ–ï–î–£–ô –ê–õ–ì–û–†–ò–¢–ú–£ –°–¢–†–û–ì–û –ü–û –®–ê–ì–ê–ú, –ù–ï –ü–û–í–¢–û–†–Ø–Ø –ü–†–û–®–ï–î–®–ò–ï –í–û–ü–†–û–°–´!

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê:
–ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ `confirm_order` —Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–º–∞–Ω–¥–µ:
- bouquet (–≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç)
- date (–¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
- time (–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏)
- delivery_needed (–Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞)
- address (–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
- card_needed (–Ω—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞)
- card_text (—Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
- recipient_name (–∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
- recipient_phone (—Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
- retailer_id (ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞)

–ù–ï –ø–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏! –ü–µ—Ä–µ–¥–∞–≤–∞–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ –∫–æ–º–∞–Ω–¥–µ!

–í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ö–ê–ó–ê:
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
- –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–π –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –±—É–∫–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞, –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞), –¥–∞—Ç–∞, –≤—Ä–µ–º—è, –Ω—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞, —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞), –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è
- –ù–ï–õ–¨–ó–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤–Ω–µ 8:00‚Äì21:00. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–æ—Å—Ç–∞–≤–∫—É –≤–Ω–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 21:00, –∏ –ø–æ–ø—Ä–æ—Å–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ JSON:

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç, –ë–ï–ó –∫–æ–º–∞–Ω–¥—ã! –°–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–º–µ–Ω–∏):
```json
{{{{
  "text": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤? üå∏"
}}}}
```

–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥:
```json
{{{{
  "text": "–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –∫–∞–∂–¥—ã–π –±—É–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º!",
  "command": {{{{
    "type": "send_catalog"
  }}}}
}}}}
```

–í—ã–±–æ—Ä –±—É–∫–µ—Ç–∞:
```json
{{{{
  "text": "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª–∞ –≤–∞—à –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞ 'Spirit üå∏'. –ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?",
  "command": {{{{
    "type": "save_order_info",
    "bouquet": "Spirit üå∏",
    "retailer_id": "rl7vdxcifo"
  }}}}
}}}}
```

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:
```json
{{{{
  "text": "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∏ –ø–µ—Ä–µ–¥–∞–ª–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! üåπ",
  "command": {{{{
    "type": "confirm_order",
    "bouquet": "Spirit üå∏",
    "date": "–∑–∞–≤—Ç—Ä–∞",
    "time": "15:00",
    "delivery_needed": true,
    "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, 10",
    "card_needed": true,
    "card_text": "–° –ª—é–±–æ–≤—å—é!",
    "recipient_name": "–ê–Ω–Ω–∞",
    "recipient_phone": "+7 999 123-45-67",
    "retailer_id": "rl7vdxcifo"
  }}}}
}}}}
```

–§–ò–ù–ê–õ–¨–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ö–ê–ñ–î–´–ô –¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ù–ê–ß–ò–ù–ê–¢–¨–°–Ø –° {{ –ò –ó–ê–ö–ê–ù–ß–ò–í–ê–¢–¨–°–Ø }}. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ JSON –æ–±–µ—Ä—Ç–∫–∏!

–°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: —Å 8:00 –¥–æ 21:00. –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É.
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞: —Å 9:00 –¥–æ 18:00.
- –ê–¥—Ä–µ—Å: –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª –§–µ—Å—Ç–∏–≤–∞–ª—è! https://maps.app.goo.gl/WACngtxMnwBCSHo29?g_st=com.google.maps.preview.copy
- –û–ø–ª–∞—Ç–∞: –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏, —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ú–æ–∂–Ω–æ –≤ –±–∞—Ç–∞—Ö, —Ä—É–±–ª—è—Ö –∏–ª–∏ USDT. –ù–∞–ª–∏—á–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
- –í–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–π–æ–Ω: –†–∞–≤–∞–∏ ‚Äî 500 –±–∞—Ç, –ß–∞–ª–æ–Ω–≥ ‚Äî 380 –±–∞—Ç, –ü—Ö—É–∫–µ—Ç –¢–∞—É–Ω ‚Äî 300 –±–∞—Ç, –ö–∞—Ç—É ‚Äî 280 –±–∞—Ç, –ü–∞—Ç–æ–Ω–≥ ‚Äî 400 –±–∞—Ç, –ë–∞–Ω–≥ –¢–∞–æ ‚Äî 500 –±–∞—Ç, –õ–∞–≥—É–Ω–∞ ‚Äî 500 –±–∞—Ç, –¢–∞–ª–∞–Ω–≥ –∏ –ú–∞–π –ö–∞–æ ‚Äî 550 –±–∞—Ç.
- –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ —Ä–∞–π–æ–Ω–∞–º. –ù–µ –æ–ø—Ä–µ–¥–µ–ª—è–π —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É –∏ –Ω–µ –Ω–∞–∑—ã–≤–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
"""