"""
Debug –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤ AuraFlora
"""

import logging
import json
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append('src')

try:
    from src import database
    from src.config import Config
except ImportError:
    # Fallback –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    database = None
    Config = None

app = FastAPI(title="AuraFlora Debug Viewer")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
debug_logs = []

class DebugLogHandler(logging.Handler):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    def emit(self, record):
        try:
            log_entry = {
                'timestamp': datetime.fromtimestamp(record.created).isoformat(),
                'logger_name': record.name,
                'level': record.levelname,
                'message': record.getMessage(),
                'session_id': self._extract_session_id(record.getMessage())
            }
            debug_logs.append(log_entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 1000 –∑–∞–ø–∏—Å–µ–π
            if len(debug_logs) > 1000:
                debug_logs.pop(0)
                
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–≥–µ—Ä–µ
    
    def _extract_session_id(self, message: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞"""
        import re
        patterns = [
            r'Session: ([^,\s]+)',
            r'session_id[=:\s]+([^,\s]+)',
            r'for session ([^,\s]+)',
            r'Session ID: ([^,\s]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, message)
            if match:
                return match.group(1)
        return None

def setup_debug_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–±–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    handler = DebugLogHandler()
    
    loggers = [
        'ai_pipeline',
        'json_processor', 
        'command_handler',
        'whatsapp_utils',
        'webhook_flow'
    ]
    
    for logger_name in loggers:
        target_logger = logging.getLogger(logger_name)
        target_logger.addHandler(handler)
        target_logger.setLevel(logging.INFO)

@app.get("/", response_class=HTMLResponse)
async def debug_interface():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AuraFlora Debug Viewer</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f0f2f5;
            line-height: 1.6;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }
        
        .container {
            max-width: 1400px;
            margin: 20px auto;
            padding: 0 20px;
        }
        
        .grid {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 20px;
            height: 80vh;
        }
        
        .sessions-panel {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow-y: auto;
        }
        
        .dialog-panel {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow-y: auto;
        }
        
        .refresh-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 15px;
            font-size: 14px;
            transition: background 0.3s;
        }
        
        .refresh-btn:hover {
            background: #45a049;
        }
        
        .session-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s;
            border-left: 4px solid transparent;
        }
        
        .session-item:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }
        
        .session-item.active {
            background: #e3f2fd;
            border-left-color: #2196F3;
        }
        
        .session-id {
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .session-meta {
            font-size: 12px;
            color: #666;
        }
        
        .message {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
            position: relative;
        }
        
        .message.user {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
            margin-left: 20px;
        }
        
        .message.assistant {
            background: #f3e5f5;
            border-left: 4px solid #9c27b0;
            margin-right: 20px;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .message-role {
            font-weight: bold;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 1px;
        }
        
        .message-time {
            font-size: 12px;
            color: #666;
        }
        
        .message-content {
            margin-bottom: 10px;
            white-space: pre-wrap;
        }
        
        .debug-btn {
            background: #2196F3;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: background 0.3s;
        }
        
        .debug-btn:hover {
            background: #1976D2;
        }
        
        .debug-details {
            background: #f5f5f5;
            border-radius: 8px;
            padding: 15px;
            margin-top: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
        }
        
        .log-entry {
            background: white;
            border-radius: 4px;
            padding: 8px;
            margin-bottom: 8px;
            border-left: 3px solid #ddd;
        }
        
        .log-entry.ai_pipeline { border-left-color: #FF6B6B; }
        .log-entry.json_processor { border-left-color: #4ECDC4; }
        .log-entry.command_handler { border-left-color: #45B7D1; }
        .log-entry.whatsapp_utils { border-left-color: #96CEB4; }
        .log-entry.webhook_flow { border-left-color: #FFEAA7; }
        
        .log-level {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            font-weight: bold;
            margin-right: 8px;
        }
        
        .log-level.INFO { background: #d4edda; color: #155724; }
        .log-level.WARNING { background: #fff3cd; color: #856404; }
        .log-level.ERROR { background: #f8d7da; color: #721c24; }
        
        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }
        
        .empty-state {
            text-align: center;
            padding: 50px;
            color: #999;
        }
        
        .deploy-controls {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .deploy-controls h3 {
            margin-bottom: 10px;
            color: #856404;
        }
        
        .deploy-id-display {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 8px 12px;
            font-family: monospace;
            margin-bottom: 10px;
            word-break: break-all;
        }
        
        .new-deploy-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }
        
        .new-deploy-btn:hover {
            background: #c82333;
        }
        
        .new-deploy-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üå∏ AuraFlora Debug Viewer</h1>
        <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π AI –ø–∞–π–ø–ª–∞–π–Ω–∞</p>
    </div>
    
    <div class="container">
        <div class="grid">
            <div class="sessions-panel">
                <div class="deploy-controls">
                    <h3>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DEPLOY_ID</h3>
                    <div class="deploy-id-display" id="current-deploy-id">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    <button class="new-deploy-btn" onclick="generateNewDeployId()" id="new-deploy-btn">
                        üîÑ –ù–æ–≤—ã–π DEPLOY_ID
                    </button>
                </div>
                <h3>üì± –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <button class="refresh-btn" onclick="loadSessions()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                <div id="sessions-list">
                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...</div>
                </div>
            </div>
            
            <div class="dialog-panel">
                <h3>üí¨ –î–∏–∞–ª–æ–≥</h3>
                <div id="dialog-content">
                    <div class="empty-state">
                        –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentSessionId = null;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ DEPLOY_ID
        async function loadCurrentDeployId() {
            try {
                const response = await fetch('/deploy-id');
                const data = await response.json();
                document.getElementById('current-deploy-id').textContent = data.deploy_id;
            } catch (error) {
                document.getElementById('current-deploy-id').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
                console.error('Error loading deploy ID:', error);
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ DEPLOY_ID
        async function generateNewDeployId() {
            const button = document.getElementById('new-deploy-btn');
            button.disabled = true;
            button.textContent = '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...';
            
            try {
                const response = await fetch('/deploy-id/generate', {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('current-deploy-id').textContent = data.new_deploy_id;
                    alert(`‚úÖ DEPLOY_ID –∏–∑–º–µ–Ω–µ–Ω!\n–°—Ç–∞—Ä—ã–π: ${data.old_deploy_id}\n–ù–æ–≤—ã–π: ${data.new_deploy_id}\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö!`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
                    loadSessions();
                } else {
                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ DEPLOY_ID: ' + data.error);
                }
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ DEPLOY_ID: ' + error.message);
                console.error('Error generating deploy ID:', error);
            } finally {
                button.disabled = false;
                button.textContent = 'üîÑ –ù–æ–≤—ã–π DEPLOY_ID';
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
        async function loadSessions() {
            try {
                const response = await fetch('/api/sessions');
                const sessions = await response.json();
                
                const container = document.getElementById('sessions-list');
                
                if (sessions.length === 0) {
                    container.innerHTML = '<div class="empty-state">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</div>';
                    return;
                }
                
                container.innerHTML = sessions.map(session => `
                    <div class="session-item" onclick="selectSession('${session.session_id}')">
                        <div class="session-id">${session.sender_id}</div>
                        <div class="session-meta">
                            üìÖ ${formatDateTime(session.last_message_time)}<br>
                            üí¨ ${session.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π
                        </div>
                    </div>
                `).join('');
                
            } catch (error) {
                document.getElementById('sessions-list').innerHTML = 
                    '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π</div>';
                console.error('Error loading sessions:', error);
            }
        }
        
        // –í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏
        async function selectSession(sessionId) {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.querySelectorAll('.session-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.session-item').classList.add('active');
            
            currentSessionId = sessionId;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
            document.getElementById('dialog-content').innerHTML = 
                '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–∞...</div>';
            
            try {
                const response = await fetch(`/api/session/${sessionId}/messages`);
                const data = await response.json();
                
                displayDialog(data.messages, data.logs);
                
            } catch (error) {
                document.getElementById('dialog-content').innerHTML = 
                    '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞</div>';
                console.error('Error loading dialog:', error);
            }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        function displayDialog(messages, logs) {
            const container = document.getElementById('dialog-content');
            
            if (messages.length === 0) {
                container.innerHTML = '<div class="empty-state">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ</div>';
                return;
            }
            
            container.innerHTML = messages.map((message, index) => {
                // –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –æ–∫–Ω–µ ¬±30 —Å–µ–∫—É–Ω–¥)
                const messageTime = new Date(message.timestamp);
                const messageLogs = logs.filter(log => {
                    const logTime = new Date(log.timestamp);
                    return Math.abs(logTime - messageTime) < 30000; // 30 —Å–µ–∫—É–Ω–¥
                });
                
                return `
                    <div class="message ${message.role}">
                        <div class="message-header">
                            <span class="message-role">
                                ${message.role === 'user' ? 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : 'ü§ñ AuraFlora'}
                            </span>
                            <span class="message-time">${formatTime(message.timestamp)}</span>
                        </div>
                        
                        <div class="message-content">${escapeHtml(message.content)}</div>
                        
                        ${messageLogs.length > 0 ? `
                            <button class="debug-btn" onclick="toggleDebug(${index})">
                                üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ (${messageLogs.length} –ª–æ–≥–æ–≤)
                            </button>
                            
                            <div class="debug-details" id="debug-${index}" style="display: none;">
                                ${formatLogs(messageLogs)}
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        function toggleDebug(index) {
            const details = document.getElementById(`debug-${index}`);
            const button = details.previousElementSibling;
            
            if (details.style.display === 'none') {
                details.style.display = 'block';
                button.textContent = button.textContent.replace('–ü–æ–∫–∞–∑–∞—Ç—å', '–°–∫—Ä—ã—Ç—å');
            } else {
                details.style.display = 'none';
                button.textContent = button.textContent.replace('–°–∫—Ä—ã—Ç—å', '–ü–æ–∫–∞–∑–∞—Ç—å');
            }
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        function formatLogs(logs) {
            return logs.map(log => `
                <div class="log-entry ${log.logger_name}">
                    <span class="log-level ${log.level}">${log.level}</span>
                    <strong>${log.logger_name}</strong>
                    <span style="color: #888; font-size: 11px;">[${formatTime(log.timestamp)}]</span>
                    <div style="margin-top: 5px;">${escapeHtml(log.message)}</div>
                </div>
            `).join('');
        }
        
        // –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        function formatDateTime(timestamp) {
            return new Date(timestamp).toLocaleString('ru-RU');
        }
        
        function formatTime(timestamp) {
            return new Date(timestamp).toLocaleTimeString('ru-RU');
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', () => {
            loadCurrentDeployId();
            loadSessions();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(loadSessions, 30000);
        });
    </script>
</body>
</html>
    """
    
    return HTMLResponse(content=html_content)

@app.get("/api/sessions")
async def get_sessions():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        sessions = []
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ session_id –∏–∑ –ª–æ–≥–æ–≤
        session_ids = set()
        for log_entry in debug_logs:
            if log_entry.get('session_id'):
                session_ids.add(log_entry['session_id'])
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for session_id in session_ids:
            try:
                if database:
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
                    history = database.get_conversation_history(session_id, limit=100)
                else:
                    # Fallback - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    history = [
                        {
                            'role': 'user',
                            'content': '–ü—Ä–∏–≤–µ—Ç!',
                            'timestamp': datetime.now()
                        }
                    ]
                
                if history:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º sender_id
                    sender_id = session_id.split('_')[0] if '_' in session_id else session_id
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    last_message = max(history, key=lambda x: x.get('timestamp', datetime.min))
                    
                    sessions.append({
                        'session_id': session_id,
                        'sender_id': sender_id,
                        'message_count': len(history),
                        'last_message_time': last_message.get('timestamp', datetime.now()).isoformat()
                    })
                    
            except Exception as e:
                print(f"Error processing session {session_id}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sessions.sort(key=lambda x: x['last_message_time'], reverse=True)
        
        return JSONResponse(content=sessions)
        
    except Exception as e:
        print(f"Error getting sessions: {e}")
        return JSONResponse(content=[])

@app.get("/api/session/{session_id}/messages")
async def get_session_messages(session_id: str):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏ —Å –ª–æ–≥–∞–º–∏"""
    try:
        messages = []
        
        if database:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
            history = database.get_conversation_history(session_id, limit=100)
            
            for msg in history:
                messages.append({
                    'role': msg.get('role', 'unknown'),
                    'content': msg.get('content', ''),
                    'timestamp': msg.get('timestamp', datetime.now()).isoformat()
                })
        else:
            # Fallback - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            messages = [
                {
                    'role': 'user',
                    'content': '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞–∂–∏ –º–Ω–µ –∫–∞—Ç–∞–ª–æ–≥.',
                    'timestamp': datetime.now().isoformat()
                },
                {
                    'role': 'assistant',
                    'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤–∞–º –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤.',
                    'timestamp': datetime.now().isoformat()
                }
            ]
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session_logs = [
            log for log in debug_logs 
            if log.get('session_id') == session_id
        ]
        
        return JSONResponse(content={
            'messages': messages,
            'logs': session_logs
        })
        
    except Exception as e:
        print(f"Error getting session messages: {e}")
        return JSONResponse(content={'messages': [], 'logs': []})

@app.get("/deploy-id")
async def get_deploy_id_proxy():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DEPLOY_ID —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/deploy-id")
            return JSONResponse(content=response.json())
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/deploy-id/generate")
async def generate_deploy_id_proxy():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ DEPLOY_ID"""
    try:
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.post("http://localhost:8000/deploy-id/generate")
            return JSONResponse(content=response.json())
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ª–æ–≥–æ–≤
    setup_debug_logging()
    
    print("üå∏ –ó–∞–ø—É—Å–∫ AuraFlora Debug Viewer...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8001 –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
    
    uvicorn.run(app, host="0.0.0.0", port=8001) 