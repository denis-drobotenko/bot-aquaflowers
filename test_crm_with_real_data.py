#!/usr/bin/env python3
"""
–¢–µ—Å—Ç CRM —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.services.order_service import OrderService

async def test_crm_with_real_data():
    print("üîç –¢–µ—Å—Ç CRM —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    order_service = OrderService()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è CRM
        print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º get_all_orders_for_crm()...")
        all_orders = await order_service.get_all_orders_for_crm()
        print(f"‚úÖ –ó–∞–∫–∞–∑–æ–≤ –¥–ª—è CRM: {len(all_orders)}")
        
        if all_orders:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤:")
            for i, order in enumerate(all_orders[:3]):
                print(f"  {i+1}. ID: {order.get('order_id')}")
                print(f"     –°—Ç–∞—Ç—É—Å: {order.get('status')}")
                print(f"     –ö–ª–∏–µ–Ω—Ç: {order.get('customer_name', 'N/A')} ({order.get('sender_id')})")
                print(f"     –°–æ–∑–¥–∞–Ω: {order.get('created_at')}")
                print(f"     –¢–æ–≤–∞—Ä—ã: {order.get('total_items', 0)}")
                print(f"     –¶–µ–Ω–∞: {order.get('total_price', 0)}")
        else:
            print("‚ö†Ô∏è –ó–∞–∫–∞–∑–æ–≤ –¥–ª—è CRM –Ω–µ—Ç")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        print("\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º get_customer_orders_summary()...")
        customer_summary = await order_service.get_customer_orders_summary()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: {len(customer_summary['with_orders'])}")
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {len(customer_summary['without_orders'])}")
        
        if customer_summary['with_orders']:
            print("üìã –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏:")
            for i, customer in enumerate(customer_summary['with_orders']):
                print(f"  {i+1}. {customer['name']} ({customer['phone']})")
                print(f"     –ó–∞–∫–∞–∑–æ–≤: {customer['total_orders']}")
                print(f"     –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {customer['completed_orders']}")
                if customer.get('orders'):
                    print(f"     –ó–∞–∫–∞–∑—ã: {[order.get('order_id', 'N/A')[-8:] for order in customer['orders'][:3]]}")
        else:
            print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ—Ç")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        print("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏...")
        from src.routes.crm_routes import group_orders_by_time
        time_grouped = group_orders_by_time(all_orders)
        
        print("üìã –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        for period, statuses in time_grouped.items():
            incomplete = len(statuses['incomplete'])
            completed = len(statuses['completed'])
            total = incomplete + completed
            print(f"  {period.capitalize()}: {total} –∑–∞–∫–∞–∑–æ–≤ ({incomplete} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö, {completed} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö)")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º...")
        from src.routes.crm_routes import group_orders_by_status
        status_grouped = group_orders_by_status(all_orders)
        
        print("üìã –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, orders in status_grouped.items():
            print(f"  {status}: {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_crm_with_real_data()) 