#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ Google Cloud —á–µ—Ä–µ–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
"""

import os
import json
import re
import sys
from datetime import datetime
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
os.environ['PYTHONIOENCODING'] = 'utf-8'

def fix_cyrillic_encoding(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    if not text:
        return text
    
    try:
        import ftfy
        import codecs
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ftfy - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç mojibake
        fixed_text = ftfy.fix_text(text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Unicode escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if '\\u04' in text or '\\u05' in text:  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ Unicode
            try:
                fixed_text = codecs.decode(text, 'unicode_escape')
            except:
                # –ü—Ä–æ–±—É–µ–º –ø–æ —á–∞—Å—Ç—è–º
                unicode_pattern = r'\\u[0-9a-fA-F]{4}'
                def replace_unicode(match):
                    try:
                        return codecs.decode(match.group(0), 'unicode_escape')
                    except:
                        return match.group(0)
                fixed_text = re.sub(unicode_pattern, replace_unicode, text)
        
        return fixed_text
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        return text

def get_logs_via_api():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∑–∞ 2 –∏—é–ª—è 2025 —á–µ—Ä–µ–∑ Google Cloud Logging API"""
    try:
        from google.cloud import logging
        print("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Cloud Logging API...")
        
        client = logging.Client()
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ç–æ–ª—å–∫–æ –∑–∞ 2 –∏—é–ª—è 2025
        filter_str = '''
        resource.type="cloud_run_revision"
        resource.labels.service_name="auraflora-bot"
        timestamp >= "2025-07-02T00:00:00Z"
        timestamp < "2025-07-03T00:00:00Z"
        '''
        
        print("–ü–æ–ª—É—á–∞—é –ª–æ–≥–∏ –∑–∞ 2 –∏—é–ª—è 2025...")
        
        entries = client.list_entries(
            filter_=filter_str,
            page_size=5000,
            max_results=5000
        )
        
        logs_data = []
        for entry in entries:
            log_entry = {
                'timestamp': entry.timestamp.isoformat() if entry.timestamp else '',
                'textPayload': str(entry.payload) if entry.payload else '',
            }
            logs_data.append(log_entry)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(logs_data)} –∑–∞–ø–∏—Å–µ–π")
        return logs_data, True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return None, False

def extract_ai_responses(logs_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç AI –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    ai_responses = []
    
    print("üîç –ò–∑–≤–ª–µ–∫–∞—é AI –æ—Ç–≤–µ—Ç—ã...")
    
    for i, log_entry in enumerate(logs_data):
        if i % 500 == 0 and i > 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i} –∑–∞–ø–∏—Å–µ–π")
            
        text = log_entry.get('textPayload', '')
        if not text:
            continue
        
        # –ò—â–µ–º AI –æ—Ç–≤–µ—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
        keywords = [
            'ai response:', 'parse_response', '"text":',
            '[ai_debug]', 'gemini response', 'ai_manager',
            'response:', 'ai:', '–æ—Ç–≤–µ—Ç:'
        ]
        
        if any(keyword in text.lower() for keyword in keywords):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ö–ê–ö –ï–°–¢–¨ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            ai_text = None
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞
            patterns = [
                r'AI response:\s*(.+)',
                r'ai response:\s*(.+)',
                r'"text":\s*"([^"]*)"',
                r'"text":\s*`([^`]*)`',
                r'PARSE_RESPONSE[:\s]*(.+)',
                r'\[AI_DEBUG\]\s*(.+)',
                r'response:\s*(.+)',
            ]
            
            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
                if match:
                    ai_text = match.group(1).strip()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    if len(ai_text) > 1000:
                        ai_text = ai_text[:1000] + "..."
                    break
            
            if ai_text and len(ai_text) > 2:
                ai_responses.append({
                    'timestamp': log_entry.get('timestamp', ''),
                    'response': ai_text,
                    'original_log': text[:200] + "..." if len(text) > 200 else text
                })
    
    return ai_responses

def save_results(ai_responses):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 2 –∏—é–ª—è"""
    logs_dir = Path("fixed_logs")
    logs_dir.mkdir(exist_ok=True)
    
    # JSON —Ñ–∞–π–ª
    json_file = logs_dir / "ai_responses_july_02_raw.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(ai_responses, f, ensure_ascii=False, indent=2)
    
    # –ß–∏—Ç–∞–µ–º—ã–π —Ñ–∞–π–ª
    txt_file = logs_dir / "ai_responses_july_02_raw.txt"
    with open(txt_file, 'w', encoding='utf-8') as f:
        f.write("ü§ñ AI –û–¢–í–ï–¢–´ –ó–ê 2 –ò–Æ–õ–Ø 2025 (–ö–ê–ö –ï–°–¢–¨)\n")
        f.write("=" * 70 + "\n")
        f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(ai_responses)} –æ—Ç–≤–µ—Ç–æ–≤\n")
        f.write(f"–î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
        f.write("=" * 70 + "\n\n")
        
        for i, ai_entry in enumerate(ai_responses, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            timestamp = ai_entry['timestamp']
            if timestamp:
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
                except:
                    time_str = timestamp
            else:
                time_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            f.write(f"{i}. [{time_str}]\n")
            f.write(f"AI: {ai_entry['response']}\n")
            f.write("-" * 100 + "\n\n")
    
    print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:")
    print(f"  üìÑ JSON: {json_file}")
    print(f"  üìñ –¢–µ–∫—Å—Ç: {txt_file}")
    
    return txt_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–£–ß–ï–ù–ò–ï AI –û–¢–í–ï–¢–û–í –ó–ê 2 –ò–Æ–õ–Ø 2025")
    print("=" * 60)
    print("üìÖ –î–∞—Ç–∞: 2 –∏—é–ª—è 2025")
    print("üìã –§–æ—Ä–º–∞—Ç: –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ 2 –∏—é–ª—è
    logs_data, success = get_logs_via_api()
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º AI –æ—Ç–≤–µ—Ç—ã
    ai_responses = extract_ai_responses(logs_data)
    print(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {len(ai_responses)} AI –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 2 –∏—é–ª—è")
    
    if not ai_responses:
        print("‚ö†Ô∏è AI –æ—Ç–≤–µ—Ç—ã –∑–∞ 2 –∏—é–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    result_file = save_results(ai_responses)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print(f"\nüìù –ü–ï–†–í–´–ï 5 AI –û–¢–í–ï–¢–û–í:")
    print("-" * 70)
    for i, ai_entry in enumerate(ai_responses[:5], 1):
        preview = ai_entry['response'][:120]
        if len(ai_entry['response']) > 120:
            preview += "..."
        
        # –í—Ä–µ–º—è
        try:
            dt = datetime.fromisoformat(ai_entry['timestamp'].replace('Z', '+00:00'))
            time_str = dt.strftime('%H:%M:%S')
        except:
            time_str = 'N/A'
        
        print(f"{i}. [{time_str}] {preview}")
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ AI –æ—Ç–≤–µ—Ç—ã –∑–∞ 2 –∏—é–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_file}")

if __name__ == "__main__":
    main() 